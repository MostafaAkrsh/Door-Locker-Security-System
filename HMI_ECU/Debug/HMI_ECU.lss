
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00800060  00003b34  00003bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  0080011c  0080011c  00003c84  2**0
                  ALLOC
  3 .stab         00003894  00000000  00000000  00003c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015f5  00000000  00000000  00007518  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000aa06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b8f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c6a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ca8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d25b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__vector_3>
      10:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 dd 15 	jmp	0x2bba	; 0x2bba <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__vector_8>
      24:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 ae 1a 	jmp	0x355c	; 0x355c <__vector_11>
      30:	0c 94 14 1b 	jmp	0x3628	; 0x3628 <__vector_12>
      34:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 33       	cpi	r26, 0x3D	; 61
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 14 	call	0x289e	; 0x289e <main>
      8a:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e1       	ldi	r26, 0x14	; 20
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 38 1d 	jmp	0x3a70	; 0x3a70 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 28 1d 	jmp	0x3a50	; 0x3a50 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 44 1d 	jmp	0x3a88	; 0x3a88 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 28 1d 	jmp	0x3a50	; 0x3a50 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 44 1d 	jmp	0x3a88	; 0x3a88 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e1       	ldi	r24, 0x14	; 20
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 38 1d 	jmp	0x3a70	; 0x3a70 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 28 1d 	jmp	0x3a50	; 0x3a50 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 44 1d 	jmp	0x3a88	; 0x3a88 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 28 1d 	jmp	0x3a50	; 0x3a50 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 44 1d 	jmp	0x3a88	; 0x3a88 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 28 1d 	jmp	0x3a50	; 0x3a50 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 44 1d 	jmp	0x3a88	; 0x3a88 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2c 1d 	jmp	0x3a58	; 0x3a58 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 48 1d 	jmp	0x3a90	; 0x3a90 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <ledony>:
#include "helpers.h"

/* Call Back Functions */
volatile void ledony()
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	//LCD_intgerToString(000);
}
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <check_identical>:
extern uint8 password1[PASS_SIZE];
extern uint8 password2[PASS_SIZE];
extern uint8 passwordCheck[PASS_SIZE];

uint8 check_identical(uint8* pass1, uint8* pass2)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	27 97       	sbiw	r28, 0x07	; 7
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	9c 83       	std	Y+4, r25	; 0x04
    11e6:	8b 83       	std	Y+3, r24	; 0x03
    11e8:	7e 83       	std	Y+6, r23	; 0x06
    11ea:	6d 83       	std	Y+5, r22	; 0x05
	int pass_index;
	for(pass_index = 0 ; pass_index < PASS_SIZE ; pass_index++)
    11ec:	1a 82       	std	Y+2, r1	; 0x02
    11ee:	19 82       	std	Y+1, r1	; 0x01
    11f0:	19 c0       	rjmp	.+50     	; 0x1224 <check_identical+0x54>
	{
		if(pass1[pass_index]!=pass2[pass_index])
    11f2:	29 81       	ldd	r18, Y+1	; 0x01
    11f4:	3a 81       	ldd	r19, Y+2	; 0x02
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	fc 01       	movw	r30, r24
    11fc:	e2 0f       	add	r30, r18
    11fe:	f3 1f       	adc	r31, r19
    1200:	40 81       	ld	r20, Z
    1202:	29 81       	ldd	r18, Y+1	; 0x01
    1204:	3a 81       	ldd	r19, Y+2	; 0x02
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	fc 01       	movw	r30, r24
    120c:	e2 0f       	add	r30, r18
    120e:	f3 1f       	adc	r31, r19
    1210:	80 81       	ld	r24, Z
    1212:	48 17       	cp	r20, r24
    1214:	11 f0       	breq	.+4      	; 0x121a <check_identical+0x4a>
		{
			return NO;
    1216:	1f 82       	std	Y+7, r1	; 0x07
    1218:	0c c0       	rjmp	.+24     	; 0x1232 <check_identical+0x62>
extern uint8 passwordCheck[PASS_SIZE];

uint8 check_identical(uint8* pass1, uint8* pass2)
{
	int pass_index;
	for(pass_index = 0 ; pass_index < PASS_SIZE ; pass_index++)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	9a 81       	ldd	r25, Y+2	; 0x02
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	9a 81       	ldd	r25, Y+2	; 0x02
    1228:	85 30       	cpi	r24, 0x05	; 5
    122a:	91 05       	cpc	r25, r1
    122c:	14 f3       	brlt	.-60     	; 0x11f2 <check_identical+0x22>
		{
			return NO;
		}
	}

	return YES;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	8f 83       	std	Y+7, r24	; 0x07
    1232:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1234:	27 96       	adiw	r28, 0x07	; 7
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <enter_password>:


void enter_password(void)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	60 97       	sbiw	r28, 0x10	; 16
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    125a:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_clearScreen>
	LCD_displayString("Please Enter Password:");
    125e:	80 e6       	ldi	r24, 0x60	; 96
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_displayString>
	LCD_moveCursor(1,5);
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	65 e0       	ldi	r22, 0x05	; 5
    126a:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_moveCursor>
	uint8 key = 0;
    126e:	18 8a       	std	Y+16, r1	; 0x10
	uint8 password_index = 0;
    1270:	1f 86       	std	Y+15, r1	; 0x0f
    1272:	83 c0       	rjmp	.+262    	; 0x137a <enter_password+0x134>
	while(password_index != PASS_SIZE)
	{
		key = KEYPAD_getPressedKey();
    1274:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <KEYPAD_getPressedKey>
    1278:	88 8b       	std	Y+16, r24	; 0x10
		LCD_displayCharacter('*');
    127a:	8a e2       	ldi	r24, 0x2A	; 42
    127c:	0e 94 aa 11 	call	0x2354	; 0x2354 <LCD_displayCharacter>
		password1[password_index] = key;
    1280:	8f 85       	ldd	r24, Y+15	; 0x0f
    1282:	88 2f       	mov	r24, r24
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	fc 01       	movw	r30, r24
    1288:	e8 5c       	subi	r30, 0xC8	; 200
    128a:	fe 4f       	sbci	r31, 0xFE	; 254
    128c:	88 89       	ldd	r24, Y+16	; 0x10
    128e:	80 83       	st	Z, r24
		password_index++;
    1290:	8f 85       	ldd	r24, Y+15	; 0x0f
    1292:	8f 5f       	subi	r24, 0xFF	; 255
    1294:	8f 87       	std	Y+15, r24	; 0x0f
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	aa ef       	ldi	r26, 0xFA	; 250
    129c:	b3 e4       	ldi	r27, 0x43	; 67
    129e:	8b 87       	std	Y+11, r24	; 0x0b
    12a0:	9c 87       	std	Y+12, r25	; 0x0c
    12a2:	ad 87       	std	Y+13, r26	; 0x0d
    12a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	4a ef       	ldi	r20, 0xFA	; 250
    12b4:	54 e4       	ldi	r21, 0x44	; 68
    12b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	8f 83       	std	Y+7, r24	; 0x07
    12c0:	98 87       	std	Y+8, r25	; 0x08
    12c2:	a9 87       	std	Y+9, r26	; 0x09
    12c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c6:	6f 81       	ldd	r22, Y+7	; 0x07
    12c8:	78 85       	ldd	r23, Y+8	; 0x08
    12ca:	89 85       	ldd	r24, Y+9	; 0x09
    12cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e8       	ldi	r20, 0x80	; 128
    12d4:	5f e3       	ldi	r21, 0x3F	; 63
    12d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12da:	88 23       	and	r24, r24
    12dc:	2c f4       	brge	.+10     	; 0x12e8 <enter_password+0xa2>
		__ticks = 1;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	9e 83       	std	Y+6, r25	; 0x06
    12e4:	8d 83       	std	Y+5, r24	; 0x05
    12e6:	3f c0       	rjmp	.+126    	; 0x1366 <enter_password+0x120>
	else if (__tmp > 65535)
    12e8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ea:	78 85       	ldd	r23, Y+8	; 0x08
    12ec:	89 85       	ldd	r24, Y+9	; 0x09
    12ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	3f ef       	ldi	r19, 0xFF	; 255
    12f4:	4f e7       	ldi	r20, 0x7F	; 127
    12f6:	57 e4       	ldi	r21, 0x47	; 71
    12f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fc:	18 16       	cp	r1, r24
    12fe:	4c f5       	brge	.+82     	; 0x1352 <enter_password+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1300:	6b 85       	ldd	r22, Y+11	; 0x0b
    1302:	7c 85       	ldd	r23, Y+12	; 0x0c
    1304:	8d 85       	ldd	r24, Y+13	; 0x0d
    1306:	9e 85       	ldd	r25, Y+14	; 0x0e
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e2       	ldi	r20, 0x20	; 32
    130e:	51 e4       	ldi	r21, 0x41	; 65
    1310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	bc 01       	movw	r22, r24
    131a:	cd 01       	movw	r24, r26
    131c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	9e 83       	std	Y+6, r25	; 0x06
    1326:	8d 83       	std	Y+5, r24	; 0x05
    1328:	0f c0       	rjmp	.+30     	; 0x1348 <enter_password+0x102>
    132a:	88 ec       	ldi	r24, 0xC8	; 200
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	9c 83       	std	Y+4, r25	; 0x04
    1330:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	f1 f7       	brne	.-4      	; 0x1336 <enter_password+0xf0>
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	9e 83       	std	Y+6, r25	; 0x06
    1346:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	69 f7       	brne	.-38     	; 0x132a <enter_password+0xe4>
    1350:	14 c0       	rjmp	.+40     	; 0x137a <enter_password+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1352:	6f 81       	ldd	r22, Y+7	; 0x07
    1354:	78 85       	ldd	r23, Y+8	; 0x08
    1356:	89 85       	ldd	r24, Y+9	; 0x09
    1358:	9a 85       	ldd	r25, Y+10	; 0x0a
    135a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	9e 83       	std	Y+6, r25	; 0x06
    1364:	8d 83       	std	Y+5, r24	; 0x05
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	9a 83       	std	Y+2, r25	; 0x02
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	9a 81       	ldd	r25, Y+2	; 0x02
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	f1 f7       	brne	.-4      	; 0x1372 <enter_password+0x12c>
    1376:	9a 83       	std	Y+2, r25	; 0x02
    1378:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_displayString("Please Enter Password:");
	LCD_moveCursor(1,5);
	uint8 key = 0;
	uint8 password_index = 0;
	while(password_index != PASS_SIZE)
    137a:	8f 85       	ldd	r24, Y+15	; 0x0f
    137c:	85 30       	cpi	r24, 0x05	; 5
    137e:	09 f0       	breq	.+2      	; 0x1382 <enter_password+0x13c>
    1380:	79 cf       	rjmp	.-270    	; 0x1274 <enter_password+0x2e>
		LCD_displayCharacter('*');
		password1[password_index] = key;
		password_index++;
		_delay_ms(500); /* Press time */
	}
}
    1382:	60 96       	adiw	r28, 0x10	; 16
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <reenter_password>:

uint8 reenter_password(void)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	62 97       	sbiw	r28, 0x12	; 18
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    13a8:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_clearScreen>
	LCD_displayString("Please Reenter Password:");
    13ac:	87 e7       	ldi	r24, 0x77	; 119
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_displayString>
	LCD_moveCursor(1,5);
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	65 e0       	ldi	r22, 0x05	; 5
    13b8:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_moveCursor>
	uint8 key = 0;
    13bc:	1a 8a       	std	Y+18, r1	; 0x12
	uint8 password_index = 0;
    13be:	19 8a       	std	Y+17, r1	; 0x11
    13c0:	83 c0       	rjmp	.+262    	; 0x14c8 <reenter_password+0x134>

	while(password_index != PASS_SIZE)
	{
		key = KEYPAD_getPressedKey();
    13c2:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <KEYPAD_getPressedKey>
    13c6:	8a 8b       	std	Y+18, r24	; 0x12
		LCD_displayCharacter('*');
    13c8:	8a e2       	ldi	r24, 0x2A	; 42
    13ca:	0e 94 aa 11 	call	0x2354	; 0x2354 <LCD_displayCharacter>
		password2[password_index] = key;
    13ce:	89 89       	ldd	r24, Y+17	; 0x11
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	fc 01       	movw	r30, r24
    13d6:	ed 5c       	subi	r30, 0xCD	; 205
    13d8:	fe 4f       	sbci	r31, 0xFE	; 254
    13da:	8a 89       	ldd	r24, Y+18	; 0x12
    13dc:	80 83       	st	Z, r24
		password_index++;
    13de:	89 89       	ldd	r24, Y+17	; 0x11
    13e0:	8f 5f       	subi	r24, 0xFF	; 255
    13e2:	89 8b       	std	Y+17, r24	; 0x11
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	aa ef       	ldi	r26, 0xFA	; 250
    13ea:	b3 e4       	ldi	r27, 0x43	; 67
    13ec:	8b 87       	std	Y+11, r24	; 0x0b
    13ee:	9c 87       	std	Y+12, r25	; 0x0c
    13f0:	ad 87       	std	Y+13, r26	; 0x0d
    13f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a ef       	ldi	r20, 0xFA	; 250
    1402:	54 e4       	ldi	r21, 0x44	; 68
    1404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	8f 83       	std	Y+7, r24	; 0x07
    140e:	98 87       	std	Y+8, r25	; 0x08
    1410:	a9 87       	std	Y+9, r26	; 0x09
    1412:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	89 85       	ldd	r24, Y+9	; 0x09
    141a:	9a 85       	ldd	r25, Y+10	; 0x0a
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e8       	ldi	r20, 0x80	; 128
    1422:	5f e3       	ldi	r21, 0x3F	; 63
    1424:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1428:	88 23       	and	r24, r24
    142a:	2c f4       	brge	.+10     	; 0x1436 <reenter_password+0xa2>
		__ticks = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9e 83       	std	Y+6, r25	; 0x06
    1432:	8d 83       	std	Y+5, r24	; 0x05
    1434:	3f c0       	rjmp	.+126    	; 0x14b4 <reenter_password+0x120>
	else if (__tmp > 65535)
    1436:	6f 81       	ldd	r22, Y+7	; 0x07
    1438:	78 85       	ldd	r23, Y+8	; 0x08
    143a:	89 85       	ldd	r24, Y+9	; 0x09
    143c:	9a 85       	ldd	r25, Y+10	; 0x0a
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	3f ef       	ldi	r19, 0xFF	; 255
    1442:	4f e7       	ldi	r20, 0x7F	; 127
    1444:	57 e4       	ldi	r21, 0x47	; 71
    1446:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    144a:	18 16       	cp	r1, r24
    144c:	4c f5       	brge	.+82     	; 0x14a0 <reenter_password+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1450:	7c 85       	ldd	r23, Y+12	; 0x0c
    1452:	8d 85       	ldd	r24, Y+13	; 0x0d
    1454:	9e 85       	ldd	r25, Y+14	; 0x0e
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e2       	ldi	r20, 0x20	; 32
    145c:	51 e4       	ldi	r21, 0x41	; 65
    145e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <reenter_password+0x102>
    1478:	88 ec       	ldi	r24, 0xC8	; 200
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9c 83       	std	Y+4, r25	; 0x04
    147e:	8b 83       	std	Y+3, r24	; 0x03
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <reenter_password+0xf0>
    1488:	9c 83       	std	Y+4, r25	; 0x04
    148a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9e 83       	std	Y+6, r25	; 0x06
    1494:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	69 f7       	brne	.-38     	; 0x1478 <reenter_password+0xe4>
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <reenter_password+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a0:	6f 81       	ldd	r22, Y+7	; 0x07
    14a2:	78 85       	ldd	r23, Y+8	; 0x08
    14a4:	89 85       	ldd	r24, Y+9	; 0x09
    14a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	9a 81       	ldd	r25, Y+2	; 0x02
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <reenter_password+0x12c>
    14c4:	9a 83       	std	Y+2, r25	; 0x02
    14c6:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString("Please Reenter Password:");
	LCD_moveCursor(1,5);
	uint8 key = 0;
	uint8 password_index = 0;

	while(password_index != PASS_SIZE)
    14c8:	89 89       	ldd	r24, Y+17	; 0x11
    14ca:	85 30       	cpi	r24, 0x05	; 5
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <reenter_password+0x13c>
    14ce:	79 cf       	rjmp	.-270    	; 0x13c2 <reenter_password+0x2e>
		password2[password_index] = key;
		password_index++;
		_delay_ms(500); /* Press time */
	}

	uint8 identical = check_identical(password1, password2);
    14d0:	88 e3       	ldi	r24, 0x38	; 56
    14d2:	91 e0       	ldi	r25, 0x01	; 1
    14d4:	23 e3       	ldi	r18, 0x33	; 51
    14d6:	31 e0       	ldi	r19, 0x01	; 1
    14d8:	b9 01       	movw	r22, r18
    14da:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <check_identical>
    14de:	88 8b       	std	Y+16, r24	; 0x10

	if(identical)
    14e0:	88 89       	ldd	r24, Y+16	; 0x10
    14e2:	88 23       	and	r24, r24
    14e4:	69 f0       	breq	.+26     	; 0x1500 <reenter_password+0x16c>
	{
		UART_sendByte('!');
    14e6:	81 e2       	ldi	r24, 0x21	; 33
    14e8:	0e 94 2f 1c 	call	0x385e	; 0x385e <UART_sendByte>
		uint8 key = UART_recieveByte();
    14ec:	0e 94 46 1c 	call	0x388c	; 0x388c <UART_recieveByte>
    14f0:	8f 87       	std	Y+15, r24	; 0x0f
		if(key == '!')
    14f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f4:	81 32       	cpi	r24, 0x21	; 33
    14f6:	21 f4       	brne	.+8      	; 0x1500 <reenter_password+0x16c>
		UART_sendString(password1);
    14f8:	88 e3       	ldi	r24, 0x38	; 56
    14fa:	91 e0       	ldi	r25, 0x01	; 1
    14fc:	0e 94 55 1c 	call	0x38aa	; 0x38aa <UART_sendString>
	}

	return identical;
    1500:	88 89       	ldd	r24, Y+16	; 0x10
}
    1502:	62 96       	adiw	r28, 0x12	; 18
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <password_not_identical>:

void password_not_identical(void)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	2e 97       	sbiw	r28, 0x0e	; 14
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1528:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_clearScreen>
	LCD_displayString("inputs are not identical");
    152c:	80 e9       	ldi	r24, 0x90	; 144
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_displayString>
	LCD_moveCursor(1,0);
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_moveCursor>
	LCD_displayString("Please Enter same inputs twice.");
    153c:	89 ea       	ldi	r24, 0xA9	; 169
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_displayString>
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e8       	ldi	r25, 0x80	; 128
    1548:	ab e3       	ldi	r26, 0x3B	; 59
    154a:	b5 e4       	ldi	r27, 0x45	; 69
    154c:	8b 87       	std	Y+11, r24	; 0x0b
    154e:	9c 87       	std	Y+12, r25	; 0x0c
    1550:	ad 87       	std	Y+13, r26	; 0x0d
    1552:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1554:	6b 85       	ldd	r22, Y+11	; 0x0b
    1556:	7c 85       	ldd	r23, Y+12	; 0x0c
    1558:	8d 85       	ldd	r24, Y+13	; 0x0d
    155a:	9e 85       	ldd	r25, Y+14	; 0x0e
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	4a ef       	ldi	r20, 0xFA	; 250
    1562:	54 e4       	ldi	r21, 0x44	; 68
    1564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	8f 83       	std	Y+7, r24	; 0x07
    156e:	98 87       	std	Y+8, r25	; 0x08
    1570:	a9 87       	std	Y+9, r26	; 0x09
    1572:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1574:	6f 81       	ldd	r22, Y+7	; 0x07
    1576:	78 85       	ldd	r23, Y+8	; 0x08
    1578:	89 85       	ldd	r24, Y+9	; 0x09
    157a:	9a 85       	ldd	r25, Y+10	; 0x0a
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e8       	ldi	r20, 0x80	; 128
    1582:	5f e3       	ldi	r21, 0x3F	; 63
    1584:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1588:	88 23       	and	r24, r24
    158a:	2c f4       	brge	.+10     	; 0x1596 <password_not_identical+0x82>
		__ticks = 1;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	9e 83       	std	Y+6, r25	; 0x06
    1592:	8d 83       	std	Y+5, r24	; 0x05
    1594:	3f c0       	rjmp	.+126    	; 0x1614 <password_not_identical+0x100>
	else if (__tmp > 65535)
    1596:	6f 81       	ldd	r22, Y+7	; 0x07
    1598:	78 85       	ldd	r23, Y+8	; 0x08
    159a:	89 85       	ldd	r24, Y+9	; 0x09
    159c:	9a 85       	ldd	r25, Y+10	; 0x0a
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	3f ef       	ldi	r19, 0xFF	; 255
    15a2:	4f e7       	ldi	r20, 0x7F	; 127
    15a4:	57 e4       	ldi	r21, 0x47	; 71
    15a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15aa:	18 16       	cp	r1, r24
    15ac:	4c f5       	brge	.+82     	; 0x1600 <password_not_identical+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e2       	ldi	r20, 0x20	; 32
    15bc:	51 e4       	ldi	r21, 0x41	; 65
    15be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	bc 01       	movw	r22, r24
    15c8:	cd 01       	movw	r24, r26
    15ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	9e 83       	std	Y+6, r25	; 0x06
    15d4:	8d 83       	std	Y+5, r24	; 0x05
    15d6:	0f c0       	rjmp	.+30     	; 0x15f6 <password_not_identical+0xe2>
    15d8:	88 ec       	ldi	r24, 0xC8	; 200
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	9c 83       	std	Y+4, r25	; 0x04
    15de:	8b 83       	std	Y+3, r24	; 0x03
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <password_not_identical+0xd0>
    15e8:	9c 83       	std	Y+4, r25	; 0x04
    15ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ec:	8d 81       	ldd	r24, Y+5	; 0x05
    15ee:	9e 81       	ldd	r25, Y+6	; 0x06
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	9e 83       	std	Y+6, r25	; 0x06
    15f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f6:	8d 81       	ldd	r24, Y+5	; 0x05
    15f8:	9e 81       	ldd	r25, Y+6	; 0x06
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	69 f7       	brne	.-38     	; 0x15d8 <password_not_identical+0xc4>
    15fe:	14 c0       	rjmp	.+40     	; 0x1628 <password_not_identical+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1600:	6f 81       	ldd	r22, Y+7	; 0x07
    1602:	78 85       	ldd	r23, Y+8	; 0x08
    1604:	89 85       	ldd	r24, Y+9	; 0x09
    1606:	9a 85       	ldd	r25, Y+10	; 0x0a
    1608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	9e 83       	std	Y+6, r25	; 0x06
    1612:	8d 83       	std	Y+5, r24	; 0x05
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	9e 81       	ldd	r25, Y+6	; 0x06
    1618:	9a 83       	std	Y+2, r25	; 0x02
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <password_not_identical+0x10c>
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);

}
    1628:	2e 96       	adiw	r28, 0x0e	; 14
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <main_options>:

Option main_options(void)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	6e 97       	sbiw	r28, 0x1e	; 30
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    164e:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    1652:	89 ec       	ldi	r24, 0xC9	; 201
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_displayString>
	LCD_moveCursor(1,0);
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_moveCursor>
	LCD_displayString("- : Change Password");
    1662:	87 ed       	ldi	r24, 0xD7	; 215
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_displayString>

	uint8 key = 0;
    166a:	1d 8e       	std	Y+29, r1	; 0x1d
	while(1)
	{
		key = KEYPAD_getPressedKey();
    166c:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <KEYPAD_getPressedKey>
    1670:	8d 8f       	std	Y+29, r24	; 0x1d

		if( key == '+' )
    1672:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1674:	8b 32       	cpi	r24, 0x2B	; 43
    1676:	09 f0       	breq	.+2      	; 0x167a <main_options+0x40>
    1678:	74 c0       	rjmp	.+232    	; 0x1762 <main_options+0x128>
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	aa ef       	ldi	r26, 0xFA	; 250
    1680:	b3 e4       	ldi	r27, 0x43	; 67
    1682:	89 8f       	std	Y+25, r24	; 0x19
    1684:	9a 8f       	std	Y+26, r25	; 0x1a
    1686:	ab 8f       	std	Y+27, r26	; 0x1b
    1688:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168a:	69 8d       	ldd	r22, Y+25	; 0x19
    168c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    168e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1690:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	4a ef       	ldi	r20, 0xFA	; 250
    1698:	54 e4       	ldi	r21, 0x44	; 68
    169a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	8d 8b       	std	Y+21, r24	; 0x15
    16a4:	9e 8b       	std	Y+22, r25	; 0x16
    16a6:	af 8b       	std	Y+23, r26	; 0x17
    16a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16aa:	6d 89       	ldd	r22, Y+21	; 0x15
    16ac:	7e 89       	ldd	r23, Y+22	; 0x16
    16ae:	8f 89       	ldd	r24, Y+23	; 0x17
    16b0:	98 8d       	ldd	r25, Y+24	; 0x18
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e8       	ldi	r20, 0x80	; 128
    16b8:	5f e3       	ldi	r21, 0x3F	; 63
    16ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16be:	88 23       	and	r24, r24
    16c0:	2c f4       	brge	.+10     	; 0x16cc <main_options+0x92>
		__ticks = 1;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	9c 8b       	std	Y+20, r25	; 0x14
    16c8:	8b 8b       	std	Y+19, r24	; 0x13
    16ca:	3f c0       	rjmp	.+126    	; 0x174a <main_options+0x110>
	else if (__tmp > 65535)
    16cc:	6d 89       	ldd	r22, Y+21	; 0x15
    16ce:	7e 89       	ldd	r23, Y+22	; 0x16
    16d0:	8f 89       	ldd	r24, Y+23	; 0x17
    16d2:	98 8d       	ldd	r25, Y+24	; 0x18
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	3f ef       	ldi	r19, 0xFF	; 255
    16d8:	4f e7       	ldi	r20, 0x7F	; 127
    16da:	57 e4       	ldi	r21, 0x47	; 71
    16dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e0:	18 16       	cp	r1, r24
    16e2:	4c f5       	brge	.+82     	; 0x1736 <main_options+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e4:	69 8d       	ldd	r22, Y+25	; 0x19
    16e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e2       	ldi	r20, 0x20	; 32
    16f2:	51 e4       	ldi	r21, 0x41	; 65
    16f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	bc 01       	movw	r22, r24
    16fe:	cd 01       	movw	r24, r26
    1700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	9c 8b       	std	Y+20, r25	; 0x14
    170a:	8b 8b       	std	Y+19, r24	; 0x13
    170c:	0f c0       	rjmp	.+30     	; 0x172c <main_options+0xf2>
    170e:	88 ec       	ldi	r24, 0xC8	; 200
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	9a 8b       	std	Y+18, r25	; 0x12
    1714:	89 8b       	std	Y+17, r24	; 0x11
    1716:	89 89       	ldd	r24, Y+17	; 0x11
    1718:	9a 89       	ldd	r25, Y+18	; 0x12
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <main_options+0xe0>
    171e:	9a 8b       	std	Y+18, r25	; 0x12
    1720:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1722:	8b 89       	ldd	r24, Y+19	; 0x13
    1724:	9c 89       	ldd	r25, Y+20	; 0x14
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	9c 8b       	std	Y+20, r25	; 0x14
    172a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172c:	8b 89       	ldd	r24, Y+19	; 0x13
    172e:	9c 89       	ldd	r25, Y+20	; 0x14
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	69 f7       	brne	.-38     	; 0x170e <main_options+0xd4>
    1734:	14 c0       	rjmp	.+40     	; 0x175e <main_options+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1736:	6d 89       	ldd	r22, Y+21	; 0x15
    1738:	7e 89       	ldd	r23, Y+22	; 0x16
    173a:	8f 89       	ldd	r24, Y+23	; 0x17
    173c:	98 8d       	ldd	r25, Y+24	; 0x18
    173e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	9c 8b       	std	Y+20, r25	; 0x14
    1748:	8b 8b       	std	Y+19, r24	; 0x13
    174a:	8b 89       	ldd	r24, Y+19	; 0x13
    174c:	9c 89       	ldd	r25, Y+20	; 0x14
    174e:	98 8b       	std	Y+16, r25	; 0x10
    1750:	8f 87       	std	Y+15, r24	; 0x0f
    1752:	8f 85       	ldd	r24, Y+15	; 0x0f
    1754:	98 89       	ldd	r25, Y+16	; 0x10
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <main_options+0x11c>
    175a:	98 8b       	std	Y+16, r25	; 0x10
    175c:	8f 87       	std	Y+15, r24	; 0x0f
		{
			 _delay_ms(500); /* Press time */
			return OPENDOOR;
    175e:	1e 8e       	std	Y+30, r1	; 0x1e
    1760:	78 c0       	rjmp	.+240    	; 0x1852 <main_options+0x218>
			break;
		}
		if( key == '-' )
    1762:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1764:	8d 32       	cpi	r24, 0x2D	; 45
    1766:	09 f0       	breq	.+2      	; 0x176a <main_options+0x130>
    1768:	81 cf       	rjmp	.-254    	; 0x166c <main_options+0x32>
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	aa ef       	ldi	r26, 0xFA	; 250
    1770:	b3 e4       	ldi	r27, 0x43	; 67
    1772:	8b 87       	std	Y+11, r24	; 0x0b
    1774:	9c 87       	std	Y+12, r25	; 0x0c
    1776:	ad 87       	std	Y+13, r26	; 0x0d
    1778:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177a:	6b 85       	ldd	r22, Y+11	; 0x0b
    177c:	7c 85       	ldd	r23, Y+12	; 0x0c
    177e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1780:	9e 85       	ldd	r25, Y+14	; 0x0e
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	4a ef       	ldi	r20, 0xFA	; 250
    1788:	54 e4       	ldi	r21, 0x44	; 68
    178a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	8f 83       	std	Y+7, r24	; 0x07
    1794:	98 87       	std	Y+8, r25	; 0x08
    1796:	a9 87       	std	Y+9, r26	; 0x09
    1798:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    179a:	6f 81       	ldd	r22, Y+7	; 0x07
    179c:	78 85       	ldd	r23, Y+8	; 0x08
    179e:	89 85       	ldd	r24, Y+9	; 0x09
    17a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e8       	ldi	r20, 0x80	; 128
    17a8:	5f e3       	ldi	r21, 0x3F	; 63
    17aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ae:	88 23       	and	r24, r24
    17b0:	2c f4       	brge	.+10     	; 0x17bc <main_options+0x182>
		__ticks = 1;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	9e 83       	std	Y+6, r25	; 0x06
    17b8:	8d 83       	std	Y+5, r24	; 0x05
    17ba:	3f c0       	rjmp	.+126    	; 0x183a <main_options+0x200>
	else if (__tmp > 65535)
    17bc:	6f 81       	ldd	r22, Y+7	; 0x07
    17be:	78 85       	ldd	r23, Y+8	; 0x08
    17c0:	89 85       	ldd	r24, Y+9	; 0x09
    17c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	3f ef       	ldi	r19, 0xFF	; 255
    17c8:	4f e7       	ldi	r20, 0x7F	; 127
    17ca:	57 e4       	ldi	r21, 0x47	; 71
    17cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d0:	18 16       	cp	r1, r24
    17d2:	4c f5       	brge	.+82     	; 0x1826 <main_options+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17da:	9e 85       	ldd	r25, Y+14	; 0x0e
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e2       	ldi	r20, 0x20	; 32
    17e2:	51 e4       	ldi	r21, 0x41	; 65
    17e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	bc 01       	movw	r22, r24
    17ee:	cd 01       	movw	r24, r26
    17f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	9e 83       	std	Y+6, r25	; 0x06
    17fa:	8d 83       	std	Y+5, r24	; 0x05
    17fc:	0f c0       	rjmp	.+30     	; 0x181c <main_options+0x1e2>
    17fe:	88 ec       	ldi	r24, 0xC8	; 200
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	9c 83       	std	Y+4, r25	; 0x04
    1804:	8b 83       	std	Y+3, r24	; 0x03
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	9c 81       	ldd	r25, Y+4	; 0x04
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <main_options+0x1d0>
    180e:	9c 83       	std	Y+4, r25	; 0x04
    1810:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	9e 83       	std	Y+6, r25	; 0x06
    181a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181c:	8d 81       	ldd	r24, Y+5	; 0x05
    181e:	9e 81       	ldd	r25, Y+6	; 0x06
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	69 f7       	brne	.-38     	; 0x17fe <main_options+0x1c4>
    1824:	14 c0       	rjmp	.+40     	; 0x184e <main_options+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1826:	6f 81       	ldd	r22, Y+7	; 0x07
    1828:	78 85       	ldd	r23, Y+8	; 0x08
    182a:	89 85       	ldd	r24, Y+9	; 0x09
    182c:	9a 85       	ldd	r25, Y+10	; 0x0a
    182e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	9e 83       	std	Y+6, r25	; 0x06
    1838:	8d 83       	std	Y+5, r24	; 0x05
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	9e 81       	ldd	r25, Y+6	; 0x06
    183e:	9a 83       	std	Y+2, r25	; 0x02
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <main_options+0x20c>
    184a:	9a 83       	std	Y+2, r25	; 0x02
    184c:	89 83       	std	Y+1, r24	; 0x01
		{
			 _delay_ms(500); /* Press time */
			return CHANGEPW;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	8e 8f       	std	Y+30, r24	; 0x1e
			break;
		}
	}
    1852:	8e 8d       	ldd	r24, Y+30	; 0x1e

}
    1854:	6e 96       	adiw	r28, 0x1e	; 30
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <enter_saved_password>:

uint8 enter_saved_password(void)
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	61 97       	sbiw	r28, 0x11	; 17
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    187a:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_clearScreen>
	LCD_displayString("Please Enter Password:");
    187e:	80 e6       	ldi	r24, 0x60	; 96
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_displayString>
	LCD_moveCursor(1,5);
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	65 e0       	ldi	r22, 0x05	; 5
    188a:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_moveCursor>
	uint8 key = 0;
    188e:	18 8a       	std	Y+16, r1	; 0x10
	uint8 password_index = 0;
    1890:	1f 86       	std	Y+15, r1	; 0x0f
    1892:	83 c0       	rjmp	.+262    	; 0x199a <enter_saved_password+0x134>
	while(password_index != PASS_SIZE)
	{
		key = KEYPAD_getPressedKey();
    1894:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <KEYPAD_getPressedKey>
    1898:	88 8b       	std	Y+16, r24	; 0x10
		LCD_displayCharacter('*');
    189a:	8a e2       	ldi	r24, 0x2A	; 42
    189c:	0e 94 aa 11 	call	0x2354	; 0x2354 <LCD_displayCharacter>
		passwordCheck[password_index] = key;
    18a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a2:	88 2f       	mov	r24, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	fc 01       	movw	r30, r24
    18a8:	e2 5d       	subi	r30, 0xD2	; 210
    18aa:	fe 4f       	sbci	r31, 0xFE	; 254
    18ac:	88 89       	ldd	r24, Y+16	; 0x10
    18ae:	80 83       	st	Z, r24
		password_index++;
    18b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b2:	8f 5f       	subi	r24, 0xFF	; 255
    18b4:	8f 87       	std	Y+15, r24	; 0x0f
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	aa ef       	ldi	r26, 0xFA	; 250
    18bc:	b3 e4       	ldi	r27, 0x43	; 67
    18be:	8b 87       	std	Y+11, r24	; 0x0b
    18c0:	9c 87       	std	Y+12, r25	; 0x0c
    18c2:	ad 87       	std	Y+13, r26	; 0x0d
    18c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    18cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	4a ef       	ldi	r20, 0xFA	; 250
    18d4:	54 e4       	ldi	r21, 0x44	; 68
    18d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	8f 83       	std	Y+7, r24	; 0x07
    18e0:	98 87       	std	Y+8, r25	; 0x08
    18e2:	a9 87       	std	Y+9, r26	; 0x09
    18e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18e6:	6f 81       	ldd	r22, Y+7	; 0x07
    18e8:	78 85       	ldd	r23, Y+8	; 0x08
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e8       	ldi	r20, 0x80	; 128
    18f4:	5f e3       	ldi	r21, 0x3F	; 63
    18f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18fa:	88 23       	and	r24, r24
    18fc:	2c f4       	brge	.+10     	; 0x1908 <enter_saved_password+0xa2>
		__ticks = 1;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	9e 83       	std	Y+6, r25	; 0x06
    1904:	8d 83       	std	Y+5, r24	; 0x05
    1906:	3f c0       	rjmp	.+126    	; 0x1986 <enter_saved_password+0x120>
	else if (__tmp > 65535)
    1908:	6f 81       	ldd	r22, Y+7	; 0x07
    190a:	78 85       	ldd	r23, Y+8	; 0x08
    190c:	89 85       	ldd	r24, Y+9	; 0x09
    190e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	3f ef       	ldi	r19, 0xFF	; 255
    1914:	4f e7       	ldi	r20, 0x7F	; 127
    1916:	57 e4       	ldi	r21, 0x47	; 71
    1918:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    191c:	18 16       	cp	r1, r24
    191e:	4c f5       	brge	.+82     	; 0x1972 <enter_saved_password+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1920:	6b 85       	ldd	r22, Y+11	; 0x0b
    1922:	7c 85       	ldd	r23, Y+12	; 0x0c
    1924:	8d 85       	ldd	r24, Y+13	; 0x0d
    1926:	9e 85       	ldd	r25, Y+14	; 0x0e
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e2       	ldi	r20, 0x20	; 32
    192e:	51 e4       	ldi	r21, 0x41	; 65
    1930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	bc 01       	movw	r22, r24
    193a:	cd 01       	movw	r24, r26
    193c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	9e 83       	std	Y+6, r25	; 0x06
    1946:	8d 83       	std	Y+5, r24	; 0x05
    1948:	0f c0       	rjmp	.+30     	; 0x1968 <enter_saved_password+0x102>
    194a:	88 ec       	ldi	r24, 0xC8	; 200
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	9c 83       	std	Y+4, r25	; 0x04
    1950:	8b 83       	std	Y+3, r24	; 0x03
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <enter_saved_password+0xf0>
    195a:	9c 83       	std	Y+4, r25	; 0x04
    195c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	9e 81       	ldd	r25, Y+6	; 0x06
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	9e 83       	std	Y+6, r25	; 0x06
    1966:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1968:	8d 81       	ldd	r24, Y+5	; 0x05
    196a:	9e 81       	ldd	r25, Y+6	; 0x06
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	69 f7       	brne	.-38     	; 0x194a <enter_saved_password+0xe4>
    1970:	14 c0       	rjmp	.+40     	; 0x199a <enter_saved_password+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1972:	6f 81       	ldd	r22, Y+7	; 0x07
    1974:	78 85       	ldd	r23, Y+8	; 0x08
    1976:	89 85       	ldd	r24, Y+9	; 0x09
    1978:	9a 85       	ldd	r25, Y+10	; 0x0a
    197a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	9e 83       	std	Y+6, r25	; 0x06
    1984:	8d 83       	std	Y+5, r24	; 0x05
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	9e 81       	ldd	r25, Y+6	; 0x06
    198a:	9a 83       	std	Y+2, r25	; 0x02
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	9a 81       	ldd	r25, Y+2	; 0x02
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <enter_saved_password+0x12c>
    1996:	9a 83       	std	Y+2, r25	; 0x02
    1998:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_displayString("Please Enter Password:");
	LCD_moveCursor(1,5);
	uint8 key = 0;
	uint8 password_index = 0;
	while(password_index != PASS_SIZE)
    199a:	8f 85       	ldd	r24, Y+15	; 0x0f
    199c:	85 30       	cpi	r24, 0x05	; 5
    199e:	09 f0       	breq	.+2      	; 0x19a2 <enter_saved_password+0x13c>
    19a0:	79 cf       	rjmp	.-270    	; 0x1894 <enter_saved_password+0x2e>
		passwordCheck[password_index] = key;
		password_index++;
		_delay_ms(500); /* Press time */
	}

	UART_sendByte('+');
    19a2:	8b e2       	ldi	r24, 0x2B	; 43
    19a4:	0e 94 2f 1c 	call	0x385e	; 0x385e <UART_sendByte>
	key = UART_recieveByte();
    19a8:	0e 94 46 1c 	call	0x388c	; 0x388c <UART_recieveByte>
    19ac:	88 8b       	std	Y+16, r24	; 0x10
	if(key == '!')
    19ae:	88 89       	ldd	r24, Y+16	; 0x10
    19b0:	81 32       	cpi	r24, 0x21	; 33
    19b2:	21 f4       	brne	.+8      	; 0x19bc <enter_saved_password+0x156>
	UART_sendString(passwordCheck);
    19b4:	8e e2       	ldi	r24, 0x2E	; 46
    19b6:	91 e0       	ldi	r25, 0x01	; 1
    19b8:	0e 94 55 1c 	call	0x38aa	; 0x38aa <UART_sendString>


	UART_sendByte('+');
    19bc:	8b e2       	ldi	r24, 0x2B	; 43
    19be:	0e 94 2f 1c 	call	0x385e	; 0x385e <UART_sendByte>

	key = UART_recieveByte();
    19c2:	0e 94 46 1c 	call	0x388c	; 0x388c <UART_recieveByte>
    19c6:	88 8b       	std	Y+16, r24	; 0x10

	if(key == '+')
    19c8:	88 89       	ldd	r24, Y+16	; 0x10
    19ca:	8b 32       	cpi	r24, 0x2B	; 43
    19cc:	31 f4       	brne	.+12     	; 0x19da <enter_saved_password+0x174>
	{
		LCD_displayCharacter('V');
    19ce:	86 e5       	ldi	r24, 0x56	; 86
    19d0:	0e 94 aa 11 	call	0x2354	; 0x2354 <LCD_displayCharacter>
		return 1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	89 8b       	std	Y+17, r24	; 0x11
    19d8:	01 c0       	rjmp	.+2      	; 0x19dc <enter_saved_password+0x176>
	}

	return 0;
    19da:	19 8a       	std	Y+17, r1	; 0x11
    19dc:	89 89       	ldd	r24, Y+17	; 0x11
}
    19de:	61 96       	adiw	r28, 0x11	; 17
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <open_door>:


void open_door(void)
{
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	2e 97       	sbiw	r28, 0x0e	; 14
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1a04:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_clearScreen>
	LCD_displayString("Opening Door");
    1a08:	8b ee       	ldi	r24, 0xEB	; 235
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_displayString>
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	aa ef       	ldi	r26, 0xFA	; 250
    1a16:	b4 e4       	ldi	r27, 0x44	; 68
    1a18:	8b 87       	std	Y+11, r24	; 0x0b
    1a1a:	9c 87       	std	Y+12, r25	; 0x0c
    1a1c:	ad 87       	std	Y+13, r26	; 0x0d
    1a1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	4a ef       	ldi	r20, 0xFA	; 250
    1a2e:	54 e4       	ldi	r21, 0x44	; 68
    1a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	8f 83       	std	Y+7, r24	; 0x07
    1a3a:	98 87       	std	Y+8, r25	; 0x08
    1a3c:	a9 87       	std	Y+9, r26	; 0x09
    1a3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a40:	6f 81       	ldd	r22, Y+7	; 0x07
    1a42:	78 85       	ldd	r23, Y+8	; 0x08
    1a44:	89 85       	ldd	r24, Y+9	; 0x09
    1a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e8       	ldi	r20, 0x80	; 128
    1a4e:	5f e3       	ldi	r21, 0x3F	; 63
    1a50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a54:	88 23       	and	r24, r24
    1a56:	2c f4       	brge	.+10     	; 0x1a62 <open_door+0x72>
		__ticks = 1;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	9e 83       	std	Y+6, r25	; 0x06
    1a5e:	8d 83       	std	Y+5, r24	; 0x05
    1a60:	3f c0       	rjmp	.+126    	; 0x1ae0 <open_door+0xf0>
	else if (__tmp > 65535)
    1a62:	6f 81       	ldd	r22, Y+7	; 0x07
    1a64:	78 85       	ldd	r23, Y+8	; 0x08
    1a66:	89 85       	ldd	r24, Y+9	; 0x09
    1a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	4f e7       	ldi	r20, 0x7F	; 127
    1a70:	57 e4       	ldi	r21, 0x47	; 71
    1a72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a76:	18 16       	cp	r1, r24
    1a78:	4c f5       	brge	.+82     	; 0x1acc <open_door+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e2       	ldi	r20, 0x20	; 32
    1a88:	51 e4       	ldi	r21, 0x41	; 65
    1a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
    1aa2:	0f c0       	rjmp	.+30     	; 0x1ac2 <open_door+0xd2>
    1aa4:	88 ec       	ldi	r24, 0xC8	; 200
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	9c 83       	std	Y+4, r25	; 0x04
    1aaa:	8b 83       	std	Y+3, r24	; 0x03
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <open_door+0xc0>
    1ab4:	9c 83       	std	Y+4, r25	; 0x04
    1ab6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aba:	9e 81       	ldd	r25, Y+6	; 0x06
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	9e 83       	std	Y+6, r25	; 0x06
    1ac0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	69 f7       	brne	.-38     	; 0x1aa4 <open_door+0xb4>
    1aca:	14 c0       	rjmp	.+40     	; 0x1af4 <open_door+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1acc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ace:	78 85       	ldd	r23, Y+8	; 0x08
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	8d 83       	std	Y+5, r24	; 0x05
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae4:	9a 83       	std	Y+2, r25	; 0x02
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	9a 81       	ldd	r25, Y+2	; 0x02
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <open_door+0xfc>
    1af0:	9a 83       	std	Y+2, r25	; 0x02
    1af2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000); /* Press time */

}
    1af4:	2e 96       	adiw	r28, 0x0e	; 14
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <ask_to_close>:
uint8 ask_to_close(void)
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	2e 97       	sbiw	r28, 0x0e	; 14
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1b1a:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_clearScreen>
	LCD_displayString("ASK Door");
    1b1e:	88 ef       	ldi	r24, 0xF8	; 248
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_displayString>
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	aa ef       	ldi	r26, 0xFA	; 250
    1b2c:	b4 e4       	ldi	r27, 0x44	; 68
    1b2e:	8b 87       	std	Y+11, r24	; 0x0b
    1b30:	9c 87       	std	Y+12, r25	; 0x0c
    1b32:	ad 87       	std	Y+13, r26	; 0x0d
    1b34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	4a ef       	ldi	r20, 0xFA	; 250
    1b44:	54 e4       	ldi	r21, 0x44	; 68
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	8f 83       	std	Y+7, r24	; 0x07
    1b50:	98 87       	std	Y+8, r25	; 0x08
    1b52:	a9 87       	std	Y+9, r26	; 0x09
    1b54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b56:	6f 81       	ldd	r22, Y+7	; 0x07
    1b58:	78 85       	ldd	r23, Y+8	; 0x08
    1b5a:	89 85       	ldd	r24, Y+9	; 0x09
    1b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e8       	ldi	r20, 0x80	; 128
    1b64:	5f e3       	ldi	r21, 0x3F	; 63
    1b66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b6a:	88 23       	and	r24, r24
    1b6c:	2c f4       	brge	.+10     	; 0x1b78 <ask_to_close+0x72>
		__ticks = 1;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	3f c0       	rjmp	.+126    	; 0x1bf6 <ask_to_close+0xf0>
	else if (__tmp > 65535)
    1b78:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7a:	78 85       	ldd	r23, Y+8	; 0x08
    1b7c:	89 85       	ldd	r24, Y+9	; 0x09
    1b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	3f ef       	ldi	r19, 0xFF	; 255
    1b84:	4f e7       	ldi	r20, 0x7F	; 127
    1b86:	57 e4       	ldi	r21, 0x47	; 71
    1b88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b8c:	18 16       	cp	r1, r24
    1b8e:	4c f5       	brge	.+82     	; 0x1be2 <ask_to_close+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e2       	ldi	r20, 0x20	; 32
    1b9e:	51 e4       	ldi	r21, 0x41	; 65
    1ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	bc 01       	movw	r22, r24
    1baa:	cd 01       	movw	r24, r26
    1bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9e 83       	std	Y+6, r25	; 0x06
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
    1bb8:	0f c0       	rjmp	.+30     	; 0x1bd8 <ask_to_close+0xd2>
    1bba:	88 ec       	ldi	r24, 0xC8	; 200
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	9c 83       	std	Y+4, r25	; 0x04
    1bc0:	8b 83       	std	Y+3, r24	; 0x03
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <ask_to_close+0xc0>
    1bca:	9c 83       	std	Y+4, r25	; 0x04
    1bcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	9e 83       	std	Y+6, r25	; 0x06
    1bd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bda:	9e 81       	ldd	r25, Y+6	; 0x06
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	69 f7       	brne	.-38     	; 0x1bba <ask_to_close+0xb4>
    1be0:	14 c0       	rjmp	.+40     	; 0x1c0a <ask_to_close+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be2:	6f 81       	ldd	r22, Y+7	; 0x07
    1be4:	78 85       	ldd	r23, Y+8	; 0x08
    1be6:	89 85       	ldd	r24, Y+9	; 0x09
    1be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9e 83       	std	Y+6, r25	; 0x06
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	9a 81       	ldd	r25, Y+2	; 0x02
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <ask_to_close+0xfc>
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000); /* Press time */


	return 1;
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
}
    1c0c:	2e 96       	adiw	r28, 0x0e	; 14
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <close_door>:
void close_door(void)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	2e 97       	sbiw	r28, 0x0e	; 14
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1c32:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_clearScreen>
	LCD_displayString("Closing Door");
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	91 e0       	ldi	r25, 0x01	; 1
    1c3a:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_displayString>
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	aa ef       	ldi	r26, 0xFA	; 250
    1c44:	b4 e4       	ldi	r27, 0x44	; 68
    1c46:	8b 87       	std	Y+11, r24	; 0x0b
    1c48:	9c 87       	std	Y+12, r25	; 0x0c
    1c4a:	ad 87       	std	Y+13, r26	; 0x0d
    1c4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	4a ef       	ldi	r20, 0xFA	; 250
    1c5c:	54 e4       	ldi	r21, 0x44	; 68
    1c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	8f 83       	std	Y+7, r24	; 0x07
    1c68:	98 87       	std	Y+8, r25	; 0x08
    1c6a:	a9 87       	std	Y+9, r26	; 0x09
    1c6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c70:	78 85       	ldd	r23, Y+8	; 0x08
    1c72:	89 85       	ldd	r24, Y+9	; 0x09
    1c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e8       	ldi	r20, 0x80	; 128
    1c7c:	5f e3       	ldi	r21, 0x3F	; 63
    1c7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c82:	88 23       	and	r24, r24
    1c84:	2c f4       	brge	.+10     	; 0x1c90 <close_door+0x72>
		__ticks = 1;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	9e 83       	std	Y+6, r25	; 0x06
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
    1c8e:	3f c0       	rjmp	.+126    	; 0x1d0e <close_door+0xf0>
	else if (__tmp > 65535)
    1c90:	6f 81       	ldd	r22, Y+7	; 0x07
    1c92:	78 85       	ldd	r23, Y+8	; 0x08
    1c94:	89 85       	ldd	r24, Y+9	; 0x09
    1c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	3f ef       	ldi	r19, 0xFF	; 255
    1c9c:	4f e7       	ldi	r20, 0x7F	; 127
    1c9e:	57 e4       	ldi	r21, 0x47	; 71
    1ca0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca4:	18 16       	cp	r1, r24
    1ca6:	4c f5       	brge	.+82     	; 0x1cfa <close_door+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1caa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e2       	ldi	r20, 0x20	; 32
    1cb6:	51 e4       	ldi	r21, 0x41	; 65
    1cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	9e 83       	std	Y+6, r25	; 0x06
    1cce:	8d 83       	std	Y+5, r24	; 0x05
    1cd0:	0f c0       	rjmp	.+30     	; 0x1cf0 <close_door+0xd2>
    1cd2:	88 ec       	ldi	r24, 0xC8	; 200
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9c 83       	std	Y+4, r25	; 0x04
    1cd8:	8b 83       	std	Y+3, r24	; 0x03
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <close_door+0xc0>
    1ce2:	9c 83       	std	Y+4, r25	; 0x04
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	9e 83       	std	Y+6, r25	; 0x06
    1cee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	69 f7       	brne	.-38     	; 0x1cd2 <close_door+0xb4>
    1cf8:	14 c0       	rjmp	.+40     	; 0x1d22 <close_door+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfc:	78 85       	ldd	r23, Y+8	; 0x08
    1cfe:	89 85       	ldd	r24, Y+9	; 0x09
    1d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
    1d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d10:	9e 81       	ldd	r25, Y+6	; 0x06
    1d12:	9a 83       	std	Y+2, r25	; 0x02
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <close_door+0xfc>
    1d1e:	9a 83       	std	Y+2, r25	; 0x02
    1d20:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000); /* Press time */

}
    1d22:	2e 96       	adiw	r28, 0x0e	; 14
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	de bf       	out	0x3e, r29	; 62
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	cd bf       	out	0x3d, r28	; 61
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <KEYPAD_getPressedKey+0x6>
    1d3a:	0f 92       	push	r0
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1d40:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1d42:	1b 82       	std	Y+3, r1	; 0x03
    1d44:	43 c0       	rjmp	.+134    	; 0x1dcc <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1d46:	82 e0       	ldi	r24, 0x02	; 2
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	98 2f       	mov	r25, r24
    1d52:	9c 5f       	subi	r25, 0xFC	; 252
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	69 2f       	mov	r22, r25
    1d58:	41 e0       	ldi	r20, 0x01	; 1
    1d5a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	9c 01       	movw	r18, r24
    1d66:	2c 5f       	subi	r18, 0xFC	; 252
    1d68:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <KEYPAD_getPressedKey+0x40>
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	2a 95       	dec	r18
    1d76:	e2 f7       	brpl	.-8      	; 0x1d70 <KEYPAD_getPressedKey+0x3c>
    1d78:	80 95       	com	r24
    1d7a:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	69 81       	ldd	r22, Y+1	; 0x01
    1d80:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1d84:	1a 82       	std	Y+2, r1	; 0x02
    1d86:	1c c0       	rjmp	.+56     	; 0x1dc0 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1d88:	82 e0       	ldi	r24, 0x02	; 2
    1d8a:	6a 81       	ldd	r22, Y+2	; 0x02
    1d8c:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1d90:	88 23       	and	r24, r24
    1d92:	99 f4       	brne	.+38     	; 0x1dba <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	88 2f       	mov	r24, r24
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	98 2f       	mov	r25, r24
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	89 0f       	add	r24, r25
    1da8:	8f 5f       	subi	r24, 0xFF	; 255
    1daa:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	8f 5f       	subi	r24, 0xFF	; 255
    1dbe:	8a 83       	std	Y+2, r24	; 0x02
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	84 30       	cpi	r24, 0x04	; 4
    1dc4:	08 f3       	brcs	.-62     	; 0x1d88 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc8:	8f 5f       	subi	r24, 0xFF	; 255
    1dca:	8b 83       	std	Y+3, r24	; 0x03
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	84 30       	cpi	r24, 0x04	; 4
    1dd0:	08 f4       	brcc	.+2      	; 0x1dd4 <KEYPAD_getPressedKey+0xa0>
    1dd2:	b9 cf       	rjmp	.-142    	; 0x1d46 <KEYPAD_getPressedKey+0x12>
    1dd4:	b6 cf       	rjmp	.-148    	; 0x1d42 <KEYPAD_getPressedKey+0xe>

00001dd6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	00 d0       	rcall	.+0      	; 0x1ddc <KEYPAD_4x4_adjustKeyNumber+0x6>
    1ddc:	00 d0       	rcall	.+0      	; 0x1dde <KEYPAD_4x4_adjustKeyNumber+0x8>
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1de4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	3c 83       	std	Y+4, r19	; 0x04
    1dee:	2b 83       	std	Y+3, r18	; 0x03
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	9c 81       	ldd	r25, Y+4	; 0x04
    1df4:	88 30       	cpi	r24, 0x08	; 8
    1df6:	91 05       	cpc	r25, r1
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <KEYPAD_4x4_adjustKeyNumber+0x26>
    1dfa:	70 c0       	rjmp	.+224    	; 0x1edc <KEYPAD_4x4_adjustKeyNumber+0x106>
    1dfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1e00:	29 30       	cpi	r18, 0x09	; 9
    1e02:	31 05       	cpc	r19, r1
    1e04:	5c f5       	brge	.+86     	; 0x1e5c <KEYPAD_4x4_adjustKeyNumber+0x86>
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	84 30       	cpi	r24, 0x04	; 4
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1e10:	59 c0       	rjmp	.+178    	; 0x1ec4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1e12:	2b 81       	ldd	r18, Y+3	; 0x03
    1e14:	3c 81       	ldd	r19, Y+4	; 0x04
    1e16:	25 30       	cpi	r18, 0x05	; 5
    1e18:	31 05       	cpc	r19, r1
    1e1a:	9c f4       	brge	.+38     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	82 30       	cpi	r24, 0x02	; 2
    1e22:	91 05       	cpc	r25, r1
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1e26:	48 c0       	rjmp	.+144    	; 0x1eb8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1e28:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e2c:	23 30       	cpi	r18, 0x03	; 3
    1e2e:	31 05       	cpc	r19, r1
    1e30:	0c f0       	brlt	.+2      	; 0x1e34 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1e32:	45 c0       	rjmp	.+138    	; 0x1ebe <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	81 30       	cpi	r24, 0x01	; 1
    1e3a:	91 05       	cpc	r25, r1
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1e3e:	39 c0       	rjmp	.+114    	; 0x1eb2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1e40:	68 c0       	rjmp	.+208    	; 0x1f12 <KEYPAD_4x4_adjustKeyNumber+0x13c>
    1e42:	2b 81       	ldd	r18, Y+3	; 0x03
    1e44:	3c 81       	ldd	r19, Y+4	; 0x04
    1e46:	26 30       	cpi	r18, 0x06	; 6
    1e48:	31 05       	cpc	r19, r1
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <KEYPAD_4x4_adjustKeyNumber+0x78>
    1e4c:	41 c0       	rjmp	.+130    	; 0x1ed0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	9c 81       	ldd	r25, Y+4	; 0x04
    1e52:	87 30       	cpi	r24, 0x07	; 7
    1e54:	91 05       	cpc	r25, r1
    1e56:	0c f0       	brlt	.+2      	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1e58:	3e c0       	rjmp	.+124    	; 0x1ed6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1e5a:	37 c0       	rjmp	.+110    	; 0x1eca <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1e5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e60:	2c 30       	cpi	r18, 0x0C	; 12
    1e62:	31 05       	cpc	r19, r1
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1e66:	46 c0       	rjmp	.+140    	; 0x1ef4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	8d 30       	cpi	r24, 0x0D	; 13
    1e6e:	91 05       	cpc	r25, r1
    1e70:	5c f4       	brge	.+22     	; 0x1e88 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1e72:	2b 81       	ldd	r18, Y+3	; 0x03
    1e74:	3c 81       	ldd	r19, Y+4	; 0x04
    1e76:	2a 30       	cpi	r18, 0x0A	; 10
    1e78:	31 05       	cpc	r19, r1
    1e7a:	b1 f1       	breq	.+108    	; 0x1ee8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	8b 30       	cpi	r24, 0x0B	; 11
    1e82:	91 05       	cpc	r25, r1
    1e84:	a4 f5       	brge	.+104    	; 0x1eee <KEYPAD_4x4_adjustKeyNumber+0x118>
    1e86:	2d c0       	rjmp	.+90     	; 0x1ee2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1e88:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8c:	2e 30       	cpi	r18, 0x0E	; 14
    1e8e:	31 05       	cpc	r19, r1
    1e90:	b9 f1       	breq	.+110    	; 0x1f00 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	9c 81       	ldd	r25, Y+4	; 0x04
    1e96:	8e 30       	cpi	r24, 0x0E	; 14
    1e98:	91 05       	cpc	r25, r1
    1e9a:	7c f1       	brlt	.+94     	; 0x1efa <KEYPAD_4x4_adjustKeyNumber+0x124>
    1e9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea0:	2f 30       	cpi	r18, 0x0F	; 15
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	81 f1       	breq	.+96     	; 0x1f06 <KEYPAD_4x4_adjustKeyNumber+0x130>
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	80 31       	cpi	r24, 0x10	; 16
    1eac:	91 05       	cpc	r25, r1
    1eae:	71 f1       	breq	.+92     	; 0x1f0c <KEYPAD_4x4_adjustKeyNumber+0x136>
    1eb0:	30 c0       	rjmp	.+96     	; 0x1f12 <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    1eb2:	87 e3       	ldi	r24, 0x37	; 55
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	2f c0       	rjmp	.+94     	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    1eb8:	88 e3       	ldi	r24, 0x38	; 56
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	2c c0       	rjmp	.+88     	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    1ebe:	89 e3       	ldi	r24, 0x39	; 57
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	29 c0       	rjmp	.+82     	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1ec4:	85 e2       	ldi	r24, 0x25	; 37
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	26 c0       	rjmp	.+76     	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    1eca:	84 e3       	ldi	r24, 0x34	; 52
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	23 c0       	rjmp	.+70     	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    1ed0:	85 e3       	ldi	r24, 0x35	; 53
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	20 c0       	rjmp	.+64     	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    1ed6:	86 e3       	ldi	r24, 0x36	; 54
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	1d c0       	rjmp	.+58     	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1edc:	8a e2       	ldi	r24, 0x2A	; 42
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	1a c0       	rjmp	.+52     	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;		
		case 9: keypad_button = '1';
    1ee2:	81 e3       	ldi	r24, 0x31	; 49
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	17 c0       	rjmp	.+46     	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    1ee8:	82 e3       	ldi	r24, 0x32	; 50
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	14 c0       	rjmp	.+40     	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    1eee:	83 e3       	ldi	r24, 0x33	; 51
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	11 c0       	rjmp	.+34     	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1ef4:	8d e2       	ldi	r24, 0x2D	; 45
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	0e c0       	rjmp	.+28     	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1efa:	8d e0       	ldi	r24, 0x0D	; 13
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	0b c0       	rjmp	.+22     	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;			
		case 14: keypad_button = '0';
    1f00:	80 e3       	ldi	r24, 0x30	; 48
    1f02:	89 83       	std	Y+1, r24	; 0x01
    1f04:	08 c0       	rjmp	.+16     	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1f06:	8d e3       	ldi	r24, 0x3D	; 61
    1f08:	89 83       	std	Y+1, r24	; 0x01
    1f0a:	05 c0       	rjmp	.+10     	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1f0c:	8b e2       	ldi	r24, 0x2B	; 43
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	41 e0       	ldi	r20, 0x01	; 1
    1f34:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	61 e0       	ldi	r22, 0x01	; 1
    1f3c:	41 e0       	ldi	r20, 0x01	; 1
    1f3e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	62 e0       	ldi	r22, 0x02	; 2
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	6f ef       	ldi	r22, 0xFF	; 255
    1f50:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1f54:	88 e3       	ldi	r24, 0x38	; 56
    1f56:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f5a:	8c e0       	ldi	r24, 0x0C	; 12
    1f5c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_sendCommand>
}
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	e9 97       	sbiw	r28, 0x39	; 57
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	61 e0       	ldi	r22, 0x01	; 1
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a0 e8       	ldi	r26, 0x80	; 128
    1f9c:	bf e3       	ldi	r27, 0x3F	; 63
    1f9e:	8d ab       	std	Y+53, r24	; 0x35
    1fa0:	9e ab       	std	Y+54, r25	; 0x36
    1fa2:	af ab       	std	Y+55, r26	; 0x37
    1fa4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fa8:	7e a9       	ldd	r23, Y+54	; 0x36
    1faa:	8f a9       	ldd	r24, Y+55	; 0x37
    1fac:	98 ad       	ldd	r25, Y+56	; 0x38
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	4a ef       	ldi	r20, 0xFA	; 250
    1fb4:	54 e4       	ldi	r21, 0x44	; 68
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	89 ab       	std	Y+49, r24	; 0x31
    1fc0:	9a ab       	std	Y+50, r25	; 0x32
    1fc2:	ab ab       	std	Y+51, r26	; 0x33
    1fc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fc6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fca:	8b a9       	ldd	r24, Y+51	; 0x33
    1fcc:	9c a9       	ldd	r25, Y+52	; 0x34
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e8       	ldi	r20, 0x80	; 128
    1fd4:	5f e3       	ldi	r21, 0x3F	; 63
    1fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fda:	88 23       	and	r24, r24
    1fdc:	2c f4       	brge	.+10     	; 0x1fe8 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	98 ab       	std	Y+48, r25	; 0x30
    1fe4:	8f a7       	std	Y+47, r24	; 0x2f
    1fe6:	3f c0       	rjmp	.+126    	; 0x2066 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1fe8:	69 a9       	ldd	r22, Y+49	; 0x31
    1fea:	7a a9       	ldd	r23, Y+50	; 0x32
    1fec:	8b a9       	ldd	r24, Y+51	; 0x33
    1fee:	9c a9       	ldd	r25, Y+52	; 0x34
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	3f ef       	ldi	r19, 0xFF	; 255
    1ff4:	4f e7       	ldi	r20, 0x7F	; 127
    1ff6:	57 e4       	ldi	r21, 0x47	; 71
    1ff8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffc:	18 16       	cp	r1, r24
    1ffe:	4c f5       	brge	.+82     	; 0x2052 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2000:	6d a9       	ldd	r22, Y+53	; 0x35
    2002:	7e a9       	ldd	r23, Y+54	; 0x36
    2004:	8f a9       	ldd	r24, Y+55	; 0x37
    2006:	98 ad       	ldd	r25, Y+56	; 0x38
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e2       	ldi	r20, 0x20	; 32
    200e:	51 e4       	ldi	r21, 0x41	; 65
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	98 ab       	std	Y+48, r25	; 0x30
    2026:	8f a7       	std	Y+47, r24	; 0x2f
    2028:	0f c0       	rjmp	.+30     	; 0x2048 <LCD_sendCommand+0xdc>
    202a:	88 ec       	ldi	r24, 0xC8	; 200
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9e a7       	std	Y+46, r25	; 0x2e
    2030:	8d a7       	std	Y+45, r24	; 0x2d
    2032:	8d a5       	ldd	r24, Y+45	; 0x2d
    2034:	9e a5       	ldd	r25, Y+46	; 0x2e
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <LCD_sendCommand+0xca>
    203a:	9e a7       	std	Y+46, r25	; 0x2e
    203c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2040:	98 a9       	ldd	r25, Y+48	; 0x30
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	98 ab       	std	Y+48, r25	; 0x30
    2046:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2048:	8f a5       	ldd	r24, Y+47	; 0x2f
    204a:	98 a9       	ldd	r25, Y+48	; 0x30
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	69 f7       	brne	.-38     	; 0x202a <LCD_sendCommand+0xbe>
    2050:	14 c0       	rjmp	.+40     	; 0x207a <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2052:	69 a9       	ldd	r22, Y+49	; 0x31
    2054:	7a a9       	ldd	r23, Y+50	; 0x32
    2056:	8b a9       	ldd	r24, Y+51	; 0x33
    2058:	9c a9       	ldd	r25, Y+52	; 0x34
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	98 ab       	std	Y+48, r25	; 0x30
    2064:	8f a7       	std	Y+47, r24	; 0x2f
    2066:	8f a5       	ldd	r24, Y+47	; 0x2f
    2068:	98 a9       	ldd	r25, Y+48	; 0x30
    206a:	9c a7       	std	Y+44, r25	; 0x2c
    206c:	8b a7       	std	Y+43, r24	; 0x2b
    206e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2070:	9c a5       	ldd	r25, Y+44	; 0x2c
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <LCD_sendCommand+0x106>
    2076:	9c a7       	std	Y+44, r25	; 0x2c
    2078:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	62 e0       	ldi	r22, 0x02	; 2
    207e:	41 e0       	ldi	r20, 0x01	; 1
    2080:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	a0 e8       	ldi	r26, 0x80	; 128
    208a:	bf e3       	ldi	r27, 0x3F	; 63
    208c:	8f a3       	std	Y+39, r24	; 0x27
    208e:	98 a7       	std	Y+40, r25	; 0x28
    2090:	a9 a7       	std	Y+41, r26	; 0x29
    2092:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2094:	6f a1       	ldd	r22, Y+39	; 0x27
    2096:	78 a5       	ldd	r23, Y+40	; 0x28
    2098:	89 a5       	ldd	r24, Y+41	; 0x29
    209a:	9a a5       	ldd	r25, Y+42	; 0x2a
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	4a ef       	ldi	r20, 0xFA	; 250
    20a2:	54 e4       	ldi	r21, 0x44	; 68
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	8b a3       	std	Y+35, r24	; 0x23
    20ae:	9c a3       	std	Y+36, r25	; 0x24
    20b0:	ad a3       	std	Y+37, r26	; 0x25
    20b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20b4:	6b a1       	ldd	r22, Y+35	; 0x23
    20b6:	7c a1       	ldd	r23, Y+36	; 0x24
    20b8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ba:	9e a1       	ldd	r25, Y+38	; 0x26
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e8       	ldi	r20, 0x80	; 128
    20c2:	5f e3       	ldi	r21, 0x3F	; 63
    20c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c8:	88 23       	and	r24, r24
    20ca:	2c f4       	brge	.+10     	; 0x20d6 <LCD_sendCommand+0x16a>
		__ticks = 1;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9a a3       	std	Y+34, r25	; 0x22
    20d2:	89 a3       	std	Y+33, r24	; 0x21
    20d4:	3f c0       	rjmp	.+126    	; 0x2154 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    20d6:	6b a1       	ldd	r22, Y+35	; 0x23
    20d8:	7c a1       	ldd	r23, Y+36	; 0x24
    20da:	8d a1       	ldd	r24, Y+37	; 0x25
    20dc:	9e a1       	ldd	r25, Y+38	; 0x26
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	3f ef       	ldi	r19, 0xFF	; 255
    20e2:	4f e7       	ldi	r20, 0x7F	; 127
    20e4:	57 e4       	ldi	r21, 0x47	; 71
    20e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ea:	18 16       	cp	r1, r24
    20ec:	4c f5       	brge	.+82     	; 0x2140 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ee:	6f a1       	ldd	r22, Y+39	; 0x27
    20f0:	78 a5       	ldd	r23, Y+40	; 0x28
    20f2:	89 a5       	ldd	r24, Y+41	; 0x29
    20f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e2       	ldi	r20, 0x20	; 32
    20fc:	51 e4       	ldi	r21, 0x41	; 65
    20fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	bc 01       	movw	r22, r24
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9a a3       	std	Y+34, r25	; 0x22
    2114:	89 a3       	std	Y+33, r24	; 0x21
    2116:	0f c0       	rjmp	.+30     	; 0x2136 <LCD_sendCommand+0x1ca>
    2118:	88 ec       	ldi	r24, 0xC8	; 200
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	98 a3       	std	Y+32, r25	; 0x20
    211e:	8f 8f       	std	Y+31, r24	; 0x1f
    2120:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2122:	98 a1       	ldd	r25, Y+32	; 0x20
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	f1 f7       	brne	.-4      	; 0x2124 <LCD_sendCommand+0x1b8>
    2128:	98 a3       	std	Y+32, r25	; 0x20
    212a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212c:	89 a1       	ldd	r24, Y+33	; 0x21
    212e:	9a a1       	ldd	r25, Y+34	; 0x22
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	9a a3       	std	Y+34, r25	; 0x22
    2134:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2136:	89 a1       	ldd	r24, Y+33	; 0x21
    2138:	9a a1       	ldd	r25, Y+34	; 0x22
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	69 f7       	brne	.-38     	; 0x2118 <LCD_sendCommand+0x1ac>
    213e:	14 c0       	rjmp	.+40     	; 0x2168 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2140:	6b a1       	ldd	r22, Y+35	; 0x23
    2142:	7c a1       	ldd	r23, Y+36	; 0x24
    2144:	8d a1       	ldd	r24, Y+37	; 0x25
    2146:	9e a1       	ldd	r25, Y+38	; 0x26
    2148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	9a a3       	std	Y+34, r25	; 0x22
    2152:	89 a3       	std	Y+33, r24	; 0x21
    2154:	89 a1       	ldd	r24, Y+33	; 0x21
    2156:	9a a1       	ldd	r25, Y+34	; 0x22
    2158:	9e 8f       	std	Y+30, r25	; 0x1e
    215a:	8d 8f       	std	Y+29, r24	; 0x1d
    215c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    215e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <LCD_sendCommand+0x1f4>
    2164:	9e 8f       	std	Y+30, r25	; 0x1e
    2166:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	69 ad       	ldd	r22, Y+57	; 0x39
    216c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	a0 e8       	ldi	r26, 0x80	; 128
    2176:	bf e3       	ldi	r27, 0x3F	; 63
    2178:	89 8f       	std	Y+25, r24	; 0x19
    217a:	9a 8f       	std	Y+26, r25	; 0x1a
    217c:	ab 8f       	std	Y+27, r26	; 0x1b
    217e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2180:	69 8d       	ldd	r22, Y+25	; 0x19
    2182:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2184:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2186:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	4a ef       	ldi	r20, 0xFA	; 250
    218e:	54 e4       	ldi	r21, 0x44	; 68
    2190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	8d 8b       	std	Y+21, r24	; 0x15
    219a:	9e 8b       	std	Y+22, r25	; 0x16
    219c:	af 8b       	std	Y+23, r26	; 0x17
    219e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21a0:	6d 89       	ldd	r22, Y+21	; 0x15
    21a2:	7e 89       	ldd	r23, Y+22	; 0x16
    21a4:	8f 89       	ldd	r24, Y+23	; 0x17
    21a6:	98 8d       	ldd	r25, Y+24	; 0x18
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e8       	ldi	r20, 0x80	; 128
    21ae:	5f e3       	ldi	r21, 0x3F	; 63
    21b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b4:	88 23       	and	r24, r24
    21b6:	2c f4       	brge	.+10     	; 0x21c2 <LCD_sendCommand+0x256>
		__ticks = 1;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9c 8b       	std	Y+20, r25	; 0x14
    21be:	8b 8b       	std	Y+19, r24	; 0x13
    21c0:	3f c0       	rjmp	.+126    	; 0x2240 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    21c2:	6d 89       	ldd	r22, Y+21	; 0x15
    21c4:	7e 89       	ldd	r23, Y+22	; 0x16
    21c6:	8f 89       	ldd	r24, Y+23	; 0x17
    21c8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	3f ef       	ldi	r19, 0xFF	; 255
    21ce:	4f e7       	ldi	r20, 0x7F	; 127
    21d0:	57 e4       	ldi	r21, 0x47	; 71
    21d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d6:	18 16       	cp	r1, r24
    21d8:	4c f5       	brge	.+82     	; 0x222c <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21da:	69 8d       	ldd	r22, Y+25	; 0x19
    21dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e2       	ldi	r20, 0x20	; 32
    21e8:	51 e4       	ldi	r21, 0x41	; 65
    21ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9c 8b       	std	Y+20, r25	; 0x14
    2200:	8b 8b       	std	Y+19, r24	; 0x13
    2202:	0f c0       	rjmp	.+30     	; 0x2222 <LCD_sendCommand+0x2b6>
    2204:	88 ec       	ldi	r24, 0xC8	; 200
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	9a 8b       	std	Y+18, r25	; 0x12
    220a:	89 8b       	std	Y+17, r24	; 0x11
    220c:	89 89       	ldd	r24, Y+17	; 0x11
    220e:	9a 89       	ldd	r25, Y+18	; 0x12
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <LCD_sendCommand+0x2a4>
    2214:	9a 8b       	std	Y+18, r25	; 0x12
    2216:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2218:	8b 89       	ldd	r24, Y+19	; 0x13
    221a:	9c 89       	ldd	r25, Y+20	; 0x14
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	9c 8b       	std	Y+20, r25	; 0x14
    2220:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2222:	8b 89       	ldd	r24, Y+19	; 0x13
    2224:	9c 89       	ldd	r25, Y+20	; 0x14
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	69 f7       	brne	.-38     	; 0x2204 <LCD_sendCommand+0x298>
    222a:	14 c0       	rjmp	.+40     	; 0x2254 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222c:	6d 89       	ldd	r22, Y+21	; 0x15
    222e:	7e 89       	ldd	r23, Y+22	; 0x16
    2230:	8f 89       	ldd	r24, Y+23	; 0x17
    2232:	98 8d       	ldd	r25, Y+24	; 0x18
    2234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	9c 8b       	std	Y+20, r25	; 0x14
    223e:	8b 8b       	std	Y+19, r24	; 0x13
    2240:	8b 89       	ldd	r24, Y+19	; 0x13
    2242:	9c 89       	ldd	r25, Y+20	; 0x14
    2244:	98 8b       	std	Y+16, r25	; 0x10
    2246:	8f 87       	std	Y+15, r24	; 0x0f
    2248:	8f 85       	ldd	r24, Y+15	; 0x0f
    224a:	98 89       	ldd	r25, Y+16	; 0x10
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <LCD_sendCommand+0x2e0>
    2250:	98 8b       	std	Y+16, r25	; 0x10
    2252:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	62 e0       	ldi	r22, 0x02	; 2
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	a0 e8       	ldi	r26, 0x80	; 128
    2264:	bf e3       	ldi	r27, 0x3F	; 63
    2266:	8b 87       	std	Y+11, r24	; 0x0b
    2268:	9c 87       	std	Y+12, r25	; 0x0c
    226a:	ad 87       	std	Y+13, r26	; 0x0d
    226c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2270:	7c 85       	ldd	r23, Y+12	; 0x0c
    2272:	8d 85       	ldd	r24, Y+13	; 0x0d
    2274:	9e 85       	ldd	r25, Y+14	; 0x0e
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	4a ef       	ldi	r20, 0xFA	; 250
    227c:	54 e4       	ldi	r21, 0x44	; 68
    227e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	8f 83       	std	Y+7, r24	; 0x07
    2288:	98 87       	std	Y+8, r25	; 0x08
    228a:	a9 87       	std	Y+9, r26	; 0x09
    228c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    228e:	6f 81       	ldd	r22, Y+7	; 0x07
    2290:	78 85       	ldd	r23, Y+8	; 0x08
    2292:	89 85       	ldd	r24, Y+9	; 0x09
    2294:	9a 85       	ldd	r25, Y+10	; 0x0a
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e8       	ldi	r20, 0x80	; 128
    229c:	5f e3       	ldi	r21, 0x3F	; 63
    229e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a2:	88 23       	and	r24, r24
    22a4:	2c f4       	brge	.+10     	; 0x22b0 <LCD_sendCommand+0x344>
		__ticks = 1;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9e 83       	std	Y+6, r25	; 0x06
    22ac:	8d 83       	std	Y+5, r24	; 0x05
    22ae:	3f c0       	rjmp	.+126    	; 0x232e <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    22b0:	6f 81       	ldd	r22, Y+7	; 0x07
    22b2:	78 85       	ldd	r23, Y+8	; 0x08
    22b4:	89 85       	ldd	r24, Y+9	; 0x09
    22b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	3f ef       	ldi	r19, 0xFF	; 255
    22bc:	4f e7       	ldi	r20, 0x7F	; 127
    22be:	57 e4       	ldi	r21, 0x47	; 71
    22c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c4:	18 16       	cp	r1, r24
    22c6:	4c f5       	brge	.+82     	; 0x231a <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    22cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9e 83       	std	Y+6, r25	; 0x06
    22ee:	8d 83       	std	Y+5, r24	; 0x05
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <LCD_sendCommand+0x3a4>
    22f2:	88 ec       	ldi	r24, 0xC8	; 200
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	9c 83       	std	Y+4, r25	; 0x04
    22f8:	8b 83       	std	Y+3, r24	; 0x03
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <LCD_sendCommand+0x392>
    2302:	9c 83       	std	Y+4, r25	; 0x04
    2304:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	9e 81       	ldd	r25, Y+6	; 0x06
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	9e 83       	std	Y+6, r25	; 0x06
    230e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2310:	8d 81       	ldd	r24, Y+5	; 0x05
    2312:	9e 81       	ldd	r25, Y+6	; 0x06
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	69 f7       	brne	.-38     	; 0x22f2 <LCD_sendCommand+0x386>
    2318:	14 c0       	rjmp	.+40     	; 0x2342 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231a:	6f 81       	ldd	r22, Y+7	; 0x07
    231c:	78 85       	ldd	r23, Y+8	; 0x08
    231e:	89 85       	ldd	r24, Y+9	; 0x09
    2320:	9a 85       	ldd	r25, Y+10	; 0x0a
    2322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9e 83       	std	Y+6, r25	; 0x06
    232c:	8d 83       	std	Y+5, r24	; 0x05
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	9a 83       	std	Y+2, r25	; 0x02
    2334:	89 83       	std	Y+1, r24	; 0x01
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	9a 81       	ldd	r25, Y+2	; 0x02
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <LCD_sendCommand+0x3ce>
    233e:	9a 83       	std	Y+2, r25	; 0x02
    2340:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2342:	e9 96       	adiw	r28, 0x39	; 57
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	e9 97       	sbiw	r28, 0x39	; 57
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	60 e0       	ldi	r22, 0x00	; 0
    236e:	41 e0       	ldi	r20, 0x01	; 1
    2370:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	61 e0       	ldi	r22, 0x01	; 1
    2378:	40 e0       	ldi	r20, 0x00	; 0
    237a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	a0 e8       	ldi	r26, 0x80	; 128
    2384:	bf e3       	ldi	r27, 0x3F	; 63
    2386:	8d ab       	std	Y+53, r24	; 0x35
    2388:	9e ab       	std	Y+54, r25	; 0x36
    238a:	af ab       	std	Y+55, r26	; 0x37
    238c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238e:	6d a9       	ldd	r22, Y+53	; 0x35
    2390:	7e a9       	ldd	r23, Y+54	; 0x36
    2392:	8f a9       	ldd	r24, Y+55	; 0x37
    2394:	98 ad       	ldd	r25, Y+56	; 0x38
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	4a ef       	ldi	r20, 0xFA	; 250
    239c:	54 e4       	ldi	r21, 0x44	; 68
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	89 ab       	std	Y+49, r24	; 0x31
    23a8:	9a ab       	std	Y+50, r25	; 0x32
    23aa:	ab ab       	std	Y+51, r26	; 0x33
    23ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23ae:	69 a9       	ldd	r22, Y+49	; 0x31
    23b0:	7a a9       	ldd	r23, Y+50	; 0x32
    23b2:	8b a9       	ldd	r24, Y+51	; 0x33
    23b4:	9c a9       	ldd	r25, Y+52	; 0x34
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e8       	ldi	r20, 0x80	; 128
    23bc:	5f e3       	ldi	r21, 0x3F	; 63
    23be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c2:	88 23       	and	r24, r24
    23c4:	2c f4       	brge	.+10     	; 0x23d0 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	98 ab       	std	Y+48, r25	; 0x30
    23cc:	8f a7       	std	Y+47, r24	; 0x2f
    23ce:	3f c0       	rjmp	.+126    	; 0x244e <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    23d0:	69 a9       	ldd	r22, Y+49	; 0x31
    23d2:	7a a9       	ldd	r23, Y+50	; 0x32
    23d4:	8b a9       	ldd	r24, Y+51	; 0x33
    23d6:	9c a9       	ldd	r25, Y+52	; 0x34
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	3f ef       	ldi	r19, 0xFF	; 255
    23dc:	4f e7       	ldi	r20, 0x7F	; 127
    23de:	57 e4       	ldi	r21, 0x47	; 71
    23e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e4:	18 16       	cp	r1, r24
    23e6:	4c f5       	brge	.+82     	; 0x243a <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e8:	6d a9       	ldd	r22, Y+53	; 0x35
    23ea:	7e a9       	ldd	r23, Y+54	; 0x36
    23ec:	8f a9       	ldd	r24, Y+55	; 0x37
    23ee:	98 ad       	ldd	r25, Y+56	; 0x38
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e2       	ldi	r20, 0x20	; 32
    23f6:	51 e4       	ldi	r21, 0x41	; 65
    23f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	98 ab       	std	Y+48, r25	; 0x30
    240e:	8f a7       	std	Y+47, r24	; 0x2f
    2410:	0f c0       	rjmp	.+30     	; 0x2430 <LCD_displayCharacter+0xdc>
    2412:	88 ec       	ldi	r24, 0xC8	; 200
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9e a7       	std	Y+46, r25	; 0x2e
    2418:	8d a7       	std	Y+45, r24	; 0x2d
    241a:	8d a5       	ldd	r24, Y+45	; 0x2d
    241c:	9e a5       	ldd	r25, Y+46	; 0x2e
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_displayCharacter+0xca>
    2422:	9e a7       	std	Y+46, r25	; 0x2e
    2424:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2426:	8f a5       	ldd	r24, Y+47	; 0x2f
    2428:	98 a9       	ldd	r25, Y+48	; 0x30
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	98 ab       	std	Y+48, r25	; 0x30
    242e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2430:	8f a5       	ldd	r24, Y+47	; 0x2f
    2432:	98 a9       	ldd	r25, Y+48	; 0x30
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	69 f7       	brne	.-38     	; 0x2412 <LCD_displayCharacter+0xbe>
    2438:	14 c0       	rjmp	.+40     	; 0x2462 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243a:	69 a9       	ldd	r22, Y+49	; 0x31
    243c:	7a a9       	ldd	r23, Y+50	; 0x32
    243e:	8b a9       	ldd	r24, Y+51	; 0x33
    2440:	9c a9       	ldd	r25, Y+52	; 0x34
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	98 ab       	std	Y+48, r25	; 0x30
    244c:	8f a7       	std	Y+47, r24	; 0x2f
    244e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2450:	98 a9       	ldd	r25, Y+48	; 0x30
    2452:	9c a7       	std	Y+44, r25	; 0x2c
    2454:	8b a7       	std	Y+43, r24	; 0x2b
    2456:	8b a5       	ldd	r24, Y+43	; 0x2b
    2458:	9c a5       	ldd	r25, Y+44	; 0x2c
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <LCD_displayCharacter+0x106>
    245e:	9c a7       	std	Y+44, r25	; 0x2c
    2460:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	62 e0       	ldi	r22, 0x02	; 2
    2466:	41 e0       	ldi	r20, 0x01	; 1
    2468:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	a0 e8       	ldi	r26, 0x80	; 128
    2472:	bf e3       	ldi	r27, 0x3F	; 63
    2474:	8f a3       	std	Y+39, r24	; 0x27
    2476:	98 a7       	std	Y+40, r25	; 0x28
    2478:	a9 a7       	std	Y+41, r26	; 0x29
    247a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247c:	6f a1       	ldd	r22, Y+39	; 0x27
    247e:	78 a5       	ldd	r23, Y+40	; 0x28
    2480:	89 a5       	ldd	r24, Y+41	; 0x29
    2482:	9a a5       	ldd	r25, Y+42	; 0x2a
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	4a ef       	ldi	r20, 0xFA	; 250
    248a:	54 e4       	ldi	r21, 0x44	; 68
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	8b a3       	std	Y+35, r24	; 0x23
    2496:	9c a3       	std	Y+36, r25	; 0x24
    2498:	ad a3       	std	Y+37, r26	; 0x25
    249a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    249c:	6b a1       	ldd	r22, Y+35	; 0x23
    249e:	7c a1       	ldd	r23, Y+36	; 0x24
    24a0:	8d a1       	ldd	r24, Y+37	; 0x25
    24a2:	9e a1       	ldd	r25, Y+38	; 0x26
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e8       	ldi	r20, 0x80	; 128
    24aa:	5f e3       	ldi	r21, 0x3F	; 63
    24ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b0:	88 23       	and	r24, r24
    24b2:	2c f4       	brge	.+10     	; 0x24be <LCD_displayCharacter+0x16a>
		__ticks = 1;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	9a a3       	std	Y+34, r25	; 0x22
    24ba:	89 a3       	std	Y+33, r24	; 0x21
    24bc:	3f c0       	rjmp	.+126    	; 0x253c <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    24be:	6b a1       	ldd	r22, Y+35	; 0x23
    24c0:	7c a1       	ldd	r23, Y+36	; 0x24
    24c2:	8d a1       	ldd	r24, Y+37	; 0x25
    24c4:	9e a1       	ldd	r25, Y+38	; 0x26
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	3f ef       	ldi	r19, 0xFF	; 255
    24ca:	4f e7       	ldi	r20, 0x7F	; 127
    24cc:	57 e4       	ldi	r21, 0x47	; 71
    24ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d2:	18 16       	cp	r1, r24
    24d4:	4c f5       	brge	.+82     	; 0x2528 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d6:	6f a1       	ldd	r22, Y+39	; 0x27
    24d8:	78 a5       	ldd	r23, Y+40	; 0x28
    24da:	89 a5       	ldd	r24, Y+41	; 0x29
    24dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e2       	ldi	r20, 0x20	; 32
    24e4:	51 e4       	ldi	r21, 0x41	; 65
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	bc 01       	movw	r22, r24
    24f0:	cd 01       	movw	r24, r26
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	9a a3       	std	Y+34, r25	; 0x22
    24fc:	89 a3       	std	Y+33, r24	; 0x21
    24fe:	0f c0       	rjmp	.+30     	; 0x251e <LCD_displayCharacter+0x1ca>
    2500:	88 ec       	ldi	r24, 0xC8	; 200
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	98 a3       	std	Y+32, r25	; 0x20
    2506:	8f 8f       	std	Y+31, r24	; 0x1f
    2508:	8f 8d       	ldd	r24, Y+31	; 0x1f
    250a:	98 a1       	ldd	r25, Y+32	; 0x20
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <LCD_displayCharacter+0x1b8>
    2510:	98 a3       	std	Y+32, r25	; 0x20
    2512:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2514:	89 a1       	ldd	r24, Y+33	; 0x21
    2516:	9a a1       	ldd	r25, Y+34	; 0x22
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	9a a3       	std	Y+34, r25	; 0x22
    251c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251e:	89 a1       	ldd	r24, Y+33	; 0x21
    2520:	9a a1       	ldd	r25, Y+34	; 0x22
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	69 f7       	brne	.-38     	; 0x2500 <LCD_displayCharacter+0x1ac>
    2526:	14 c0       	rjmp	.+40     	; 0x2550 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2528:	6b a1       	ldd	r22, Y+35	; 0x23
    252a:	7c a1       	ldd	r23, Y+36	; 0x24
    252c:	8d a1       	ldd	r24, Y+37	; 0x25
    252e:	9e a1       	ldd	r25, Y+38	; 0x26
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9a a3       	std	Y+34, r25	; 0x22
    253a:	89 a3       	std	Y+33, r24	; 0x21
    253c:	89 a1       	ldd	r24, Y+33	; 0x21
    253e:	9a a1       	ldd	r25, Y+34	; 0x22
    2540:	9e 8f       	std	Y+30, r25	; 0x1e
    2542:	8d 8f       	std	Y+29, r24	; 0x1d
    2544:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2546:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <LCD_displayCharacter+0x1f4>
    254c:	9e 8f       	std	Y+30, r25	; 0x1e
    254e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	69 ad       	ldd	r22, Y+57	; 0x39
    2554:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	a0 e8       	ldi	r26, 0x80	; 128
    255e:	bf e3       	ldi	r27, 0x3F	; 63
    2560:	89 8f       	std	Y+25, r24	; 0x19
    2562:	9a 8f       	std	Y+26, r25	; 0x1a
    2564:	ab 8f       	std	Y+27, r26	; 0x1b
    2566:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2568:	69 8d       	ldd	r22, Y+25	; 0x19
    256a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    256c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    256e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	4a ef       	ldi	r20, 0xFA	; 250
    2576:	54 e4       	ldi	r21, 0x44	; 68
    2578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	8d 8b       	std	Y+21, r24	; 0x15
    2582:	9e 8b       	std	Y+22, r25	; 0x16
    2584:	af 8b       	std	Y+23, r26	; 0x17
    2586:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2588:	6d 89       	ldd	r22, Y+21	; 0x15
    258a:	7e 89       	ldd	r23, Y+22	; 0x16
    258c:	8f 89       	ldd	r24, Y+23	; 0x17
    258e:	98 8d       	ldd	r25, Y+24	; 0x18
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e8       	ldi	r20, 0x80	; 128
    2596:	5f e3       	ldi	r21, 0x3F	; 63
    2598:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    259c:	88 23       	and	r24, r24
    259e:	2c f4       	brge	.+10     	; 0x25aa <LCD_displayCharacter+0x256>
		__ticks = 1;
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9c 8b       	std	Y+20, r25	; 0x14
    25a6:	8b 8b       	std	Y+19, r24	; 0x13
    25a8:	3f c0       	rjmp	.+126    	; 0x2628 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    25aa:	6d 89       	ldd	r22, Y+21	; 0x15
    25ac:	7e 89       	ldd	r23, Y+22	; 0x16
    25ae:	8f 89       	ldd	r24, Y+23	; 0x17
    25b0:	98 8d       	ldd	r25, Y+24	; 0x18
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	3f ef       	ldi	r19, 0xFF	; 255
    25b6:	4f e7       	ldi	r20, 0x7F	; 127
    25b8:	57 e4       	ldi	r21, 0x47	; 71
    25ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25be:	18 16       	cp	r1, r24
    25c0:	4c f5       	brge	.+82     	; 0x2614 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c2:	69 8d       	ldd	r22, Y+25	; 0x19
    25c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e2       	ldi	r20, 0x20	; 32
    25d0:	51 e4       	ldi	r21, 0x41	; 65
    25d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	bc 01       	movw	r22, r24
    25dc:	cd 01       	movw	r24, r26
    25de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9c 8b       	std	Y+20, r25	; 0x14
    25e8:	8b 8b       	std	Y+19, r24	; 0x13
    25ea:	0f c0       	rjmp	.+30     	; 0x260a <LCD_displayCharacter+0x2b6>
    25ec:	88 ec       	ldi	r24, 0xC8	; 200
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	9a 8b       	std	Y+18, r25	; 0x12
    25f2:	89 8b       	std	Y+17, r24	; 0x11
    25f4:	89 89       	ldd	r24, Y+17	; 0x11
    25f6:	9a 89       	ldd	r25, Y+18	; 0x12
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <LCD_displayCharacter+0x2a4>
    25fc:	9a 8b       	std	Y+18, r25	; 0x12
    25fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2600:	8b 89       	ldd	r24, Y+19	; 0x13
    2602:	9c 89       	ldd	r25, Y+20	; 0x14
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	9c 8b       	std	Y+20, r25	; 0x14
    2608:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260a:	8b 89       	ldd	r24, Y+19	; 0x13
    260c:	9c 89       	ldd	r25, Y+20	; 0x14
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	69 f7       	brne	.-38     	; 0x25ec <LCD_displayCharacter+0x298>
    2612:	14 c0       	rjmp	.+40     	; 0x263c <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2614:	6d 89       	ldd	r22, Y+21	; 0x15
    2616:	7e 89       	ldd	r23, Y+22	; 0x16
    2618:	8f 89       	ldd	r24, Y+23	; 0x17
    261a:	98 8d       	ldd	r25, Y+24	; 0x18
    261c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	9c 8b       	std	Y+20, r25	; 0x14
    2626:	8b 8b       	std	Y+19, r24	; 0x13
    2628:	8b 89       	ldd	r24, Y+19	; 0x13
    262a:	9c 89       	ldd	r25, Y+20	; 0x14
    262c:	98 8b       	std	Y+16, r25	; 0x10
    262e:	8f 87       	std	Y+15, r24	; 0x0f
    2630:	8f 85       	ldd	r24, Y+15	; 0x0f
    2632:	98 89       	ldd	r25, Y+16	; 0x10
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <LCD_displayCharacter+0x2e0>
    2638:	98 8b       	std	Y+16, r25	; 0x10
    263a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	62 e0       	ldi	r22, 0x02	; 2
    2640:	40 e0       	ldi	r20, 0x00	; 0
    2642:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a0 e8       	ldi	r26, 0x80	; 128
    264c:	bf e3       	ldi	r27, 0x3F	; 63
    264e:	8b 87       	std	Y+11, r24	; 0x0b
    2650:	9c 87       	std	Y+12, r25	; 0x0c
    2652:	ad 87       	std	Y+13, r26	; 0x0d
    2654:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2656:	6b 85       	ldd	r22, Y+11	; 0x0b
    2658:	7c 85       	ldd	r23, Y+12	; 0x0c
    265a:	8d 85       	ldd	r24, Y+13	; 0x0d
    265c:	9e 85       	ldd	r25, Y+14	; 0x0e
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	4a ef       	ldi	r20, 0xFA	; 250
    2664:	54 e4       	ldi	r21, 0x44	; 68
    2666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	8f 83       	std	Y+7, r24	; 0x07
    2670:	98 87       	std	Y+8, r25	; 0x08
    2672:	a9 87       	std	Y+9, r26	; 0x09
    2674:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2676:	6f 81       	ldd	r22, Y+7	; 0x07
    2678:	78 85       	ldd	r23, Y+8	; 0x08
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e8       	ldi	r20, 0x80	; 128
    2684:	5f e3       	ldi	r21, 0x3F	; 63
    2686:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    268a:	88 23       	and	r24, r24
    268c:	2c f4       	brge	.+10     	; 0x2698 <LCD_displayCharacter+0x344>
		__ticks = 1;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	9e 83       	std	Y+6, r25	; 0x06
    2694:	8d 83       	std	Y+5, r24	; 0x05
    2696:	3f c0       	rjmp	.+126    	; 0x2716 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2698:	6f 81       	ldd	r22, Y+7	; 0x07
    269a:	78 85       	ldd	r23, Y+8	; 0x08
    269c:	89 85       	ldd	r24, Y+9	; 0x09
    269e:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	3f ef       	ldi	r19, 0xFF	; 255
    26a4:	4f e7       	ldi	r20, 0x7F	; 127
    26a6:	57 e4       	ldi	r21, 0x47	; 71
    26a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ac:	18 16       	cp	r1, r24
    26ae:	4c f5       	brge	.+82     	; 0x2702 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e2       	ldi	r20, 0x20	; 32
    26be:	51 e4       	ldi	r21, 0x41	; 65
    26c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	bc 01       	movw	r22, r24
    26ca:	cd 01       	movw	r24, r26
    26cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	9e 83       	std	Y+6, r25	; 0x06
    26d6:	8d 83       	std	Y+5, r24	; 0x05
    26d8:	0f c0       	rjmp	.+30     	; 0x26f8 <LCD_displayCharacter+0x3a4>
    26da:	88 ec       	ldi	r24, 0xC8	; 200
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	9c 83       	std	Y+4, r25	; 0x04
    26e0:	8b 83       	std	Y+3, r24	; 0x03
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	9c 81       	ldd	r25, Y+4	; 0x04
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <LCD_displayCharacter+0x392>
    26ea:	9c 83       	std	Y+4, r25	; 0x04
    26ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ee:	8d 81       	ldd	r24, Y+5	; 0x05
    26f0:	9e 81       	ldd	r25, Y+6	; 0x06
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	9e 83       	std	Y+6, r25	; 0x06
    26f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	69 f7       	brne	.-38     	; 0x26da <LCD_displayCharacter+0x386>
    2700:	14 c0       	rjmp	.+40     	; 0x272a <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2702:	6f 81       	ldd	r22, Y+7	; 0x07
    2704:	78 85       	ldd	r23, Y+8	; 0x08
    2706:	89 85       	ldd	r24, Y+9	; 0x09
    2708:	9a 85       	ldd	r25, Y+10	; 0x0a
    270a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	9e 83       	std	Y+6, r25	; 0x06
    2714:	8d 83       	std	Y+5, r24	; 0x05
    2716:	8d 81       	ldd	r24, Y+5	; 0x05
    2718:	9e 81       	ldd	r25, Y+6	; 0x06
    271a:	9a 83       	std	Y+2, r25	; 0x02
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	9a 81       	ldd	r25, Y+2	; 0x02
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <LCD_displayCharacter+0x3ce>
    2726:	9a 83       	std	Y+2, r25	; 0x02
    2728:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    272a:	e9 96       	adiw	r28, 0x39	; 57
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	de bf       	out	0x3e, r29	; 62
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	cd bf       	out	0x3d, r28	; 61
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	00 d0       	rcall	.+0      	; 0x2742 <LCD_displayString+0x6>
    2742:	0f 92       	push	r0
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	9b 83       	std	Y+3, r25	; 0x03
    274a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    274c:	19 82       	std	Y+1, r1	; 0x01
    274e:	0e c0       	rjmp	.+28     	; 0x276c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	28 2f       	mov	r18, r24
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	8a 81       	ldd	r24, Y+2	; 0x02
    2758:	9b 81       	ldd	r25, Y+3	; 0x03
    275a:	fc 01       	movw	r30, r24
    275c:	e2 0f       	add	r30, r18
    275e:	f3 1f       	adc	r31, r19
    2760:	80 81       	ld	r24, Z
    2762:	0e 94 aa 11 	call	0x2354	; 0x2354 <LCD_displayCharacter>
		i++;
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	8f 5f       	subi	r24, 0xFF	; 255
    276a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	8a 81       	ldd	r24, Y+2	; 0x02
    2774:	9b 81       	ldd	r25, Y+3	; 0x03
    2776:	fc 01       	movw	r30, r24
    2778:	e2 0f       	add	r30, r18
    277a:	f3 1f       	adc	r31, r19
    277c:	80 81       	ld	r24, Z
    277e:	88 23       	and	r24, r24
    2780:	39 f7       	brne	.-50     	; 0x2750 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	00 d0       	rcall	.+0      	; 0x2794 <LCD_moveCursor+0x6>
    2794:	00 d0       	rcall	.+0      	; 0x2796 <LCD_moveCursor+0x8>
    2796:	0f 92       	push	r0
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	8a 83       	std	Y+2, r24	; 0x02
    279e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	28 2f       	mov	r18, r24
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	3d 83       	std	Y+5, r19	; 0x05
    27a8:	2c 83       	std	Y+4, r18	; 0x04
    27aa:	8c 81       	ldd	r24, Y+4	; 0x04
    27ac:	9d 81       	ldd	r25, Y+5	; 0x05
    27ae:	81 30       	cpi	r24, 0x01	; 1
    27b0:	91 05       	cpc	r25, r1
    27b2:	c1 f0       	breq	.+48     	; 0x27e4 <LCD_moveCursor+0x56>
    27b4:	2c 81       	ldd	r18, Y+4	; 0x04
    27b6:	3d 81       	ldd	r19, Y+5	; 0x05
    27b8:	22 30       	cpi	r18, 0x02	; 2
    27ba:	31 05       	cpc	r19, r1
    27bc:	2c f4       	brge	.+10     	; 0x27c8 <LCD_moveCursor+0x3a>
    27be:	8c 81       	ldd	r24, Y+4	; 0x04
    27c0:	9d 81       	ldd	r25, Y+5	; 0x05
    27c2:	00 97       	sbiw	r24, 0x00	; 0
    27c4:	61 f0       	breq	.+24     	; 0x27de <LCD_moveCursor+0x50>
    27c6:	19 c0       	rjmp	.+50     	; 0x27fa <LCD_moveCursor+0x6c>
    27c8:	2c 81       	ldd	r18, Y+4	; 0x04
    27ca:	3d 81       	ldd	r19, Y+5	; 0x05
    27cc:	22 30       	cpi	r18, 0x02	; 2
    27ce:	31 05       	cpc	r19, r1
    27d0:	69 f0       	breq	.+26     	; 0x27ec <LCD_moveCursor+0x5e>
    27d2:	8c 81       	ldd	r24, Y+4	; 0x04
    27d4:	9d 81       	ldd	r25, Y+5	; 0x05
    27d6:	83 30       	cpi	r24, 0x03	; 3
    27d8:	91 05       	cpc	r25, r1
    27da:	61 f0       	breq	.+24     	; 0x27f4 <LCD_moveCursor+0x66>
    27dc:	0e c0       	rjmp	.+28     	; 0x27fa <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	89 83       	std	Y+1, r24	; 0x01
    27e2:	0b c0       	rjmp	.+22     	; 0x27fa <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	80 5c       	subi	r24, 0xC0	; 192
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	07 c0       	rjmp	.+14     	; 0x27fa <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	80 5f       	subi	r24, 0xF0	; 240
    27f0:	89 83       	std	Y+1, r24	; 0x01
    27f2:	03 c0       	rjmp	.+6      	; 0x27fa <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	80 5b       	subi	r24, 0xB0	; 176
    27f8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	80 68       	ori	r24, 0x80	; 128
    27fe:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_sendCommand>
}
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	00 d0       	rcall	.+0      	; 0x2818 <LCD_displayStringRowColumn+0x6>
    2818:	00 d0       	rcall	.+0      	; 0x281a <LCD_displayStringRowColumn+0x8>
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	89 83       	std	Y+1, r24	; 0x01
    2820:	6a 83       	std	Y+2, r22	; 0x02
    2822:	5c 83       	std	Y+4, r21	; 0x04
    2824:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	6a 81       	ldd	r22, Y+2	; 0x02
    282a:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    282e:	8b 81       	ldd	r24, Y+3	; 0x03
    2830:	9c 81       	ldd	r25, Y+4	; 0x04
    2832:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_displayString>
}
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	08 95       	ret

00002844 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
    284c:	62 97       	sbiw	r28, 0x12	; 18
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	9a 8b       	std	Y+18, r25	; 0x12
    285a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    285c:	89 89       	ldd	r24, Y+17	; 0x11
    285e:	9a 89       	ldd	r25, Y+18	; 0x12
    2860:	9e 01       	movw	r18, r28
    2862:	2f 5f       	subi	r18, 0xFF	; 255
    2864:	3f 4f       	sbci	r19, 0xFF	; 255
    2866:	b9 01       	movw	r22, r18
    2868:	4a e0       	ldi	r20, 0x0A	; 10
    286a:	50 e0       	ldi	r21, 0x00	; 0
    286c:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <itoa>
   LCD_displayString(buff); /* Display the string */
    2870:	ce 01       	movw	r24, r28
    2872:	01 96       	adiw	r24, 0x01	; 1
    2874:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_displayString>
}
    2878:	62 96       	adiw	r28, 0x12	; 18
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    288a:	df 93       	push	r29
    288c:	cf 93       	push	r28
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <LCD_sendCommand>
}
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <main>:
uint8 password1[PASS_SIZE];
uint8 password2[PASS_SIZE];
uint8 passwordCheck[PASS_SIZE];

int main()
{
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	6c 97       	sbiw	r28, 0x1c	; 28
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
	 * 			  = 	1/31250
	 * compare value =  ( timer_required ) / ( clock_time )
	 * 				 = 1/(1/31250) = 31250*/
	TIMER_Config config;

	config.timer_id = TIMER1_ID;
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	8f 83       	std	Y+7, r24	; 0x07
	config.timer_mode = COMPARE_MODE;
    28b6:	82 e0       	ldi	r24, 0x02	; 2
    28b8:	88 87       	std	Y+8, r24	; 0x08
	config.timer_clk = PRESCALER256;
    28ba:	84 e0       	ldi	r24, 0x04	; 4
    28bc:	8a 87       	std	Y+10, r24	; 0x0a
	config.oc_mode = TOGGLE;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	89 87       	std	Y+9, r24	; 0x09
	config.interrupt = ON;
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	8b 87       	std	Y+11, r24	; 0x0b
	config.inital_value = 0;
    28c6:	1d 86       	std	Y+13, r1	; 0x0d
    28c8:	1c 86       	std	Y+12, r1	; 0x0c
	config.compare_value = 31250;
    28ca:	82 e1       	ldi	r24, 0x12	; 18
    28cc:	9a e7       	ldi	r25, 0x7A	; 122
    28ce:	9f 87       	std	Y+15, r25	; 0x0f
    28d0:	8e 87       	std	Y+14, r24	; 0x0e

	Timer_Init(&config);
    28d2:	ce 01       	movw	r24, r28
    28d4:	07 96       	adiw	r24, 0x07	; 7
    28d6:	0e 94 43 16 	call	0x2c86	; 0x2c86 <Timer_Init>

	Timer_SetCallBack(TIMER1_ID,ledony,COMPARE_MODE);
    28da:	21 ee       	ldi	r18, 0xE1	; 225
    28dc:	38 e0       	ldi	r19, 0x08	; 8
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	b9 01       	movw	r22, r18
    28e2:	42 e0       	ldi	r20, 0x02	; 2
    28e4:	0e 94 f7 19 	call	0x33ee	; 0x33ee <Timer_SetCallBack>
	/********************** Modules Initialization ************************/

	/* Uart Initialization */
	UART_Config uconfig;

	uconfig.RxEn = ON;
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	88 8b       	std	Y+16, r24	; 0x10
	uconfig.TxEn = ON;
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	89 8b       	std	Y+17, r24	; 0x11
	uconfig.EMPInt = OFF;
    28f0:	1d 8a       	std	Y+21, r1	; 0x15
	uconfig.RxInt = OFF;
    28f2:	1b 8a       	std	Y+19, r1	; 0x13
	uconfig.TxInt = OFF;
    28f4:	1c 8a       	std	Y+20, r1	; 0x14
	uconfig.doublespeed = ON;
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	8a 8b       	std	Y+18, r24	; 0x12
	uconfig.parity = EVEN;
    28fa:	82 e0       	ldi	r24, 0x02	; 2
    28fc:	8e 8b       	std	Y+22, r24	; 0x16
	uconfig.stopbits = ONE;
    28fe:	1f 8a       	std	Y+23, r1	; 0x17
	uconfig.databits = EIGHT;
    2900:	83 e0       	ldi	r24, 0x03	; 3
    2902:	88 8f       	std	Y+24, r24	; 0x18
	uconfig.baudrate = 9600;
    2904:	80 e8       	ldi	r24, 0x80	; 128
    2906:	95 e2       	ldi	r25, 0x25	; 37
    2908:	9a 8f       	std	Y+26, r25	; 0x1a
    290a:	89 8f       	std	Y+25, r24	; 0x19

	UART_init(&uconfig);
    290c:	ce 01       	movw	r24, r28
    290e:	40 96       	adiw	r24, 0x10	; 16
    2910:	0e 94 47 1b 	call	0x368e	; 0x368e <UART_init>


	/* LCD Initialization */
	LCD_init();
    2914:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_init>


	/* Enable The global Interrupt */
	SREG |= (1<<7);
    2918:	af e5       	ldi	r26, 0x5F	; 95
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	ef e5       	ldi	r30, 0x5F	; 95
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	80 68       	ori	r24, 0x80	; 128
    2924:	8c 93       	st	X, r24
	uint8 key;

	State state = CHANGE_PW_STATE;
    2926:	1d 82       	std	Y+5, r1	; 0x05
	uint8 no_of_trials = 0;
    2928:	1c 82       	std	Y+4, r1	; 0x04
	  while(1)
	    {
		  switch(state)
    292a:	8d 81       	ldd	r24, Y+5	; 0x05
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	3c 8f       	std	Y+28, r19	; 0x1c
    2932:	2b 8f       	std	Y+27, r18	; 0x1b
    2934:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2936:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2938:	82 30       	cpi	r24, 0x02	; 2
    293a:	91 05       	cpc	r25, r1
    293c:	09 f4       	brne	.+2      	; 0x2940 <main+0xa2>
    293e:	56 c0       	rjmp	.+172    	; 0x29ec <main+0x14e>
    2940:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2942:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2944:	23 30       	cpi	r18, 0x03	; 3
    2946:	31 05       	cpc	r19, r1
    2948:	54 f4       	brge	.+20     	; 0x295e <main+0xc0>
    294a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    294c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	c1 f0       	breq	.+48     	; 0x2982 <main+0xe4>
    2952:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2954:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2956:	21 30       	cpi	r18, 0x01	; 1
    2958:	31 05       	cpc	r19, r1
    295a:	09 f1       	breq	.+66     	; 0x299e <main+0x100>
    295c:	e6 cf       	rjmp	.-52     	; 0x292a <main+0x8c>
    295e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2960:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2962:	84 30       	cpi	r24, 0x04	; 4
    2964:	91 05       	cpc	r25, r1
    2966:	69 f1       	breq	.+90     	; 0x29c2 <main+0x124>
    2968:	2b 8d       	ldd	r18, Y+27	; 0x1b
    296a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    296c:	24 30       	cpi	r18, 0x04	; 4
    296e:	31 05       	cpc	r19, r1
    2970:	0c f4       	brge	.+2      	; 0x2974 <main+0xd6>
    2972:	41 c0       	rjmp	.+130    	; 0x29f6 <main+0x158>
    2974:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2976:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2978:	85 30       	cpi	r24, 0x05	; 5
    297a:	91 05       	cpc	r25, r1
    297c:	09 f4       	brne	.+2      	; 0x2980 <main+0xe2>
    297e:	49 c0       	rjmp	.+146    	; 0x2a12 <main+0x174>
    2980:	d4 cf       	rjmp	.-88     	; 0x292a <main+0x8c>
		  {
		  case CHANGE_PW_STATE:
			  enter_password();
    2982:	0e 94 23 09 	call	0x1246	; 0x1246 <enter_password>
			  uint8 iscorrect = reenter_password();
    2986:	0e 94 ca 09 	call	0x1394	; 0x1394 <reenter_password>
    298a:	8b 83       	std	Y+3, r24	; 0x03
			  if(iscorrect == YES)
    298c:	8b 81       	ldd	r24, Y+3	; 0x03
    298e:	81 30       	cpi	r24, 0x01	; 1
    2990:	19 f4       	brne	.+6      	; 0x2998 <main+0xfa>
				  {
				  state = OPTIONS_STATE;
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	8d 83       	std	Y+5, r24	; 0x05
    2996:	c9 cf       	rjmp	.-110    	; 0x292a <main+0x8c>
				  }
			  else
			  {
			   password_not_identical();
    2998:	0e 94 8a 0a 	call	0x1514	; 0x1514 <password_not_identical>
    299c:	c6 cf       	rjmp	.-116    	; 0x292a <main+0x8c>
			  }
			  break;
		  case OPTIONS_STATE:
			  key++; 		/* any trivial instruction due I can't initialize any thing in the fist line of case block */
    299e:	8e 81       	ldd	r24, Y+6	; 0x06
    29a0:	8f 5f       	subi	r24, 0xFF	; 255
    29a2:	8e 83       	std	Y+6, r24	; 0x06
			  Option option = main_options();
    29a4:	0e 94 1d 0b 	call	0x163a	; 0x163a <main_options>
    29a8:	8a 83       	std	Y+2, r24	; 0x02
			  if(option == CHANGEPW)
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	81 30       	cpi	r24, 0x01	; 1
    29ae:	11 f4       	brne	.+4      	; 0x29b4 <main+0x116>
				  {
				  state = CHANGE_PW_STATE;
    29b0:	1d 82       	std	Y+5, r1	; 0x05
    29b2:	bb cf       	rjmp	.-138    	; 0x292a <main+0x8c>
				  }
			  else if(option == OPENDOOR)
    29b4:	8a 81       	ldd	r24, Y+2	; 0x02
    29b6:	88 23       	and	r24, r24
    29b8:	09 f0       	breq	.+2      	; 0x29bc <main+0x11e>
    29ba:	b7 cf       	rjmp	.-146    	; 0x292a <main+0x8c>
			  {
				  state = ENTER_PW_STATE;
    29bc:	84 e0       	ldi	r24, 0x04	; 4
    29be:	8d 83       	std	Y+5, r24	; 0x05
    29c0:	b4 cf       	rjmp	.-152    	; 0x292a <main+0x8c>
			  }
			  break;

		  case ENTER_PW_STATE:
			  if(enter_saved_password())
    29c2:	0e 94 33 0c 	call	0x1866	; 0x1866 <enter_saved_password>
    29c6:	88 23       	and	r24, r24
    29c8:	19 f0       	breq	.+6      	; 0x29d0 <main+0x132>
			  {
				  state = OPEN_DOOR_STATE;
    29ca:	82 e0       	ldi	r24, 0x02	; 2
    29cc:	8d 83       	std	Y+5, r24	; 0x05
    29ce:	ad cf       	rjmp	.-166    	; 0x292a <main+0x8c>
			  }
			  else if (no_of_trials >= 2)
    29d0:	8c 81       	ldd	r24, Y+4	; 0x04
    29d2:	82 30       	cpi	r24, 0x02	; 2
    29d4:	18 f0       	brcs	.+6      	; 0x29dc <main+0x13e>
			  {
				  state = THIEF_STATE;
    29d6:	85 e0       	ldi	r24, 0x05	; 5
    29d8:	8d 83       	std	Y+5, r24	; 0x05
    29da:	a7 cf       	rjmp	.-178    	; 0x292a <main+0x8c>
			  }
			  else
			  {
				  LCD_displayString("THEIF");
    29dc:	8e e0       	ldi	r24, 0x0E	; 14
    29de:	91 e0       	ldi	r25, 0x01	; 1
    29e0:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_displayString>

				  no_of_trials++;
    29e4:	8c 81       	ldd	r24, Y+4	; 0x04
    29e6:	8f 5f       	subi	r24, 0xFF	; 255
    29e8:	8c 83       	std	Y+4, r24	; 0x04
    29ea:	9f cf       	rjmp	.-194    	; 0x292a <main+0x8c>
			  }
			  break;

		  case OPEN_DOOR_STATE:
			  open_door();
    29ec:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <open_door>
			  //wait
			  state = CLOSE_DOOR_STATE;
    29f0:	83 e0       	ldi	r24, 0x03	; 3
    29f2:	8d 83       	std	Y+5, r24	; 0x05
    29f4:	9a cf       	rjmp	.-204    	; 0x292a <main+0x8c>
			  break;

		  case CLOSE_DOOR_STATE:
			  key++;
    29f6:	8e 81       	ldd	r24, Y+6	; 0x06
    29f8:	8f 5f       	subi	r24, 0xFF	; 255
    29fa:	8e 83       	std	Y+6, r24	; 0x06
		  	  uint8 close = ask_to_close();
    29fc:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <ask_to_close>
    2a00:	89 83       	std	Y+1, r24	; 0x01
		  	  if(close == YES) close_door();
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	81 30       	cpi	r24, 0x01	; 1
    2a06:	11 f4       	brne	.+4      	; 0x2a0c <main+0x16e>
    2a08:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <close_door>
		  	  //wait
		  	  state = OPTIONS_STATE;
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	8d 83       	std	Y+5, r24	; 0x05
    2a10:	8c cf       	rjmp	.-232    	; 0x292a <main+0x8c>
		  break;

		  case THIEF_STATE:
			  LCD_displayString("THEIF");
    2a12:	8e e0       	ldi	r24, 0x0E	; 14
    2a14:	91 e0       	ldi	r25, 0x01	; 1
    2a16:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_displayString>
				UART_sendByte('0');
    2a1a:	80 e3       	ldi	r24, 0x30	; 48
    2a1c:	0e 94 2f 1c 	call	0x385e	; 0x385e <UART_sendByte>
    2a20:	84 cf       	rjmp	.-248    	; 0x292a <main+0x8c>

00002a22 <__vector_9>:
static volatile void (*g_callBackPtr_timer1_COMP)(void) = NULL_PTR;
static volatile void (*g_callBackPtr_timer2_COMP)(void) = NULL_PTR;

/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR(TIMER0_OVF_vect)
{
    2a22:	1f 92       	push	r1
    2a24:	0f 92       	push	r0
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	0f 92       	push	r0
    2a2a:	11 24       	eor	r1, r1
    2a2c:	2f 93       	push	r18
    2a2e:	3f 93       	push	r19
    2a30:	4f 93       	push	r20
    2a32:	5f 93       	push	r21
    2a34:	6f 93       	push	r22
    2a36:	7f 93       	push	r23
    2a38:	8f 93       	push	r24
    2a3a:	9f 93       	push	r25
    2a3c:	af 93       	push	r26
    2a3e:	bf 93       	push	r27
    2a40:	ef 93       	push	r30
    2a42:	ff 93       	push	r31
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0_OVF != NULL_PTR)
    2a4c:	80 91 1c 01 	lds	r24, 0x011C
    2a50:	90 91 1d 01 	lds	r25, 0x011D
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	29 f0       	breq	.+10     	; 0x2a62 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer0_OVF)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2a58:	e0 91 1c 01 	lds	r30, 0x011C
    2a5c:	f0 91 1d 01 	lds	r31, 0x011D
    2a60:	09 95       	icall
	}
}
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	ff 91       	pop	r31
    2a68:	ef 91       	pop	r30
    2a6a:	bf 91       	pop	r27
    2a6c:	af 91       	pop	r26
    2a6e:	9f 91       	pop	r25
    2a70:	8f 91       	pop	r24
    2a72:	7f 91       	pop	r23
    2a74:	6f 91       	pop	r22
    2a76:	5f 91       	pop	r21
    2a78:	4f 91       	pop	r20
    2a7a:	3f 91       	pop	r19
    2a7c:	2f 91       	pop	r18
    2a7e:	0f 90       	pop	r0
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	0f 90       	pop	r0
    2a84:	1f 90       	pop	r1
    2a86:	18 95       	reti

00002a88 <__vector_8>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR(TIMER1_OVF_vect)
{
    2a88:	1f 92       	push	r1
    2a8a:	0f 92       	push	r0
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	0f 92       	push	r0
    2a90:	11 24       	eor	r1, r1
    2a92:	2f 93       	push	r18
    2a94:	3f 93       	push	r19
    2a96:	4f 93       	push	r20
    2a98:	5f 93       	push	r21
    2a9a:	6f 93       	push	r22
    2a9c:	7f 93       	push	r23
    2a9e:	8f 93       	push	r24
    2aa0:	9f 93       	push	r25
    2aa2:	af 93       	push	r26
    2aa4:	bf 93       	push	r27
    2aa6:	ef 93       	push	r30
    2aa8:	ff 93       	push	r31
    2aaa:	df 93       	push	r29
    2aac:	cf 93       	push	r28
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1_OVF != NULL_PTR)
    2ab2:	80 91 1e 01 	lds	r24, 0x011E
    2ab6:	90 91 1f 01 	lds	r25, 0x011F
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	29 f0       	breq	.+10     	; 0x2ac8 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer1_OVF)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2abe:	e0 91 1e 01 	lds	r30, 0x011E
    2ac2:	f0 91 1f 01 	lds	r31, 0x011F
    2ac6:	09 95       	icall
	}
}
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	ff 91       	pop	r31
    2ace:	ef 91       	pop	r30
    2ad0:	bf 91       	pop	r27
    2ad2:	af 91       	pop	r26
    2ad4:	9f 91       	pop	r25
    2ad6:	8f 91       	pop	r24
    2ad8:	7f 91       	pop	r23
    2ada:	6f 91       	pop	r22
    2adc:	5f 91       	pop	r21
    2ade:	4f 91       	pop	r20
    2ae0:	3f 91       	pop	r19
    2ae2:	2f 91       	pop	r18
    2ae4:	0f 90       	pop	r0
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	0f 90       	pop	r0
    2aea:	1f 90       	pop	r1
    2aec:	18 95       	reti

00002aee <__vector_4>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR(TIMER2_OVF_vect)
{
    2aee:	1f 92       	push	r1
    2af0:	0f 92       	push	r0
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	0f 92       	push	r0
    2af6:	11 24       	eor	r1, r1
    2af8:	2f 93       	push	r18
    2afa:	3f 93       	push	r19
    2afc:	4f 93       	push	r20
    2afe:	5f 93       	push	r21
    2b00:	6f 93       	push	r22
    2b02:	7f 93       	push	r23
    2b04:	8f 93       	push	r24
    2b06:	9f 93       	push	r25
    2b08:	af 93       	push	r26
    2b0a:	bf 93       	push	r27
    2b0c:	ef 93       	push	r30
    2b0e:	ff 93       	push	r31
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2_OVF != NULL_PTR)
    2b18:	80 91 20 01 	lds	r24, 0x0120
    2b1c:	90 91 21 01 	lds	r25, 0x0121
    2b20:	00 97       	sbiw	r24, 0x00	; 0
    2b22:	29 f0       	breq	.+10     	; 0x2b2e <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer2_OVF)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2b24:	e0 91 20 01 	lds	r30, 0x0120
    2b28:	f0 91 21 01 	lds	r31, 0x0121
    2b2c:	09 95       	icall
	}
}
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	ff 91       	pop	r31
    2b34:	ef 91       	pop	r30
    2b36:	bf 91       	pop	r27
    2b38:	af 91       	pop	r26
    2b3a:	9f 91       	pop	r25
    2b3c:	8f 91       	pop	r24
    2b3e:	7f 91       	pop	r23
    2b40:	6f 91       	pop	r22
    2b42:	5f 91       	pop	r21
    2b44:	4f 91       	pop	r20
    2b46:	3f 91       	pop	r19
    2b48:	2f 91       	pop	r18
    2b4a:	0f 90       	pop	r0
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	0f 90       	pop	r0
    2b50:	1f 90       	pop	r1
    2b52:	18 95       	reti

00002b54 <__vector_19>:
/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR(TIMER0_COMP_vect)
{
    2b54:	1f 92       	push	r1
    2b56:	0f 92       	push	r0
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	0f 92       	push	r0
    2b5c:	11 24       	eor	r1, r1
    2b5e:	2f 93       	push	r18
    2b60:	3f 93       	push	r19
    2b62:	4f 93       	push	r20
    2b64:	5f 93       	push	r21
    2b66:	6f 93       	push	r22
    2b68:	7f 93       	push	r23
    2b6a:	8f 93       	push	r24
    2b6c:	9f 93       	push	r25
    2b6e:	af 93       	push	r26
    2b70:	bf 93       	push	r27
    2b72:	ef 93       	push	r30
    2b74:	ff 93       	push	r31
    2b76:	df 93       	push	r29
    2b78:	cf 93       	push	r28
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0_COMP != NULL_PTR)
    2b7e:	80 91 22 01 	lds	r24, 0x0122
    2b82:	90 91 23 01 	lds	r25, 0x0123
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	29 f0       	breq	.+10     	; 0x2b94 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer0_COMP)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2b8a:	e0 91 22 01 	lds	r30, 0x0122
    2b8e:	f0 91 23 01 	lds	r31, 0x0123
    2b92:	09 95       	icall
	}
}
    2b94:	cf 91       	pop	r28
    2b96:	df 91       	pop	r29
    2b98:	ff 91       	pop	r31
    2b9a:	ef 91       	pop	r30
    2b9c:	bf 91       	pop	r27
    2b9e:	af 91       	pop	r26
    2ba0:	9f 91       	pop	r25
    2ba2:	8f 91       	pop	r24
    2ba4:	7f 91       	pop	r23
    2ba6:	6f 91       	pop	r22
    2ba8:	5f 91       	pop	r21
    2baa:	4f 91       	pop	r20
    2bac:	3f 91       	pop	r19
    2bae:	2f 91       	pop	r18
    2bb0:	0f 90       	pop	r0
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	0f 90       	pop	r0
    2bb6:	1f 90       	pop	r1
    2bb8:	18 95       	reti

00002bba <__vector_6>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR(TIMER1_COMPA_vect)
{
    2bba:	1f 92       	push	r1
    2bbc:	0f 92       	push	r0
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	0f 92       	push	r0
    2bc2:	11 24       	eor	r1, r1
    2bc4:	2f 93       	push	r18
    2bc6:	3f 93       	push	r19
    2bc8:	4f 93       	push	r20
    2bca:	5f 93       	push	r21
    2bcc:	6f 93       	push	r22
    2bce:	7f 93       	push	r23
    2bd0:	8f 93       	push	r24
    2bd2:	9f 93       	push	r25
    2bd4:	af 93       	push	r26
    2bd6:	bf 93       	push	r27
    2bd8:	ef 93       	push	r30
    2bda:	ff 93       	push	r31
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1_COMP != NULL_PTR)
    2be4:	80 91 24 01 	lds	r24, 0x0124
    2be8:	90 91 25 01 	lds	r25, 0x0125
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	29 f0       	breq	.+10     	; 0x2bfa <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer1_COMP)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2bf0:	e0 91 24 01 	lds	r30, 0x0124
    2bf4:	f0 91 25 01 	lds	r31, 0x0125
    2bf8:	09 95       	icall
	}
}
    2bfa:	cf 91       	pop	r28
    2bfc:	df 91       	pop	r29
    2bfe:	ff 91       	pop	r31
    2c00:	ef 91       	pop	r30
    2c02:	bf 91       	pop	r27
    2c04:	af 91       	pop	r26
    2c06:	9f 91       	pop	r25
    2c08:	8f 91       	pop	r24
    2c0a:	7f 91       	pop	r23
    2c0c:	6f 91       	pop	r22
    2c0e:	5f 91       	pop	r21
    2c10:	4f 91       	pop	r20
    2c12:	3f 91       	pop	r19
    2c14:	2f 91       	pop	r18
    2c16:	0f 90       	pop	r0
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	0f 90       	pop	r0
    2c1c:	1f 90       	pop	r1
    2c1e:	18 95       	reti

00002c20 <__vector_3>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR(TIMER2_COMP_vect)
{
    2c20:	1f 92       	push	r1
    2c22:	0f 92       	push	r0
    2c24:	0f b6       	in	r0, 0x3f	; 63
    2c26:	0f 92       	push	r0
    2c28:	11 24       	eor	r1, r1
    2c2a:	2f 93       	push	r18
    2c2c:	3f 93       	push	r19
    2c2e:	4f 93       	push	r20
    2c30:	5f 93       	push	r21
    2c32:	6f 93       	push	r22
    2c34:	7f 93       	push	r23
    2c36:	8f 93       	push	r24
    2c38:	9f 93       	push	r25
    2c3a:	af 93       	push	r26
    2c3c:	bf 93       	push	r27
    2c3e:	ef 93       	push	r30
    2c40:	ff 93       	push	r31
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2_COMP != NULL_PTR)
    2c4a:	80 91 26 01 	lds	r24, 0x0126
    2c4e:	90 91 27 01 	lds	r25, 0x0127
    2c52:	00 97       	sbiw	r24, 0x00	; 0
    2c54:	29 f0       	breq	.+10     	; 0x2c60 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer2_COMP)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2c56:	e0 91 26 01 	lds	r30, 0x0126
    2c5a:	f0 91 27 01 	lds	r31, 0x0127
    2c5e:	09 95       	icall
	}
}
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	ff 91       	pop	r31
    2c66:	ef 91       	pop	r30
    2c68:	bf 91       	pop	r27
    2c6a:	af 91       	pop	r26
    2c6c:	9f 91       	pop	r25
    2c6e:	8f 91       	pop	r24
    2c70:	7f 91       	pop	r23
    2c72:	6f 91       	pop	r22
    2c74:	5f 91       	pop	r21
    2c76:	4f 91       	pop	r20
    2c78:	3f 91       	pop	r19
    2c7a:	2f 91       	pop	r18
    2c7c:	0f 90       	pop	r0
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	0f 90       	pop	r0
    2c82:	1f 90       	pop	r1
    2c84:	18 95       	reti

00002c86 <Timer_Init>:

uint8 Timer_Init(TIMER_Config* config)
{
    2c86:	df 93       	push	r29
    2c88:	cf 93       	push	r28
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	67 97       	sbiw	r28, 0x17	; 23
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	9a 83       	std	Y+2, r25	; 0x02
    2c9c:	89 83       	std	Y+1, r24	; 0x01

	switch(config->timer_id){
    2c9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2ca0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ca2:	80 81       	ld	r24, Z
    2ca4:	28 2f       	mov	r18, r24
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	3f 8b       	std	Y+23, r19	; 0x17
    2caa:	2e 8b       	std	Y+22, r18	; 0x16
    2cac:	8e 89       	ldd	r24, Y+22	; 0x16
    2cae:	9f 89       	ldd	r25, Y+23	; 0x17
    2cb0:	81 30       	cpi	r24, 0x01	; 1
    2cb2:	91 05       	cpc	r25, r1
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <Timer_Init+0x32>
    2cb6:	f9 c0       	rjmp	.+498    	; 0x2eaa <Timer_Init+0x224>
    2cb8:	2e 89       	ldd	r18, Y+22	; 0x16
    2cba:	3f 89       	ldd	r19, Y+23	; 0x17
    2cbc:	22 30       	cpi	r18, 0x02	; 2
    2cbe:	31 05       	cpc	r19, r1
    2cc0:	09 f4       	brne	.+2      	; 0x2cc4 <Timer_Init+0x3e>
    2cc2:	ff c1       	rjmp	.+1022   	; 0x30c2 <Timer_Init+0x43c>
    2cc4:	8e 89       	ldd	r24, Y+22	; 0x16
    2cc6:	9f 89       	ldd	r25, Y+23	; 0x17
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	09 f0       	breq	.+2      	; 0x2cce <Timer_Init+0x48>
    2ccc:	e7 c2       	rjmp	.+1486   	; 0x329c <Timer_Init+0x616>

	/*********************TIMER0******************/
	case TIMER0_ID:
		/* Set FOC PIN as NON PWM MODE */
		SET_BIT(TCCR0,FOC0);
    2cce:	a3 e5       	ldi	r26, 0x53	; 83
    2cd0:	b0 e0       	ldi	r27, 0x00	; 0
    2cd2:	e3 e5       	ldi	r30, 0x53	; 83
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	80 81       	ld	r24, Z
    2cd8:	80 68       	ori	r24, 0x80	; 128
    2cda:	8c 93       	st	X, r24

		/*Configure timer mode*/
		switch(config->timer_mode)
    2cdc:	e9 81       	ldd	r30, Y+1	; 0x01
    2cde:	fa 81       	ldd	r31, Y+2	; 0x02
    2ce0:	81 81       	ldd	r24, Z+1	; 0x01
    2ce2:	28 2f       	mov	r18, r24
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	3d 8b       	std	Y+21, r19	; 0x15
    2ce8:	2c 8b       	std	Y+20, r18	; 0x14
    2cea:	8c 89       	ldd	r24, Y+20	; 0x14
    2cec:	9d 89       	ldd	r25, Y+21	; 0x15
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	31 f0       	breq	.+12     	; 0x2cfe <Timer_Init+0x78>
    2cf2:	2c 89       	ldd	r18, Y+20	; 0x14
    2cf4:	3d 89       	ldd	r19, Y+21	; 0x15
    2cf6:	22 30       	cpi	r18, 0x02	; 2
    2cf8:	31 05       	cpc	r19, r1
    2cfa:	81 f0       	breq	.+32     	; 0x2d1c <Timer_Init+0x96>
    2cfc:	1e c0       	rjmp	.+60     	; 0x2d3a <Timer_Init+0xb4>
		{
			case OVERFLOW_MODE :
				CLEAR_BIT(TCCR0,WGM00);
    2cfe:	a3 e5       	ldi	r26, 0x53	; 83
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	e3 e5       	ldi	r30, 0x53	; 83
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	80 81       	ld	r24, Z
    2d08:	8f 7b       	andi	r24, 0xBF	; 191
    2d0a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,WGM01);
    2d0c:	a3 e5       	ldi	r26, 0x53	; 83
    2d0e:	b0 e0       	ldi	r27, 0x00	; 0
    2d10:	e3 e5       	ldi	r30, 0x53	; 83
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	87 7f       	andi	r24, 0xF7	; 247
    2d18:	8c 93       	st	X, r24
    2d1a:	11 c0       	rjmp	.+34     	; 0x2d3e <Timer_Init+0xb8>
				break;

			case COMPARE_MODE :
				CLEAR_BIT(TCCR0,WGM00);
    2d1c:	a3 e5       	ldi	r26, 0x53	; 83
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	e3 e5       	ldi	r30, 0x53	; 83
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	8f 7b       	andi	r24, 0xBF	; 191
    2d28:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    2d2a:	a3 e5       	ldi	r26, 0x53	; 83
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e3 e5       	ldi	r30, 0x53	; 83
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	88 60       	ori	r24, 0x08	; 8
    2d36:	8c 93       	st	X, r24
    2d38:	02 c0       	rjmp	.+4      	; 0x2d3e <Timer_Init+0xb8>
				break;
			default :
				return 0;
    2d3a:	1b 8a       	std	Y+19, r1	; 0x13
    2d3c:	b3 c2       	rjmp	.+1382   	; 0x32a4 <Timer_Init+0x61e>
		}

		/* Configure OC PIN Mode */
		switch(config->oc_mode)
    2d3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d40:	fa 81       	ldd	r31, Y+2	; 0x02
    2d42:	82 81       	ldd	r24, Z+2	; 0x02
    2d44:	28 2f       	mov	r18, r24
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	3a 8b       	std	Y+18, r19	; 0x12
    2d4a:	29 8b       	std	Y+17, r18	; 0x11
    2d4c:	89 89       	ldd	r24, Y+17	; 0x11
    2d4e:	9a 89       	ldd	r25, Y+18	; 0x12
    2d50:	81 30       	cpi	r24, 0x01	; 1
    2d52:	91 05       	cpc	r25, r1
    2d54:	21 f1       	breq	.+72     	; 0x2d9e <Timer_Init+0x118>
    2d56:	29 89       	ldd	r18, Y+17	; 0x11
    2d58:	3a 89       	ldd	r19, Y+18	; 0x12
    2d5a:	22 30       	cpi	r18, 0x02	; 2
    2d5c:	31 05       	cpc	r19, r1
    2d5e:	2c f4       	brge	.+10     	; 0x2d6a <Timer_Init+0xe4>
    2d60:	89 89       	ldd	r24, Y+17	; 0x11
    2d62:	9a 89       	ldd	r25, Y+18	; 0x12
    2d64:	00 97       	sbiw	r24, 0x00	; 0
    2d66:	61 f0       	breq	.+24     	; 0x2d80 <Timer_Init+0xfa>
    2d68:	5c c0       	rjmp	.+184    	; 0x2e22 <Timer_Init+0x19c>
    2d6a:	29 89       	ldd	r18, Y+17	; 0x11
    2d6c:	3a 89       	ldd	r19, Y+18	; 0x12
    2d6e:	22 30       	cpi	r18, 0x02	; 2
    2d70:	31 05       	cpc	r19, r1
    2d72:	59 f1       	breq	.+86     	; 0x2dca <Timer_Init+0x144>
    2d74:	89 89       	ldd	r24, Y+17	; 0x11
    2d76:	9a 89       	ldd	r25, Y+18	; 0x12
    2d78:	83 30       	cpi	r24, 0x03	; 3
    2d7a:	91 05       	cpc	r25, r1
    2d7c:	e1 f1       	breq	.+120    	; 0x2df6 <Timer_Init+0x170>
    2d7e:	51 c0       	rjmp	.+162    	; 0x2e22 <Timer_Init+0x19c>
		{
			case DISCONNECTED:
				CLEAR_BIT(TCCR0,COM00);
    2d80:	a3 e5       	ldi	r26, 0x53	; 83
    2d82:	b0 e0       	ldi	r27, 0x00	; 0
    2d84:	e3 e5       	ldi	r30, 0x53	; 83
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	8f 7e       	andi	r24, 0xEF	; 239
    2d8c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,COM01);
    2d8e:	a3 e5       	ldi	r26, 0x53	; 83
    2d90:	b0 e0       	ldi	r27, 0x00	; 0
    2d92:	e3 e5       	ldi	r30, 0x53	; 83
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 81       	ld	r24, Z
    2d98:	8f 7d       	andi	r24, 0xDF	; 223
    2d9a:	8c 93       	st	X, r24
    2d9c:	44 c0       	rjmp	.+136    	; 0x2e26 <Timer_Init+0x1a0>
				break;
			case TOGGLE:
				SET_BIT(DDRB,PB3);
    2d9e:	a7 e3       	ldi	r26, 0x37	; 55
    2da0:	b0 e0       	ldi	r27, 0x00	; 0
    2da2:	e7 e3       	ldi	r30, 0x37	; 55
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	80 81       	ld	r24, Z
    2da8:	88 60       	ori	r24, 0x08	; 8
    2daa:	8c 93       	st	X, r24
				SET_BIT(TCCR0,COM00);
    2dac:	a3 e5       	ldi	r26, 0x53	; 83
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	e3 e5       	ldi	r30, 0x53	; 83
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 81       	ld	r24, Z
    2db6:	80 61       	ori	r24, 0x10	; 16
    2db8:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,COM01);
    2dba:	a3 e5       	ldi	r26, 0x53	; 83
    2dbc:	b0 e0       	ldi	r27, 0x00	; 0
    2dbe:	e3 e5       	ldi	r30, 0x53	; 83
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	80 81       	ld	r24, Z
    2dc4:	8f 7d       	andi	r24, 0xDF	; 223
    2dc6:	8c 93       	st	X, r24
    2dc8:	2e c0       	rjmp	.+92     	; 0x2e26 <Timer_Init+0x1a0>
				break;
			case CLEAR:
				SET_BIT(DDRB,PB3);
    2dca:	a7 e3       	ldi	r26, 0x37	; 55
    2dcc:	b0 e0       	ldi	r27, 0x00	; 0
    2dce:	e7 e3       	ldi	r30, 0x37	; 55
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	80 81       	ld	r24, Z
    2dd4:	88 60       	ori	r24, 0x08	; 8
    2dd6:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,COM00);
    2dd8:	a3 e5       	ldi	r26, 0x53	; 83
    2dda:	b0 e0       	ldi	r27, 0x00	; 0
    2ddc:	e3 e5       	ldi	r30, 0x53	; 83
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	8f 7e       	andi	r24, 0xEF	; 239
    2de4:	8c 93       	st	X, r24
				SET_BIT(TCCR0,COM01);
    2de6:	a3 e5       	ldi	r26, 0x53	; 83
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	e3 e5       	ldi	r30, 0x53	; 83
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	80 62       	ori	r24, 0x20	; 32
    2df2:	8c 93       	st	X, r24
    2df4:	18 c0       	rjmp	.+48     	; 0x2e26 <Timer_Init+0x1a0>
				break;
			case SET:
				SET_BIT(DDRB,PB3);
    2df6:	a7 e3       	ldi	r26, 0x37	; 55
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	e7 e3       	ldi	r30, 0x37	; 55
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	80 81       	ld	r24, Z
    2e00:	88 60       	ori	r24, 0x08	; 8
    2e02:	8c 93       	st	X, r24
				SET_BIT(TCCR0,COM00);
    2e04:	a3 e5       	ldi	r26, 0x53	; 83
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	e3 e5       	ldi	r30, 0x53	; 83
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	80 61       	ori	r24, 0x10	; 16
    2e10:	8c 93       	st	X, r24
				SET_BIT(TCCR0,COM01);
    2e12:	a3 e5       	ldi	r26, 0x53	; 83
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	e3 e5       	ldi	r30, 0x53	; 83
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	80 62       	ori	r24, 0x20	; 32
    2e1e:	8c 93       	st	X, r24
    2e20:	02 c0       	rjmp	.+4      	; 0x2e26 <Timer_Init+0x1a0>
				break;
			default :
				return 0;
    2e22:	1b 8a       	std	Y+19, r1	; 0x13
    2e24:	3f c2       	rjmp	.+1150   	; 0x32a4 <Timer_Init+0x61e>
		}

		/* Clock Select */
		TCCR0 = (TCCR0 & 0xF8) | (config->timer_clk & 0x07);
    2e26:	a3 e5       	ldi	r26, 0x53	; 83
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	e3 e5       	ldi	r30, 0x53	; 83
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	98 2f       	mov	r25, r24
    2e32:	98 7f       	andi	r25, 0xF8	; 248
    2e34:	e9 81       	ldd	r30, Y+1	; 0x01
    2e36:	fa 81       	ldd	r31, Y+2	; 0x02
    2e38:	83 81       	ldd	r24, Z+3	; 0x03
    2e3a:	87 70       	andi	r24, 0x07	; 7
    2e3c:	89 2b       	or	r24, r25
    2e3e:	8c 93       	st	X, r24

		/*	Set The initial value */
		TCNT0 = config->inital_value;
    2e40:	a2 e5       	ldi	r26, 0x52	; 82
    2e42:	b0 e0       	ldi	r27, 0x00	; 0
    2e44:	e9 81       	ldd	r30, Y+1	; 0x01
    2e46:	fa 81       	ldd	r31, Y+2	; 0x02
    2e48:	85 81       	ldd	r24, Z+5	; 0x05
    2e4a:	96 81       	ldd	r25, Z+6	; 0x06
    2e4c:	8c 93       	st	X, r24

		/* Set the compare value */
		OCR0 = config->compare_value;
    2e4e:	ac e5       	ldi	r26, 0x5C	; 92
    2e50:	b0 e0       	ldi	r27, 0x00	; 0
    2e52:	e9 81       	ldd	r30, Y+1	; 0x01
    2e54:	fa 81       	ldd	r31, Y+2	; 0x02
    2e56:	87 81       	ldd	r24, Z+7	; 0x07
    2e58:	90 85       	ldd	r25, Z+8	; 0x08
    2e5a:	8c 93       	st	X, r24

		/*Set the interrupt Configuarion */
		if(config->interrupt)
    2e5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e60:	84 81       	ldd	r24, Z+4	; 0x04
    2e62:	88 23       	and	r24, r24
    2e64:	09 f4       	brne	.+2      	; 0x2e68 <Timer_Init+0x1e2>
    2e66:	1c c2       	rjmp	.+1080   	; 0x32a0 <Timer_Init+0x61a>
		{
			switch(config->timer_mode)
    2e68:	e9 81       	ldd	r30, Y+1	; 0x01
    2e6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e6c:	81 81       	ldd	r24, Z+1	; 0x01
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	38 8b       	std	Y+16, r19	; 0x10
    2e74:	2f 87       	std	Y+15, r18	; 0x0f
    2e76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e78:	98 89       	ldd	r25, Y+16	; 0x10
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	31 f0       	breq	.+12     	; 0x2e8a <Timer_Init+0x204>
    2e7e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2e80:	38 89       	ldd	r19, Y+16	; 0x10
    2e82:	22 30       	cpi	r18, 0x02	; 2
    2e84:	31 05       	cpc	r19, r1
    2e86:	49 f0       	breq	.+18     	; 0x2e9a <Timer_Init+0x214>
    2e88:	0b c2       	rjmp	.+1046   	; 0x32a0 <Timer_Init+0x61a>
			{
			case OVERFLOW_MODE :
				SET_BIT(TIMSK,TOIE0);
    2e8a:	a9 e5       	ldi	r26, 0x59	; 89
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	e9 e5       	ldi	r30, 0x59	; 89
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	81 60       	ori	r24, 0x01	; 1
    2e96:	8c 93       	st	X, r24
    2e98:	03 c2       	rjmp	.+1030   	; 0x32a0 <Timer_Init+0x61a>
				break;
			case COMPARE_MODE :
				SET_BIT(TIMSK,OCIE0);
    2e9a:	a9 e5       	ldi	r26, 0x59	; 89
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	e9 e5       	ldi	r30, 0x59	; 89
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	82 60       	ori	r24, 0x02	; 2
    2ea6:	8c 93       	st	X, r24
    2ea8:	fb c1       	rjmp	.+1014   	; 0x32a0 <Timer_Init+0x61a>

	/*********************TIMER 1******************/
	case TIMER1_ID:

		/* Set FOC PIN as NON PWM MODE */
		SET_BIT(TCCR1A,FOC1A);
    2eaa:	af e4       	ldi	r26, 0x4F	; 79
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	ef e4       	ldi	r30, 0x4F	; 79
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	88 60       	ori	r24, 0x08	; 8
    2eb6:	8c 93       	st	X, r24

		/*Configure timer mode*/
		switch(config->timer_mode)
    2eb8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eba:	fa 81       	ldd	r31, Y+2	; 0x02
    2ebc:	81 81       	ldd	r24, Z+1	; 0x01
    2ebe:	28 2f       	mov	r18, r24
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	3e 87       	std	Y+14, r19	; 0x0e
    2ec4:	2d 87       	std	Y+13, r18	; 0x0d
    2ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eca:	00 97       	sbiw	r24, 0x00	; 0
    2ecc:	31 f0       	breq	.+12     	; 0x2eda <Timer_Init+0x254>
    2ece:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ed0:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ed2:	22 30       	cpi	r18, 0x02	; 2
    2ed4:	31 05       	cpc	r19, r1
    2ed6:	f1 f0       	breq	.+60     	; 0x2f14 <Timer_Init+0x28e>
    2ed8:	3a c0       	rjmp	.+116    	; 0x2f4e <Timer_Init+0x2c8>
		{
			case OVERFLOW_MODE :
				CLEAR_BIT(TCCR1A,WGM10);
    2eda:	af e4       	ldi	r26, 0x4F	; 79
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	ef e4       	ldi	r30, 0x4F	; 79
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	80 81       	ld	r24, Z
    2ee4:	8e 7f       	andi	r24, 0xFE	; 254
    2ee6:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,WGM11);
    2ee8:	af e4       	ldi	r26, 0x4F	; 79
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	ef e4       	ldi	r30, 0x4F	; 79
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	8d 7f       	andi	r24, 0xFD	; 253
    2ef4:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM12);
    2ef6:	ae e4       	ldi	r26, 0x4E	; 78
    2ef8:	b0 e0       	ldi	r27, 0x00	; 0
    2efa:	ee e4       	ldi	r30, 0x4E	; 78
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	87 7f       	andi	r24, 0xF7	; 247
    2f02:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM13);
    2f04:	ae e4       	ldi	r26, 0x4E	; 78
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	ee e4       	ldi	r30, 0x4E	; 78
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	8f 7e       	andi	r24, 0xEF	; 239
    2f10:	8c 93       	st	X, r24
    2f12:	1f c0       	rjmp	.+62     	; 0x2f52 <Timer_Init+0x2cc>
				break;

			case COMPARE_MODE :
				CLEAR_BIT(TCCR1A,WGM10);
    2f14:	af e4       	ldi	r26, 0x4F	; 79
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	ef e4       	ldi	r30, 0x4F	; 79
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	80 81       	ld	r24, Z
    2f1e:	8e 7f       	andi	r24, 0xFE	; 254
    2f20:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,WGM11);
    2f22:	af e4       	ldi	r26, 0x4F	; 79
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	ef e4       	ldi	r30, 0x4F	; 79
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	8d 7f       	andi	r24, 0xFD	; 253
    2f2e:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    2f30:	ae e4       	ldi	r26, 0x4E	; 78
    2f32:	b0 e0       	ldi	r27, 0x00	; 0
    2f34:	ee e4       	ldi	r30, 0x4E	; 78
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	88 60       	ori	r24, 0x08	; 8
    2f3c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM13);
    2f3e:	ae e4       	ldi	r26, 0x4E	; 78
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	ee e4       	ldi	r30, 0x4E	; 78
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	8f 7e       	andi	r24, 0xEF	; 239
    2f4a:	8c 93       	st	X, r24
    2f4c:	02 c0       	rjmp	.+4      	; 0x2f52 <Timer_Init+0x2cc>
				break;

			default :
				return 0;
    2f4e:	1b 8a       	std	Y+19, r1	; 0x13
    2f50:	a9 c1       	rjmp	.+850    	; 0x32a4 <Timer_Init+0x61e>
		}

		/* Clock Select */
		TCCR1B = (TCCR1B & 0xF8) | (config->timer_clk & 0x07);
    2f52:	ae e4       	ldi	r26, 0x4E	; 78
    2f54:	b0 e0       	ldi	r27, 0x00	; 0
    2f56:	ee e4       	ldi	r30, 0x4E	; 78
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	80 81       	ld	r24, Z
    2f5c:	98 2f       	mov	r25, r24
    2f5e:	98 7f       	andi	r25, 0xF8	; 248
    2f60:	e9 81       	ldd	r30, Y+1	; 0x01
    2f62:	fa 81       	ldd	r31, Y+2	; 0x02
    2f64:	83 81       	ldd	r24, Z+3	; 0x03
    2f66:	87 70       	andi	r24, 0x07	; 7
    2f68:	89 2b       	or	r24, r25
    2f6a:	8c 93       	st	X, r24

		/*	Set The initial value */
		TCNT1 = config->inital_value;
    2f6c:	ac e4       	ldi	r26, 0x4C	; 76
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	e9 81       	ldd	r30, Y+1	; 0x01
    2f72:	fa 81       	ldd	r31, Y+2	; 0x02
    2f74:	85 81       	ldd	r24, Z+5	; 0x05
    2f76:	96 81       	ldd	r25, Z+6	; 0x06
    2f78:	11 96       	adiw	r26, 0x01	; 1
    2f7a:	9c 93       	st	X, r25
    2f7c:	8e 93       	st	-X, r24

		/* Set the compare value */
		OCR1A = config->compare_value;
    2f7e:	aa e4       	ldi	r26, 0x4A	; 74
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
    2f82:	e9 81       	ldd	r30, Y+1	; 0x01
    2f84:	fa 81       	ldd	r31, Y+2	; 0x02
    2f86:	87 81       	ldd	r24, Z+7	; 0x07
    2f88:	90 85       	ldd	r25, Z+8	; 0x08
    2f8a:	11 96       	adiw	r26, 0x01	; 1
    2f8c:	9c 93       	st	X, r25
    2f8e:	8e 93       	st	-X, r24

		/*Set the interrupt Configuarion */
		if(config->interrupt)
    2f90:	e9 81       	ldd	r30, Y+1	; 0x01
    2f92:	fa 81       	ldd	r31, Y+2	; 0x02
    2f94:	84 81       	ldd	r24, Z+4	; 0x04
    2f96:	88 23       	and	r24, r24
    2f98:	01 f1       	breq	.+64     	; 0x2fda <Timer_Init+0x354>
		{
			switch(config->timer_mode)
    2f9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f9e:	81 81       	ldd	r24, Z+1	; 0x01
    2fa0:	28 2f       	mov	r18, r24
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	3c 87       	std	Y+12, r19	; 0x0c
    2fa6:	2b 87       	std	Y+11, r18	; 0x0b
    2fa8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2faa:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fac:	00 97       	sbiw	r24, 0x00	; 0
    2fae:	31 f0       	breq	.+12     	; 0x2fbc <Timer_Init+0x336>
    2fb0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2fb2:	3c 85       	ldd	r19, Y+12	; 0x0c
    2fb4:	22 30       	cpi	r18, 0x02	; 2
    2fb6:	31 05       	cpc	r19, r1
    2fb8:	49 f0       	breq	.+18     	; 0x2fcc <Timer_Init+0x346>
    2fba:	0f c0       	rjmp	.+30     	; 0x2fda <Timer_Init+0x354>
			{
			case OVERFLOW_MODE :
				SET_BIT(TIMSK,TOIE1);
    2fbc:	a9 e5       	ldi	r26, 0x59	; 89
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	e9 e5       	ldi	r30, 0x59	; 89
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	84 60       	ori	r24, 0x04	; 4
    2fc8:	8c 93       	st	X, r24
    2fca:	07 c0       	rjmp	.+14     	; 0x2fda <Timer_Init+0x354>
				break;
			case COMPARE_MODE :
				SET_BIT(TIMSK,OCIE1A);
    2fcc:	a9 e5       	ldi	r26, 0x59	; 89
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	e9 e5       	ldi	r30, 0x59	; 89
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	80 81       	ld	r24, Z
    2fd6:	80 61       	ori	r24, 0x10	; 16
    2fd8:	8c 93       	st	X, r24
				break;
			}
		}

		/* Configure OC PIN Mode */
		switch(config->oc_mode)
    2fda:	e9 81       	ldd	r30, Y+1	; 0x01
    2fdc:	fa 81       	ldd	r31, Y+2	; 0x02
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	28 2f       	mov	r18, r24
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	3a 87       	std	Y+10, r19	; 0x0a
    2fe6:	29 87       	std	Y+9, r18	; 0x09
    2fe8:	89 85       	ldd	r24, Y+9	; 0x09
    2fea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fec:	81 30       	cpi	r24, 0x01	; 1
    2fee:	91 05       	cpc	r25, r1
    2ff0:	21 f1       	breq	.+72     	; 0x303a <Timer_Init+0x3b4>
    2ff2:	29 85       	ldd	r18, Y+9	; 0x09
    2ff4:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ff6:	22 30       	cpi	r18, 0x02	; 2
    2ff8:	31 05       	cpc	r19, r1
    2ffa:	2c f4       	brge	.+10     	; 0x3006 <Timer_Init+0x380>
    2ffc:	89 85       	ldd	r24, Y+9	; 0x09
    2ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3000:	00 97       	sbiw	r24, 0x00	; 0
    3002:	61 f0       	breq	.+24     	; 0x301c <Timer_Init+0x396>
    3004:	5c c0       	rjmp	.+184    	; 0x30be <Timer_Init+0x438>
    3006:	29 85       	ldd	r18, Y+9	; 0x09
    3008:	3a 85       	ldd	r19, Y+10	; 0x0a
    300a:	22 30       	cpi	r18, 0x02	; 2
    300c:	31 05       	cpc	r19, r1
    300e:	59 f1       	breq	.+86     	; 0x3066 <Timer_Init+0x3e0>
    3010:	89 85       	ldd	r24, Y+9	; 0x09
    3012:	9a 85       	ldd	r25, Y+10	; 0x0a
    3014:	83 30       	cpi	r24, 0x03	; 3
    3016:	91 05       	cpc	r25, r1
    3018:	e1 f1       	breq	.+120    	; 0x3092 <Timer_Init+0x40c>
    301a:	51 c0       	rjmp	.+162    	; 0x30be <Timer_Init+0x438>
		{
			case DISCONNECTED:
				CLEAR_BIT(TCCR1A,COM1A0);
    301c:	af e4       	ldi	r26, 0x4F	; 79
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	ef e4       	ldi	r30, 0x4F	; 79
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	8f 7b       	andi	r24, 0xBF	; 191
    3028:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,COM1A1);
    302a:	af e4       	ldi	r26, 0x4F	; 79
    302c:	b0 e0       	ldi	r27, 0x00	; 0
    302e:	ef e4       	ldi	r30, 0x4F	; 79
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	80 81       	ld	r24, Z
    3034:	8f 77       	andi	r24, 0x7F	; 127
    3036:	8c 93       	st	X, r24
    3038:	33 c1       	rjmp	.+614    	; 0x32a0 <Timer_Init+0x61a>
				break;
			case TOGGLE:
				SET_BIT(DDRD,PD5);
    303a:	a1 e3       	ldi	r26, 0x31	; 49
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	e1 e3       	ldi	r30, 0x31	; 49
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	80 62       	ori	r24, 0x20	; 32
    3046:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,COM1A0);
    3048:	af e4       	ldi	r26, 0x4F	; 79
    304a:	b0 e0       	ldi	r27, 0x00	; 0
    304c:	ef e4       	ldi	r30, 0x4F	; 79
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	80 64       	ori	r24, 0x40	; 64
    3054:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,COM1A1);
    3056:	af e4       	ldi	r26, 0x4F	; 79
    3058:	b0 e0       	ldi	r27, 0x00	; 0
    305a:	ef e4       	ldi	r30, 0x4F	; 79
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	80 81       	ld	r24, Z
    3060:	8f 77       	andi	r24, 0x7F	; 127
    3062:	8c 93       	st	X, r24
    3064:	1d c1       	rjmp	.+570    	; 0x32a0 <Timer_Init+0x61a>
				break;
			case CLEAR:
				SET_BIT(DDRD,PD5);
    3066:	a1 e3       	ldi	r26, 0x31	; 49
    3068:	b0 e0       	ldi	r27, 0x00	; 0
    306a:	e1 e3       	ldi	r30, 0x31	; 49
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	80 62       	ori	r24, 0x20	; 32
    3072:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,COM1A0);
    3074:	af e4       	ldi	r26, 0x4F	; 79
    3076:	b0 e0       	ldi	r27, 0x00	; 0
    3078:	ef e4       	ldi	r30, 0x4F	; 79
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	80 81       	ld	r24, Z
    307e:	8f 7b       	andi	r24, 0xBF	; 191
    3080:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,COM1A1);
    3082:	af e4       	ldi	r26, 0x4F	; 79
    3084:	b0 e0       	ldi	r27, 0x00	; 0
    3086:	ef e4       	ldi	r30, 0x4F	; 79
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	80 81       	ld	r24, Z
    308c:	80 68       	ori	r24, 0x80	; 128
    308e:	8c 93       	st	X, r24
    3090:	07 c1       	rjmp	.+526    	; 0x32a0 <Timer_Init+0x61a>
				break;
			case SET:
				SET_BIT(DDRD,PD5);
    3092:	a1 e3       	ldi	r26, 0x31	; 49
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	e1 e3       	ldi	r30, 0x31	; 49
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	80 81       	ld	r24, Z
    309c:	80 62       	ori	r24, 0x20	; 32
    309e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,COM1A0);
    30a0:	af e4       	ldi	r26, 0x4F	; 79
    30a2:	b0 e0       	ldi	r27, 0x00	; 0
    30a4:	ef e4       	ldi	r30, 0x4F	; 79
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 81       	ld	r24, Z
    30aa:	80 64       	ori	r24, 0x40	; 64
    30ac:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,COM1A1);
    30ae:	af e4       	ldi	r26, 0x4F	; 79
    30b0:	b0 e0       	ldi	r27, 0x00	; 0
    30b2:	ef e4       	ldi	r30, 0x4F	; 79
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	80 81       	ld	r24, Z
    30b8:	80 68       	ori	r24, 0x80	; 128
    30ba:	8c 93       	st	X, r24
    30bc:	f1 c0       	rjmp	.+482    	; 0x32a0 <Timer_Init+0x61a>
				break;
			default :
				return 0;
    30be:	1b 8a       	std	Y+19, r1	; 0x13
    30c0:	f1 c0       	rjmp	.+482    	; 0x32a4 <Timer_Init+0x61e>
		break;

	/*********************TIMER 2******************/
	case TIMER2_ID:
			/* Set FOC PIN as NON PWM MODE */
			SET_BIT(TCCR2,FOC2);
    30c2:	a5 e4       	ldi	r26, 0x45	; 69
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
    30c6:	e5 e4       	ldi	r30, 0x45	; 69
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	80 81       	ld	r24, Z
    30cc:	80 68       	ori	r24, 0x80	; 128
    30ce:	8c 93       	st	X, r24

			/*Configure timer mode*/
			switch(config->timer_mode)
    30d0:	e9 81       	ldd	r30, Y+1	; 0x01
    30d2:	fa 81       	ldd	r31, Y+2	; 0x02
    30d4:	81 81       	ldd	r24, Z+1	; 0x01
    30d6:	28 2f       	mov	r18, r24
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	38 87       	std	Y+8, r19	; 0x08
    30dc:	2f 83       	std	Y+7, r18	; 0x07
    30de:	8f 81       	ldd	r24, Y+7	; 0x07
    30e0:	98 85       	ldd	r25, Y+8	; 0x08
    30e2:	00 97       	sbiw	r24, 0x00	; 0
    30e4:	31 f0       	breq	.+12     	; 0x30f2 <Timer_Init+0x46c>
    30e6:	2f 81       	ldd	r18, Y+7	; 0x07
    30e8:	38 85       	ldd	r19, Y+8	; 0x08
    30ea:	22 30       	cpi	r18, 0x02	; 2
    30ec:	31 05       	cpc	r19, r1
    30ee:	81 f0       	breq	.+32     	; 0x3110 <Timer_Init+0x48a>
    30f0:	1e c0       	rjmp	.+60     	; 0x312e <Timer_Init+0x4a8>
			{
				case OVERFLOW_MODE :
					CLEAR_BIT(TCCR2,WGM20);
    30f2:	a5 e4       	ldi	r26, 0x45	; 69
    30f4:	b0 e0       	ldi	r27, 0x00	; 0
    30f6:	e5 e4       	ldi	r30, 0x45	; 69
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	80 81       	ld	r24, Z
    30fc:	8f 7b       	andi	r24, 0xBF	; 191
    30fe:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR2,WGM21);
    3100:	a5 e4       	ldi	r26, 0x45	; 69
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	e5 e4       	ldi	r30, 0x45	; 69
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	80 81       	ld	r24, Z
    310a:	87 7f       	andi	r24, 0xF7	; 247
    310c:	8c 93       	st	X, r24
    310e:	11 c0       	rjmp	.+34     	; 0x3132 <Timer_Init+0x4ac>
					break;

				case COMPARE_MODE :
					CLEAR_BIT(TCCR2,WGM20);
    3110:	a5 e4       	ldi	r26, 0x45	; 69
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	e5 e4       	ldi	r30, 0x45	; 69
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	80 81       	ld	r24, Z
    311a:	8f 7b       	andi	r24, 0xBF	; 191
    311c:	8c 93       	st	X, r24
					SET_BIT(TCCR2,WGM21);
    311e:	a5 e4       	ldi	r26, 0x45	; 69
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	e5 e4       	ldi	r30, 0x45	; 69
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 81       	ld	r24, Z
    3128:	88 60       	ori	r24, 0x08	; 8
    312a:	8c 93       	st	X, r24
    312c:	02 c0       	rjmp	.+4      	; 0x3132 <Timer_Init+0x4ac>
					break;
				default :
					return 0;
    312e:	1b 8a       	std	Y+19, r1	; 0x13
    3130:	b9 c0       	rjmp	.+370    	; 0x32a4 <Timer_Init+0x61e>
			}

			/* Configure OC PIN Mode */
			switch(config->oc_mode)
    3132:	e9 81       	ldd	r30, Y+1	; 0x01
    3134:	fa 81       	ldd	r31, Y+2	; 0x02
    3136:	82 81       	ldd	r24, Z+2	; 0x02
    3138:	28 2f       	mov	r18, r24
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	3e 83       	std	Y+6, r19	; 0x06
    313e:	2d 83       	std	Y+5, r18	; 0x05
    3140:	8d 81       	ldd	r24, Y+5	; 0x05
    3142:	9e 81       	ldd	r25, Y+6	; 0x06
    3144:	81 30       	cpi	r24, 0x01	; 1
    3146:	91 05       	cpc	r25, r1
    3148:	21 f1       	breq	.+72     	; 0x3192 <Timer_Init+0x50c>
    314a:	2d 81       	ldd	r18, Y+5	; 0x05
    314c:	3e 81       	ldd	r19, Y+6	; 0x06
    314e:	22 30       	cpi	r18, 0x02	; 2
    3150:	31 05       	cpc	r19, r1
    3152:	2c f4       	brge	.+10     	; 0x315e <Timer_Init+0x4d8>
    3154:	8d 81       	ldd	r24, Y+5	; 0x05
    3156:	9e 81       	ldd	r25, Y+6	; 0x06
    3158:	00 97       	sbiw	r24, 0x00	; 0
    315a:	61 f0       	breq	.+24     	; 0x3174 <Timer_Init+0x4ee>
    315c:	5c c0       	rjmp	.+184    	; 0x3216 <Timer_Init+0x590>
    315e:	2d 81       	ldd	r18, Y+5	; 0x05
    3160:	3e 81       	ldd	r19, Y+6	; 0x06
    3162:	22 30       	cpi	r18, 0x02	; 2
    3164:	31 05       	cpc	r19, r1
    3166:	59 f1       	breq	.+86     	; 0x31be <Timer_Init+0x538>
    3168:	8d 81       	ldd	r24, Y+5	; 0x05
    316a:	9e 81       	ldd	r25, Y+6	; 0x06
    316c:	83 30       	cpi	r24, 0x03	; 3
    316e:	91 05       	cpc	r25, r1
    3170:	e1 f1       	breq	.+120    	; 0x31ea <Timer_Init+0x564>
    3172:	51 c0       	rjmp	.+162    	; 0x3216 <Timer_Init+0x590>
			{
				case DISCONNECTED:
					CLEAR_BIT(TCCR2,COM20);
    3174:	a5 e4       	ldi	r26, 0x45	; 69
    3176:	b0 e0       	ldi	r27, 0x00	; 0
    3178:	e5 e4       	ldi	r30, 0x45	; 69
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	80 81       	ld	r24, Z
    317e:	8f 7e       	andi	r24, 0xEF	; 239
    3180:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR2,COM21);
    3182:	a5 e4       	ldi	r26, 0x45	; 69
    3184:	b0 e0       	ldi	r27, 0x00	; 0
    3186:	e5 e4       	ldi	r30, 0x45	; 69
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	80 81       	ld	r24, Z
    318c:	8f 7d       	andi	r24, 0xDF	; 223
    318e:	8c 93       	st	X, r24
    3190:	44 c0       	rjmp	.+136    	; 0x321a <Timer_Init+0x594>
					break;
				case TOGGLE:
					SET_BIT(DDRD,PD7);
    3192:	a1 e3       	ldi	r26, 0x31	; 49
    3194:	b0 e0       	ldi	r27, 0x00	; 0
    3196:	e1 e3       	ldi	r30, 0x31	; 49
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	80 81       	ld	r24, Z
    319c:	80 68       	ori	r24, 0x80	; 128
    319e:	8c 93       	st	X, r24
					SET_BIT(TCCR2,COM20);
    31a0:	a5 e4       	ldi	r26, 0x45	; 69
    31a2:	b0 e0       	ldi	r27, 0x00	; 0
    31a4:	e5 e4       	ldi	r30, 0x45	; 69
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	80 81       	ld	r24, Z
    31aa:	80 61       	ori	r24, 0x10	; 16
    31ac:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR2,COM21);
    31ae:	a5 e4       	ldi	r26, 0x45	; 69
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	e5 e4       	ldi	r30, 0x45	; 69
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	80 81       	ld	r24, Z
    31b8:	8f 7d       	andi	r24, 0xDF	; 223
    31ba:	8c 93       	st	X, r24
    31bc:	2e c0       	rjmp	.+92     	; 0x321a <Timer_Init+0x594>
					break;
				case CLEAR:
					SET_BIT(DDRD,PD7);
    31be:	a1 e3       	ldi	r26, 0x31	; 49
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	e1 e3       	ldi	r30, 0x31	; 49
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	80 68       	ori	r24, 0x80	; 128
    31ca:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR2,COM20);
    31cc:	a5 e4       	ldi	r26, 0x45	; 69
    31ce:	b0 e0       	ldi	r27, 0x00	; 0
    31d0:	e5 e4       	ldi	r30, 0x45	; 69
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	8f 7e       	andi	r24, 0xEF	; 239
    31d8:	8c 93       	st	X, r24
					SET_BIT(TCCR2,COM21);
    31da:	a5 e4       	ldi	r26, 0x45	; 69
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e5 e4       	ldi	r30, 0x45	; 69
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	80 62       	ori	r24, 0x20	; 32
    31e6:	8c 93       	st	X, r24
    31e8:	18 c0       	rjmp	.+48     	; 0x321a <Timer_Init+0x594>
					break;
				case SET:
					SET_BIT(DDRD,PD7);
    31ea:	a1 e3       	ldi	r26, 0x31	; 49
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	e1 e3       	ldi	r30, 0x31	; 49
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	80 68       	ori	r24, 0x80	; 128
    31f6:	8c 93       	st	X, r24
					SET_BIT(TCCR2,COM20);
    31f8:	a5 e4       	ldi	r26, 0x45	; 69
    31fa:	b0 e0       	ldi	r27, 0x00	; 0
    31fc:	e5 e4       	ldi	r30, 0x45	; 69
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	80 81       	ld	r24, Z
    3202:	80 61       	ori	r24, 0x10	; 16
    3204:	8c 93       	st	X, r24
					SET_BIT(TCCR2,COM21);
    3206:	a5 e4       	ldi	r26, 0x45	; 69
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	e5 e4       	ldi	r30, 0x45	; 69
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	80 81       	ld	r24, Z
    3210:	80 62       	ori	r24, 0x20	; 32
    3212:	8c 93       	st	X, r24
    3214:	02 c0       	rjmp	.+4      	; 0x321a <Timer_Init+0x594>
					break;
				default :
					return 0;
    3216:	1b 8a       	std	Y+19, r1	; 0x13
    3218:	45 c0       	rjmp	.+138    	; 0x32a4 <Timer_Init+0x61e>
			}

			/* Clock Select */
			TCCR2 = (TCCR2 & 0xF8) | (config->timer_clk & 0x07);
    321a:	a5 e4       	ldi	r26, 0x45	; 69
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	e5 e4       	ldi	r30, 0x45	; 69
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 81       	ld	r24, Z
    3224:	98 2f       	mov	r25, r24
    3226:	98 7f       	andi	r25, 0xF8	; 248
    3228:	e9 81       	ldd	r30, Y+1	; 0x01
    322a:	fa 81       	ldd	r31, Y+2	; 0x02
    322c:	83 81       	ldd	r24, Z+3	; 0x03
    322e:	87 70       	andi	r24, 0x07	; 7
    3230:	89 2b       	or	r24, r25
    3232:	8c 93       	st	X, r24

			/*	Set The initial value */
			TCNT2 = config->inital_value;
    3234:	a4 e4       	ldi	r26, 0x44	; 68
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	e9 81       	ldd	r30, Y+1	; 0x01
    323a:	fa 81       	ldd	r31, Y+2	; 0x02
    323c:	85 81       	ldd	r24, Z+5	; 0x05
    323e:	96 81       	ldd	r25, Z+6	; 0x06
    3240:	8c 93       	st	X, r24

			/* Set the compare value */
			OCR2 = config->compare_value;
    3242:	a3 e4       	ldi	r26, 0x43	; 67
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	e9 81       	ldd	r30, Y+1	; 0x01
    3248:	fa 81       	ldd	r31, Y+2	; 0x02
    324a:	87 81       	ldd	r24, Z+7	; 0x07
    324c:	90 85       	ldd	r25, Z+8	; 0x08
    324e:	8c 93       	st	X, r24


			/*Set the interrupt Configuarion */
			if(config->interrupt)
    3250:	e9 81       	ldd	r30, Y+1	; 0x01
    3252:	fa 81       	ldd	r31, Y+2	; 0x02
    3254:	84 81       	ldd	r24, Z+4	; 0x04
    3256:	88 23       	and	r24, r24
    3258:	19 f1       	breq	.+70     	; 0x32a0 <Timer_Init+0x61a>
			{
				switch(config->timer_mode)
    325a:	e9 81       	ldd	r30, Y+1	; 0x01
    325c:	fa 81       	ldd	r31, Y+2	; 0x02
    325e:	81 81       	ldd	r24, Z+1	; 0x01
    3260:	28 2f       	mov	r18, r24
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	3c 83       	std	Y+4, r19	; 0x04
    3266:	2b 83       	std	Y+3, r18	; 0x03
    3268:	8b 81       	ldd	r24, Y+3	; 0x03
    326a:	9c 81       	ldd	r25, Y+4	; 0x04
    326c:	00 97       	sbiw	r24, 0x00	; 0
    326e:	31 f0       	breq	.+12     	; 0x327c <Timer_Init+0x5f6>
    3270:	2b 81       	ldd	r18, Y+3	; 0x03
    3272:	3c 81       	ldd	r19, Y+4	; 0x04
    3274:	22 30       	cpi	r18, 0x02	; 2
    3276:	31 05       	cpc	r19, r1
    3278:	49 f0       	breq	.+18     	; 0x328c <Timer_Init+0x606>
    327a:	12 c0       	rjmp	.+36     	; 0x32a0 <Timer_Init+0x61a>
				{
				case OVERFLOW_MODE :
					SET_BIT(TIMSK,TOIE2);
    327c:	a9 e5       	ldi	r26, 0x59	; 89
    327e:	b0 e0       	ldi	r27, 0x00	; 0
    3280:	e9 e5       	ldi	r30, 0x59	; 89
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	80 81       	ld	r24, Z
    3286:	80 64       	ori	r24, 0x40	; 64
    3288:	8c 93       	st	X, r24
    328a:	0a c0       	rjmp	.+20     	; 0x32a0 <Timer_Init+0x61a>

					break;
				case COMPARE_MODE :
					SET_BIT(TIMSK,OCIE2);
    328c:	a9 e5       	ldi	r26, 0x59	; 89
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	e9 e5       	ldi	r30, 0x59	; 89
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 81       	ld	r24, Z
    3296:	80 68       	ori	r24, 0x80	; 128
    3298:	8c 93       	st	X, r24
    329a:	02 c0       	rjmp	.+4      	; 0x32a0 <Timer_Init+0x61a>
					break;
				}
			}
			break;
	default:
		return 0;
    329c:	1b 8a       	std	Y+19, r1	; 0x13
    329e:	02 c0       	rjmp	.+4      	; 0x32a4 <Timer_Init+0x61e>
	}

	return 1;
    32a0:	31 e0       	ldi	r19, 0x01	; 1
    32a2:	3b 8b       	std	Y+19, r19	; 0x13
    32a4:	8b 89       	ldd	r24, Y+19	; 0x13
}
    32a6:	67 96       	adiw	r28, 0x17	; 23
    32a8:	0f b6       	in	r0, 0x3f	; 63
    32aa:	f8 94       	cli
    32ac:	de bf       	out	0x3e, r29	; 62
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	cd bf       	out	0x3d, r28	; 61
    32b2:	cf 91       	pop	r28
    32b4:	df 91       	pop	r29
    32b6:	08 95       	ret

000032b8 <Timer_Deinit>:
/* Function to deinit the timer it clears all the registers */
void Timer_Deinit(uint8 timer_id)
{
    32b8:	df 93       	push	r29
    32ba:	cf 93       	push	r28
    32bc:	00 d0       	rcall	.+0      	; 0x32be <Timer_Deinit+0x6>
    32be:	0f 92       	push	r0
    32c0:	cd b7       	in	r28, 0x3d	; 61
    32c2:	de b7       	in	r29, 0x3e	; 62
    32c4:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_id)
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	28 2f       	mov	r18, r24
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	3b 83       	std	Y+3, r19	; 0x03
    32ce:	2a 83       	std	Y+2, r18	; 0x02
    32d0:	8a 81       	ldd	r24, Y+2	; 0x02
    32d2:	9b 81       	ldd	r25, Y+3	; 0x03
    32d4:	81 30       	cpi	r24, 0x01	; 1
    32d6:	91 05       	cpc	r25, r1
    32d8:	11 f1       	breq	.+68     	; 0x331e <Timer_Deinit+0x66>
    32da:	2a 81       	ldd	r18, Y+2	; 0x02
    32dc:	3b 81       	ldd	r19, Y+3	; 0x03
    32de:	22 30       	cpi	r18, 0x02	; 2
    32e0:	31 05       	cpc	r19, r1
    32e2:	d1 f1       	breq	.+116    	; 0x3358 <Timer_Deinit+0xa0>
    32e4:	8a 81       	ldd	r24, Y+2	; 0x02
    32e6:	9b 81       	ldd	r25, Y+3	; 0x03
    32e8:	00 97       	sbiw	r24, 0x00	; 0
    32ea:	09 f0       	breq	.+2      	; 0x32ee <Timer_Deinit+0x36>
    32ec:	4c c0       	rjmp	.+152    	; 0x3386 <Timer_Deinit+0xce>
	{
	case TIMER0_ID:
		TCCR0=0;
    32ee:	e3 e5       	ldi	r30, 0x53	; 83
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	10 82       	st	Z, r1
		TCNT0=0;
    32f4:	e2 e5       	ldi	r30, 0x52	; 82
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	10 82       	st	Z, r1
		OCR0 =0;
    32fa:	ec e5       	ldi	r30, 0x5C	; 92
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE0);
    3300:	a9 e5       	ldi	r26, 0x59	; 89
    3302:	b0 e0       	ldi	r27, 0x00	; 0
    3304:	e9 e5       	ldi	r30, 0x59	; 89
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	80 81       	ld	r24, Z
    330a:	8e 7f       	andi	r24, 0xFE	; 254
    330c:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE0);
    330e:	a9 e5       	ldi	r26, 0x59	; 89
    3310:	b0 e0       	ldi	r27, 0x00	; 0
    3312:	e9 e5       	ldi	r30, 0x59	; 89
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	80 81       	ld	r24, Z
    3318:	8d 7f       	andi	r24, 0xFD	; 253
    331a:	8c 93       	st	X, r24
    331c:	34 c0       	rjmp	.+104    	; 0x3386 <Timer_Deinit+0xce>
		break;

	case TIMER1_ID:
		TCCR1B=0;
    331e:	ee e4       	ldi	r30, 0x4E	; 78
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	10 82       	st	Z, r1
		TCCR1A=0;
    3324:	ef e4       	ldi	r30, 0x4F	; 79
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	10 82       	st	Z, r1
		TCNT1 =0;
    332a:	ec e4       	ldi	r30, 0x4C	; 76
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	11 82       	std	Z+1, r1	; 0x01
    3330:	10 82       	st	Z, r1
		OCR1A =0;
    3332:	ea e4       	ldi	r30, 0x4A	; 74
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	11 82       	std	Z+1, r1	; 0x01
    3338:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE1);
    333a:	a9 e5       	ldi	r26, 0x59	; 89
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	e9 e5       	ldi	r30, 0x59	; 89
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	80 81       	ld	r24, Z
    3344:	8b 7f       	andi	r24, 0xFB	; 251
    3346:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1A);
    3348:	a9 e5       	ldi	r26, 0x59	; 89
    334a:	b0 e0       	ldi	r27, 0x00	; 0
    334c:	e9 e5       	ldi	r30, 0x59	; 89
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	80 81       	ld	r24, Z
    3352:	8f 7e       	andi	r24, 0xEF	; 239
    3354:	8c 93       	st	X, r24
    3356:	17 c0       	rjmp	.+46     	; 0x3386 <Timer_Deinit+0xce>
		break;

	case TIMER2_ID:
		TCCR2=0;
    3358:	e5 e4       	ldi	r30, 0x45	; 69
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	10 82       	st	Z, r1
		TCNT2=0;
    335e:	e4 e4       	ldi	r30, 0x44	; 68
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	10 82       	st	Z, r1
		OCR2 =0;
    3364:	e3 e4       	ldi	r30, 0x43	; 67
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE2);
    336a:	a9 e5       	ldi	r26, 0x59	; 89
    336c:	b0 e0       	ldi	r27, 0x00	; 0
    336e:	e9 e5       	ldi	r30, 0x59	; 89
    3370:	f0 e0       	ldi	r31, 0x00	; 0
    3372:	80 81       	ld	r24, Z
    3374:	8f 7b       	andi	r24, 0xBF	; 191
    3376:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE2);
    3378:	a9 e5       	ldi	r26, 0x59	; 89
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	e9 e5       	ldi	r30, 0x59	; 89
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	80 81       	ld	r24, Z
    3382:	8f 77       	andi	r24, 0x7F	; 127
    3384:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    3386:	0f 90       	pop	r0
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	08 95       	ret

00003392 <Timer_Stop>:

/* Function to be called for stop the timer */
void Timer_Stop(uint8 timer_id)
{
    3392:	df 93       	push	r29
    3394:	cf 93       	push	r28
    3396:	00 d0       	rcall	.+0      	; 0x3398 <Timer_Stop+0x6>
    3398:	0f 92       	push	r0
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
    339e:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_id)
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	28 2f       	mov	r18, r24
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	3b 83       	std	Y+3, r19	; 0x03
    33a8:	2a 83       	std	Y+2, r18	; 0x02
    33aa:	8a 81       	ldd	r24, Y+2	; 0x02
    33ac:	9b 81       	ldd	r25, Y+3	; 0x03
    33ae:	81 30       	cpi	r24, 0x01	; 1
    33b0:	91 05       	cpc	r25, r1
    33b2:	69 f0       	breq	.+26     	; 0x33ce <Timer_Stop+0x3c>
    33b4:	2a 81       	ldd	r18, Y+2	; 0x02
    33b6:	3b 81       	ldd	r19, Y+3	; 0x03
    33b8:	22 30       	cpi	r18, 0x02	; 2
    33ba:	31 05       	cpc	r19, r1
    33bc:	79 f0       	breq	.+30     	; 0x33dc <Timer_Stop+0x4a>
    33be:	8a 81       	ldd	r24, Y+2	; 0x02
    33c0:	9b 81       	ldd	r25, Y+3	; 0x03
    33c2:	00 97       	sbiw	r24, 0x00	; 0
    33c4:	71 f4       	brne	.+28     	; 0x33e2 <Timer_Stop+0x50>
		{
		case TIMER0_ID:
			TCCR0=0;
    33c6:	e3 e5       	ldi	r30, 0x53	; 83
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	10 82       	st	Z, r1
    33cc:	0a c0       	rjmp	.+20     	; 0x33e2 <Timer_Stop+0x50>
			break;

		case TIMER1_ID:
			TCCR1B=0;
    33ce:	ee e4       	ldi	r30, 0x4E	; 78
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	10 82       	st	Z, r1
			TCCR1A=0;
    33d4:	ef e4       	ldi	r30, 0x4F	; 79
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	10 82       	st	Z, r1
    33da:	03 c0       	rjmp	.+6      	; 0x33e2 <Timer_Stop+0x50>
			break;

		case TIMER2_ID:
			TCCR2=0;
    33dc:	e5 e4       	ldi	r30, 0x45	; 69
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	10 82       	st	Z, r1
			break;
		default:
			break;
		}
}
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0
    33e6:	0f 90       	pop	r0
    33e8:	cf 91       	pop	r28
    33ea:	df 91       	pop	r29
    33ec:	08 95       	ret

000033ee <Timer_SetCallBack>:

void Timer_SetCallBack(uint8 timer_id,volatile void(*a_ptr)(void), TIMER_Mode mode)
{
    33ee:	df 93       	push	r29
    33f0:	cf 93       	push	r28
    33f2:	cd b7       	in	r28, 0x3d	; 61
    33f4:	de b7       	in	r29, 0x3e	; 62
    33f6:	2c 97       	sbiw	r28, 0x0c	; 12
    33f8:	0f b6       	in	r0, 0x3f	; 63
    33fa:	f8 94       	cli
    33fc:	de bf       	out	0x3e, r29	; 62
    33fe:	0f be       	out	0x3f, r0	; 63
    3400:	cd bf       	out	0x3d, r28	; 61
    3402:	89 83       	std	Y+1, r24	; 0x01
    3404:	7b 83       	std	Y+3, r23	; 0x03
    3406:	6a 83       	std	Y+2, r22	; 0x02
    3408:	4c 83       	std	Y+4, r20	; 0x04
	switch (timer_id)
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	28 2f       	mov	r18, r24
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	3c 87       	std	Y+12, r19	; 0x0c
    3412:	2b 87       	std	Y+11, r18	; 0x0b
    3414:	8b 85       	ldd	r24, Y+11	; 0x0b
    3416:	9c 85       	ldd	r25, Y+12	; 0x0c
    3418:	81 30       	cpi	r24, 0x01	; 1
    341a:	91 05       	cpc	r25, r1
    341c:	41 f1       	breq	.+80     	; 0x346e <Timer_SetCallBack+0x80>
    341e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3420:	3c 85       	ldd	r19, Y+12	; 0x0c
    3422:	22 30       	cpi	r18, 0x02	; 2
    3424:	31 05       	cpc	r19, r1
    3426:	09 f4       	brne	.+2      	; 0x342a <Timer_SetCallBack+0x3c>
    3428:	3f c0       	rjmp	.+126    	; 0x34a8 <Timer_SetCallBack+0xba>
    342a:	8b 85       	ldd	r24, Y+11	; 0x0b
    342c:	9c 85       	ldd	r25, Y+12	; 0x0c
    342e:	00 97       	sbiw	r24, 0x00	; 0
    3430:	09 f0       	breq	.+2      	; 0x3434 <Timer_SetCallBack+0x46>
    3432:	56 c0       	rjmp	.+172    	; 0x34e0 <Timer_SetCallBack+0xf2>
		{
		case TIMER0_ID:
			switch(mode)
    3434:	8c 81       	ldd	r24, Y+4	; 0x04
    3436:	28 2f       	mov	r18, r24
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	3a 87       	std	Y+10, r19	; 0x0a
    343c:	29 87       	std	Y+9, r18	; 0x09
    343e:	89 85       	ldd	r24, Y+9	; 0x09
    3440:	9a 85       	ldd	r25, Y+10	; 0x0a
    3442:	00 97       	sbiw	r24, 0x00	; 0
    3444:	31 f0       	breq	.+12     	; 0x3452 <Timer_SetCallBack+0x64>
    3446:	29 85       	ldd	r18, Y+9	; 0x09
    3448:	3a 85       	ldd	r19, Y+10	; 0x0a
    344a:	22 30       	cpi	r18, 0x02	; 2
    344c:	31 05       	cpc	r19, r1
    344e:	41 f0       	breq	.+16     	; 0x3460 <Timer_SetCallBack+0x72>
    3450:	47 c0       	rjmp	.+142    	; 0x34e0 <Timer_SetCallBack+0xf2>
			{
				case OVERFLOW_MODE :
					g_callBackPtr_timer0_OVF = a_ptr;
    3452:	8a 81       	ldd	r24, Y+2	; 0x02
    3454:	9b 81       	ldd	r25, Y+3	; 0x03
    3456:	90 93 1d 01 	sts	0x011D, r25
    345a:	80 93 1c 01 	sts	0x011C, r24
    345e:	40 c0       	rjmp	.+128    	; 0x34e0 <Timer_SetCallBack+0xf2>
					break;

				case COMPARE_MODE :
					g_callBackPtr_timer0_COMP = a_ptr;
    3460:	8a 81       	ldd	r24, Y+2	; 0x02
    3462:	9b 81       	ldd	r25, Y+3	; 0x03
    3464:	90 93 23 01 	sts	0x0123, r25
    3468:	80 93 22 01 	sts	0x0122, r24
    346c:	39 c0       	rjmp	.+114    	; 0x34e0 <Timer_SetCallBack+0xf2>
					break;
			}
			break;

		case TIMER1_ID:
			switch(mode)
    346e:	8c 81       	ldd	r24, Y+4	; 0x04
    3470:	28 2f       	mov	r18, r24
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	38 87       	std	Y+8, r19	; 0x08
    3476:	2f 83       	std	Y+7, r18	; 0x07
    3478:	8f 81       	ldd	r24, Y+7	; 0x07
    347a:	98 85       	ldd	r25, Y+8	; 0x08
    347c:	00 97       	sbiw	r24, 0x00	; 0
    347e:	31 f0       	breq	.+12     	; 0x348c <Timer_SetCallBack+0x9e>
    3480:	2f 81       	ldd	r18, Y+7	; 0x07
    3482:	38 85       	ldd	r19, Y+8	; 0x08
    3484:	22 30       	cpi	r18, 0x02	; 2
    3486:	31 05       	cpc	r19, r1
    3488:	41 f0       	breq	.+16     	; 0x349a <Timer_SetCallBack+0xac>
    348a:	2a c0       	rjmp	.+84     	; 0x34e0 <Timer_SetCallBack+0xf2>
			{
				case OVERFLOW_MODE :
					g_callBackPtr_timer1_OVF = a_ptr;
    348c:	8a 81       	ldd	r24, Y+2	; 0x02
    348e:	9b 81       	ldd	r25, Y+3	; 0x03
    3490:	90 93 1f 01 	sts	0x011F, r25
    3494:	80 93 1e 01 	sts	0x011E, r24
    3498:	23 c0       	rjmp	.+70     	; 0x34e0 <Timer_SetCallBack+0xf2>
					break;

				case COMPARE_MODE :
					g_callBackPtr_timer1_COMP = a_ptr;
    349a:	8a 81       	ldd	r24, Y+2	; 0x02
    349c:	9b 81       	ldd	r25, Y+3	; 0x03
    349e:	90 93 25 01 	sts	0x0125, r25
    34a2:	80 93 24 01 	sts	0x0124, r24
    34a6:	1c c0       	rjmp	.+56     	; 0x34e0 <Timer_SetCallBack+0xf2>
					break;
			}
			break;

		case TIMER2_ID:
			switch(mode)
    34a8:	8c 81       	ldd	r24, Y+4	; 0x04
    34aa:	28 2f       	mov	r18, r24
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	3e 83       	std	Y+6, r19	; 0x06
    34b0:	2d 83       	std	Y+5, r18	; 0x05
    34b2:	8d 81       	ldd	r24, Y+5	; 0x05
    34b4:	9e 81       	ldd	r25, Y+6	; 0x06
    34b6:	00 97       	sbiw	r24, 0x00	; 0
    34b8:	31 f0       	breq	.+12     	; 0x34c6 <Timer_SetCallBack+0xd8>
    34ba:	2d 81       	ldd	r18, Y+5	; 0x05
    34bc:	3e 81       	ldd	r19, Y+6	; 0x06
    34be:	22 30       	cpi	r18, 0x02	; 2
    34c0:	31 05       	cpc	r19, r1
    34c2:	41 f0       	breq	.+16     	; 0x34d4 <Timer_SetCallBack+0xe6>
    34c4:	0d c0       	rjmp	.+26     	; 0x34e0 <Timer_SetCallBack+0xf2>
			{
				case OVERFLOW_MODE :
					g_callBackPtr_timer2_OVF = a_ptr;
    34c6:	8a 81       	ldd	r24, Y+2	; 0x02
    34c8:	9b 81       	ldd	r25, Y+3	; 0x03
    34ca:	90 93 21 01 	sts	0x0121, r25
    34ce:	80 93 20 01 	sts	0x0120, r24
    34d2:	06 c0       	rjmp	.+12     	; 0x34e0 <Timer_SetCallBack+0xf2>
					break;

				case COMPARE_MODE :
					g_callBackPtr_timer2_COMP = a_ptr;
    34d4:	8a 81       	ldd	r24, Y+2	; 0x02
    34d6:	9b 81       	ldd	r25, Y+3	; 0x03
    34d8:	90 93 27 01 	sts	0x0127, r25
    34dc:	80 93 26 01 	sts	0x0126, r24
			}
			break;
		default:
			break;
		}
}
    34e0:	2c 96       	adiw	r28, 0x0c	; 12
    34e2:	0f b6       	in	r0, 0x3f	; 63
    34e4:	f8 94       	cli
    34e6:	de bf       	out	0x3e, r29	; 62
    34e8:	0f be       	out	0x3f, r0	; 63
    34ea:	cd bf       	out	0x3d, r28	; 61
    34ec:	cf 91       	pop	r28
    34ee:	df 91       	pop	r29
    34f0:	08 95       	ret

000034f2 <Timer_SetCompareValue>:

void Timer_SetCompareValue(uint8 timer_id ,uint16 value)
{
    34f2:	df 93       	push	r29
    34f4:	cf 93       	push	r28
    34f6:	00 d0       	rcall	.+0      	; 0x34f8 <Timer_SetCompareValue+0x6>
    34f8:	00 d0       	rcall	.+0      	; 0x34fa <Timer_SetCompareValue+0x8>
    34fa:	0f 92       	push	r0
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	89 83       	std	Y+1, r24	; 0x01
    3502:	7b 83       	std	Y+3, r23	; 0x03
    3504:	6a 83       	std	Y+2, r22	; 0x02
	switch (timer_id)
    3506:	89 81       	ldd	r24, Y+1	; 0x01
    3508:	28 2f       	mov	r18, r24
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	3d 83       	std	Y+5, r19	; 0x05
    350e:	2c 83       	std	Y+4, r18	; 0x04
    3510:	8c 81       	ldd	r24, Y+4	; 0x04
    3512:	9d 81       	ldd	r25, Y+5	; 0x05
    3514:	81 30       	cpi	r24, 0x01	; 1
    3516:	91 05       	cpc	r25, r1
    3518:	71 f0       	breq	.+28     	; 0x3536 <Timer_SetCompareValue+0x44>
    351a:	2c 81       	ldd	r18, Y+4	; 0x04
    351c:	3d 81       	ldd	r19, Y+5	; 0x05
    351e:	22 30       	cpi	r18, 0x02	; 2
    3520:	31 05       	cpc	r19, r1
    3522:	81 f0       	breq	.+32     	; 0x3544 <Timer_SetCompareValue+0x52>
    3524:	8c 81       	ldd	r24, Y+4	; 0x04
    3526:	9d 81       	ldd	r25, Y+5	; 0x05
    3528:	00 97       	sbiw	r24, 0x00	; 0
    352a:	81 f4       	brne	.+32     	; 0x354c <Timer_SetCompareValue+0x5a>
		{
		case TIMER0_ID:
			OCR0 = value;
    352c:	ec e5       	ldi	r30, 0x5C	; 92
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	8a 81       	ldd	r24, Y+2	; 0x02
    3532:	80 83       	st	Z, r24
    3534:	0b c0       	rjmp	.+22     	; 0x354c <Timer_SetCompareValue+0x5a>
			break;
		case TIMER1_ID:
			OCR1A = value;
    3536:	ea e4       	ldi	r30, 0x4A	; 74
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	8a 81       	ldd	r24, Y+2	; 0x02
    353c:	9b 81       	ldd	r25, Y+3	; 0x03
    353e:	91 83       	std	Z+1, r25	; 0x01
    3540:	80 83       	st	Z, r24
    3542:	04 c0       	rjmp	.+8      	; 0x354c <Timer_SetCompareValue+0x5a>
			break;
		case TIMER2_ID:
			OCR2 = value;
    3544:	e3 e4       	ldi	r30, 0x43	; 67
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	8a 81       	ldd	r24, Y+2	; 0x02
    354a:	80 83       	st	Z, r24
			break;
		default:
			break;
		}
}
    354c:	0f 90       	pop	r0
    354e:	0f 90       	pop	r0
    3550:	0f 90       	pop	r0
    3552:	0f 90       	pop	r0
    3554:	0f 90       	pop	r0
    3556:	cf 91       	pop	r28
    3558:	df 91       	pop	r29
    355a:	08 95       	ret

0000355c <__vector_11>:
static volatile void (*g_callBackPtr_UART_TXC)(void) = NULL_PTR;
static volatile void (*g_callBackPtr_UART_UDRE)(void) = NULL_PTR;

/* Interrupt service routine when the UART recieves data */
ISR(USART_RXC_vect)
{
    355c:	1f 92       	push	r1
    355e:	0f 92       	push	r0
    3560:	0f b6       	in	r0, 0x3f	; 63
    3562:	0f 92       	push	r0
    3564:	11 24       	eor	r1, r1
    3566:	2f 93       	push	r18
    3568:	3f 93       	push	r19
    356a:	4f 93       	push	r20
    356c:	5f 93       	push	r21
    356e:	6f 93       	push	r22
    3570:	7f 93       	push	r23
    3572:	8f 93       	push	r24
    3574:	9f 93       	push	r25
    3576:	af 93       	push	r26
    3578:	bf 93       	push	r27
    357a:	ef 93       	push	r30
    357c:	ff 93       	push	r31
    357e:	df 93       	push	r29
    3580:	cf 93       	push	r28
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_UART_RXC != NULL_PTR)
    3586:	80 91 28 01 	lds	r24, 0x0128
    358a:	90 91 29 01 	lds	r25, 0x0129
    358e:	00 97       	sbiw	r24, 0x00	; 0
    3590:	29 f0       	breq	.+10     	; 0x359c <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_UART_RXC)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3592:	e0 91 28 01 	lds	r30, 0x0128
    3596:	f0 91 29 01 	lds	r31, 0x0129
    359a:	09 95       	icall
	}
}
    359c:	cf 91       	pop	r28
    359e:	df 91       	pop	r29
    35a0:	ff 91       	pop	r31
    35a2:	ef 91       	pop	r30
    35a4:	bf 91       	pop	r27
    35a6:	af 91       	pop	r26
    35a8:	9f 91       	pop	r25
    35aa:	8f 91       	pop	r24
    35ac:	7f 91       	pop	r23
    35ae:	6f 91       	pop	r22
    35b0:	5f 91       	pop	r21
    35b2:	4f 91       	pop	r20
    35b4:	3f 91       	pop	r19
    35b6:	2f 91       	pop	r18
    35b8:	0f 90       	pop	r0
    35ba:	0f be       	out	0x3f, r0	; 63
    35bc:	0f 90       	pop	r0
    35be:	1f 90       	pop	r1
    35c0:	18 95       	reti

000035c2 <__vector_13>:

/* Interrupt service routine when the UART send data */
ISR(USART_TXC_vect)
{
    35c2:	1f 92       	push	r1
    35c4:	0f 92       	push	r0
    35c6:	0f b6       	in	r0, 0x3f	; 63
    35c8:	0f 92       	push	r0
    35ca:	11 24       	eor	r1, r1
    35cc:	2f 93       	push	r18
    35ce:	3f 93       	push	r19
    35d0:	4f 93       	push	r20
    35d2:	5f 93       	push	r21
    35d4:	6f 93       	push	r22
    35d6:	7f 93       	push	r23
    35d8:	8f 93       	push	r24
    35da:	9f 93       	push	r25
    35dc:	af 93       	push	r26
    35de:	bf 93       	push	r27
    35e0:	ef 93       	push	r30
    35e2:	ff 93       	push	r31
    35e4:	df 93       	push	r29
    35e6:	cf 93       	push	r28
    35e8:	cd b7       	in	r28, 0x3d	; 61
    35ea:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_UART_TXC != NULL_PTR)
    35ec:	80 91 2a 01 	lds	r24, 0x012A
    35f0:	90 91 2b 01 	lds	r25, 0x012B
    35f4:	00 97       	sbiw	r24, 0x00	; 0
    35f6:	29 f0       	breq	.+10     	; 0x3602 <__vector_13+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_UART_TXC)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    35f8:	e0 91 2a 01 	lds	r30, 0x012A
    35fc:	f0 91 2b 01 	lds	r31, 0x012B
    3600:	09 95       	icall
	}
}
    3602:	cf 91       	pop	r28
    3604:	df 91       	pop	r29
    3606:	ff 91       	pop	r31
    3608:	ef 91       	pop	r30
    360a:	bf 91       	pop	r27
    360c:	af 91       	pop	r26
    360e:	9f 91       	pop	r25
    3610:	8f 91       	pop	r24
    3612:	7f 91       	pop	r23
    3614:	6f 91       	pop	r22
    3616:	5f 91       	pop	r21
    3618:	4f 91       	pop	r20
    361a:	3f 91       	pop	r19
    361c:	2f 91       	pop	r18
    361e:	0f 90       	pop	r0
    3620:	0f be       	out	0x3f, r0	; 63
    3622:	0f 90       	pop	r0
    3624:	1f 90       	pop	r1
    3626:	18 95       	reti

00003628 <__vector_12>:

/* Interrupt service routine when the UART send data */
ISR(USART_UDRE_vect)
{
    3628:	1f 92       	push	r1
    362a:	0f 92       	push	r0
    362c:	0f b6       	in	r0, 0x3f	; 63
    362e:	0f 92       	push	r0
    3630:	11 24       	eor	r1, r1
    3632:	2f 93       	push	r18
    3634:	3f 93       	push	r19
    3636:	4f 93       	push	r20
    3638:	5f 93       	push	r21
    363a:	6f 93       	push	r22
    363c:	7f 93       	push	r23
    363e:	8f 93       	push	r24
    3640:	9f 93       	push	r25
    3642:	af 93       	push	r26
    3644:	bf 93       	push	r27
    3646:	ef 93       	push	r30
    3648:	ff 93       	push	r31
    364a:	df 93       	push	r29
    364c:	cf 93       	push	r28
    364e:	cd b7       	in	r28, 0x3d	; 61
    3650:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_UART_UDRE != NULL_PTR)
    3652:	80 91 2c 01 	lds	r24, 0x012C
    3656:	90 91 2d 01 	lds	r25, 0x012D
    365a:	00 97       	sbiw	r24, 0x00	; 0
    365c:	29 f0       	breq	.+10     	; 0x3668 <__vector_12+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_UART_UDRE)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    365e:	e0 91 2c 01 	lds	r30, 0x012C
    3662:	f0 91 2d 01 	lds	r31, 0x012D
    3666:	09 95       	icall
	}
}
    3668:	cf 91       	pop	r28
    366a:	df 91       	pop	r29
    366c:	ff 91       	pop	r31
    366e:	ef 91       	pop	r30
    3670:	bf 91       	pop	r27
    3672:	af 91       	pop	r26
    3674:	9f 91       	pop	r25
    3676:	8f 91       	pop	r24
    3678:	7f 91       	pop	r23
    367a:	6f 91       	pop	r22
    367c:	5f 91       	pop	r21
    367e:	4f 91       	pop	r20
    3680:	3f 91       	pop	r19
    3682:	2f 91       	pop	r18
    3684:	0f 90       	pop	r0
    3686:	0f be       	out	0x3f, r0	; 63
    3688:	0f 90       	pop	r0
    368a:	1f 90       	pop	r1
    368c:	18 95       	reti

0000368e <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(UART_Config* config)
{
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	00 d0       	rcall	.+0      	; 0x3694 <UART_init+0x6>
    3694:	00 d0       	rcall	.+0      	; 0x3696 <UART_init+0x8>
    3696:	00 d0       	rcall	.+0      	; 0x3698 <UART_init+0xa>
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
    369c:	9c 83       	std	Y+4, r25	; 0x04
    369e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    36a0:	1a 82       	std	Y+2, r1	; 0x02
    36a2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed*/
	if(config->doublespeed)
    36a4:	eb 81       	ldd	r30, Y+3	; 0x03
    36a6:	fc 81       	ldd	r31, Y+4	; 0x04
    36a8:	82 81       	ldd	r24, Z+2	; 0x02
    36aa:	88 23       	and	r24, r24
    36ac:	39 f0       	breq	.+14     	; 0x36bc <UART_init+0x2e>
	{
	SET_BIT(UCSRA,U2X);
    36ae:	ab e2       	ldi	r26, 0x2B	; 43
    36b0:	b0 e0       	ldi	r27, 0x00	; 0
    36b2:	eb e2       	ldi	r30, 0x2B	; 43
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	80 81       	ld	r24, Z
    36b8:	82 60       	ori	r24, 0x02	; 2
    36ba:	8c 93       	st	X, r24
	}

	/* For Rx Enable */
	if(config->RxEn)
    36bc:	eb 81       	ldd	r30, Y+3	; 0x03
    36be:	fc 81       	ldd	r31, Y+4	; 0x04
    36c0:	80 81       	ld	r24, Z
    36c2:	88 23       	and	r24, r24
    36c4:	39 f0       	breq	.+14     	; 0x36d4 <UART_init+0x46>
	{
		SET_BIT(UCSRB,RXEN);
    36c6:	aa e2       	ldi	r26, 0x2A	; 42
    36c8:	b0 e0       	ldi	r27, 0x00	; 0
    36ca:	ea e2       	ldi	r30, 0x2A	; 42
    36cc:	f0 e0       	ldi	r31, 0x00	; 0
    36ce:	80 81       	ld	r24, Z
    36d0:	80 61       	ori	r24, 0x10	; 16
    36d2:	8c 93       	st	X, r24
	}

	/* For Tx Enable */
	if(config->TxEn)
    36d4:	eb 81       	ldd	r30, Y+3	; 0x03
    36d6:	fc 81       	ldd	r31, Y+4	; 0x04
    36d8:	81 81       	ldd	r24, Z+1	; 0x01
    36da:	88 23       	and	r24, r24
    36dc:	39 f0       	breq	.+14     	; 0x36ec <UART_init+0x5e>
	{
		SET_BIT(UCSRB,TXEN);
    36de:	aa e2       	ldi	r26, 0x2A	; 42
    36e0:	b0 e0       	ldi	r27, 0x00	; 0
    36e2:	ea e2       	ldi	r30, 0x2A	; 42
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	80 81       	ld	r24, Z
    36e8:	88 60       	ori	r24, 0x08	; 8
    36ea:	8c 93       	st	X, r24
	}

	/* For Rx Interrupt Enable */
	if(config->RxInt)
    36ec:	eb 81       	ldd	r30, Y+3	; 0x03
    36ee:	fc 81       	ldd	r31, Y+4	; 0x04
    36f0:	83 81       	ldd	r24, Z+3	; 0x03
    36f2:	88 23       	and	r24, r24
    36f4:	39 f0       	breq	.+14     	; 0x3704 <UART_init+0x76>
	{
		SET_BIT(UCSRB,RXCIE);
    36f6:	aa e2       	ldi	r26, 0x2A	; 42
    36f8:	b0 e0       	ldi	r27, 0x00	; 0
    36fa:	ea e2       	ldi	r30, 0x2A	; 42
    36fc:	f0 e0       	ldi	r31, 0x00	; 0
    36fe:	80 81       	ld	r24, Z
    3700:	80 68       	ori	r24, 0x80	; 128
    3702:	8c 93       	st	X, r24
	}

	/* For Tx Interrupt Enable */
	if (config->TxInt)
    3704:	eb 81       	ldd	r30, Y+3	; 0x03
    3706:	fc 81       	ldd	r31, Y+4	; 0x04
    3708:	84 81       	ldd	r24, Z+4	; 0x04
    370a:	88 23       	and	r24, r24
    370c:	39 f0       	breq	.+14     	; 0x371c <UART_init+0x8e>
	{
		SET_BIT(UCSRB,TXCIE);
    370e:	aa e2       	ldi	r26, 0x2A	; 42
    3710:	b0 e0       	ldi	r27, 0x00	; 0
    3712:	ea e2       	ldi	r30, 0x2A	; 42
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	80 81       	ld	r24, Z
    3718:	80 64       	ori	r24, 0x40	; 64
    371a:	8c 93       	st	X, r24
	}

	/* For Data register Empty Interrupt Enable*/
	if (config->EMPInt)
    371c:	eb 81       	ldd	r30, Y+3	; 0x03
    371e:	fc 81       	ldd	r31, Y+4	; 0x04
    3720:	85 81       	ldd	r24, Z+5	; 0x05
    3722:	88 23       	and	r24, r24
    3724:	39 f0       	breq	.+14     	; 0x3734 <UART_init+0xa6>
	{
		SET_BIT(UCSRB,UDRIE);
    3726:	aa e2       	ldi	r26, 0x2A	; 42
    3728:	b0 e0       	ldi	r27, 0x00	; 0
    372a:	ea e2       	ldi	r30, 0x2A	; 42
    372c:	f0 e0       	ldi	r31, 0x00	; 0
    372e:	80 81       	ld	r24, Z
    3730:	80 62       	ori	r24, 0x20	; 32
    3732:	8c 93       	st	X, r24
	}
	
	/* URSEL must be one when writing the UCSRC	*/
	SET_BIT(UCSRC,URSEL);
    3734:	a0 e4       	ldi	r26, 0x40	; 64
    3736:	b0 e0       	ldi	r27, 0x00	; 0
    3738:	e0 e4       	ldi	r30, 0x40	; 64
    373a:	f0 e0       	ldi	r31, 0x00	; 0
    373c:	80 81       	ld	r24, Z
    373e:	80 68       	ori	r24, 0x80	; 128
    3740:	8c 93       	st	X, r24

	/* Parity settings */
	/* 1100 1111 */			   			/* 0011 0000 */
	UCSRC = (UCSRC & 0xCF ) | (config->parity & 0x30);
    3742:	a0 e4       	ldi	r26, 0x40	; 64
    3744:	b0 e0       	ldi	r27, 0x00	; 0
    3746:	e0 e4       	ldi	r30, 0x40	; 64
    3748:	f0 e0       	ldi	r31, 0x00	; 0
    374a:	80 81       	ld	r24, Z
    374c:	98 2f       	mov	r25, r24
    374e:	9f 7c       	andi	r25, 0xCF	; 207
    3750:	eb 81       	ldd	r30, Y+3	; 0x03
    3752:	fc 81       	ldd	r31, Y+4	; 0x04
    3754:	86 81       	ldd	r24, Z+6	; 0x06
    3756:	80 73       	andi	r24, 0x30	; 48
    3758:	89 2b       	or	r24, r25
    375a:	8c 93       	st	X, r24

	/* Stop bit select */
	UCSRC |= (config->stopbits<<USBS);
    375c:	a0 e4       	ldi	r26, 0x40	; 64
    375e:	b0 e0       	ldi	r27, 0x00	; 0
    3760:	e0 e4       	ldi	r30, 0x40	; 64
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	80 81       	ld	r24, Z
    3766:	28 2f       	mov	r18, r24
    3768:	eb 81       	ldd	r30, Y+3	; 0x03
    376a:	fc 81       	ldd	r31, Y+4	; 0x04
    376c:	87 81       	ldd	r24, Z+7	; 0x07
    376e:	88 2f       	mov	r24, r24
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	88 0f       	add	r24, r24
    3774:	99 1f       	adc	r25, r25
    3776:	88 0f       	add	r24, r24
    3778:	99 1f       	adc	r25, r25
    377a:	88 0f       	add	r24, r24
    377c:	99 1f       	adc	r25, r25
    377e:	82 2b       	or	r24, r18
    3780:	8c 93       	st	X, r24

	/* Data bits */
	switch(config->databits)
    3782:	eb 81       	ldd	r30, Y+3	; 0x03
    3784:	fc 81       	ldd	r31, Y+4	; 0x04
    3786:	80 85       	ldd	r24, Z+8	; 0x08
    3788:	28 2f       	mov	r18, r24
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	3e 83       	std	Y+6, r19	; 0x06
    378e:	2d 83       	std	Y+5, r18	; 0x05
    3790:	8d 81       	ldd	r24, Y+5	; 0x05
    3792:	9e 81       	ldd	r25, Y+6	; 0x06
    3794:	99 23       	and	r25, r25
    3796:	6c f1       	brlt	.+90     	; 0x37f2 <UART_init+0x164>
    3798:	2d 81       	ldd	r18, Y+5	; 0x05
    379a:	3e 81       	ldd	r19, Y+6	; 0x06
    379c:	24 30       	cpi	r18, 0x04	; 4
    379e:	31 05       	cpc	r19, r1
    37a0:	34 f0       	brlt	.+12     	; 0x37ae <UART_init+0x120>
    37a2:	8d 81       	ldd	r24, Y+5	; 0x05
    37a4:	9e 81       	ldd	r25, Y+6	; 0x06
    37a6:	87 30       	cpi	r24, 0x07	; 7
    37a8:	91 05       	cpc	r25, r1
    37aa:	79 f0       	breq	.+30     	; 0x37ca <UART_init+0x13c>
    37ac:	22 c0       	rjmp	.+68     	; 0x37f2 <UART_init+0x164>
	case FIVE :
	case SIX  :
	case SEVEN:
	case EIGHT:
		/* 1111 1001 */					/* 0000 0110 */
		UCSRC = (UCSRC & 0xF9 ) | (config->parity & 0x06);
    37ae:	a0 e4       	ldi	r26, 0x40	; 64
    37b0:	b0 e0       	ldi	r27, 0x00	; 0
    37b2:	e0 e4       	ldi	r30, 0x40	; 64
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	80 81       	ld	r24, Z
    37b8:	98 2f       	mov	r25, r24
    37ba:	99 7f       	andi	r25, 0xF9	; 249
    37bc:	eb 81       	ldd	r30, Y+3	; 0x03
    37be:	fc 81       	ldd	r31, Y+4	; 0x04
    37c0:	86 81       	ldd	r24, Z+6	; 0x06
    37c2:	86 70       	andi	r24, 0x06	; 6
    37c4:	89 2b       	or	r24, r25
    37c6:	8c 93       	st	X, r24
    37c8:	14 c0       	rjmp	.+40     	; 0x37f2 <UART_init+0x164>
		break;
	case NINE:
		UCSRC = (UCSRC & 0xF9 ) | (config->parity & 0x06);
    37ca:	a0 e4       	ldi	r26, 0x40	; 64
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	e0 e4       	ldi	r30, 0x40	; 64
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	80 81       	ld	r24, Z
    37d4:	98 2f       	mov	r25, r24
    37d6:	99 7f       	andi	r25, 0xF9	; 249
    37d8:	eb 81       	ldd	r30, Y+3	; 0x03
    37da:	fc 81       	ldd	r31, Y+4	; 0x04
    37dc:	86 81       	ldd	r24, Z+6	; 0x06
    37de:	86 70       	andi	r24, 0x06	; 6
    37e0:	89 2b       	or	r24, r25
    37e2:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ2);
    37e4:	aa e2       	ldi	r26, 0x2A	; 42
    37e6:	b0 e0       	ldi	r27, 0x00	; 0
    37e8:	ea e2       	ldi	r30, 0x2A	; 42
    37ea:	f0 e0       	ldi	r31, 0x00	; 0
    37ec:	80 81       	ld	r24, Z
    37ee:	84 60       	ori	r24, 0x04	; 4
    37f0:	8c 93       	st	X, r24
		break;
	}
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config->baudrate * 8UL))) - 1);
    37f2:	eb 81       	ldd	r30, Y+3	; 0x03
    37f4:	fc 81       	ldd	r31, Y+4	; 0x04
    37f6:	81 85       	ldd	r24, Z+9	; 0x09
    37f8:	92 85       	ldd	r25, Z+10	; 0x0a
    37fa:	cc 01       	movw	r24, r24
    37fc:	a0 e0       	ldi	r26, 0x00	; 0
    37fe:	b0 e0       	ldi	r27, 0x00	; 0
    3800:	88 0f       	add	r24, r24
    3802:	99 1f       	adc	r25, r25
    3804:	aa 1f       	adc	r26, r26
    3806:	bb 1f       	adc	r27, r27
    3808:	88 0f       	add	r24, r24
    380a:	99 1f       	adc	r25, r25
    380c:	aa 1f       	adc	r26, r26
    380e:	bb 1f       	adc	r27, r27
    3810:	88 0f       	add	r24, r24
    3812:	99 1f       	adc	r25, r25
    3814:	aa 1f       	adc	r26, r26
    3816:	bb 1f       	adc	r27, r27
    3818:	9c 01       	movw	r18, r24
    381a:	ad 01       	movw	r20, r26
    381c:	80 e0       	ldi	r24, 0x00	; 0
    381e:	92 e1       	ldi	r25, 0x12	; 18
    3820:	aa e7       	ldi	r26, 0x7A	; 122
    3822:	b0 e0       	ldi	r27, 0x00	; 0
    3824:	bc 01       	movw	r22, r24
    3826:	cd 01       	movw	r24, r26
    3828:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__udivmodsi4>
    382c:	da 01       	movw	r26, r20
    382e:	c9 01       	movw	r24, r18
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	9a 83       	std	Y+2, r25	; 0x02
    3834:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3836:	e0 e4       	ldi	r30, 0x40	; 64
    3838:	f0 e0       	ldi	r31, 0x00	; 0
    383a:	89 81       	ldd	r24, Y+1	; 0x01
    383c:	9a 81       	ldd	r25, Y+2	; 0x02
    383e:	89 2f       	mov	r24, r25
    3840:	99 27       	eor	r25, r25
    3842:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3844:	e9 e2       	ldi	r30, 0x29	; 41
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	89 81       	ldd	r24, Y+1	; 0x01
    384a:	80 83       	st	Z, r24
}
    384c:	26 96       	adiw	r28, 0x06	; 6
    384e:	0f b6       	in	r0, 0x3f	; 63
    3850:	f8 94       	cli
    3852:	de bf       	out	0x3e, r29	; 62
    3854:	0f be       	out	0x3f, r0	; 63
    3856:	cd bf       	out	0x3d, r28	; 61
    3858:	cf 91       	pop	r28
    385a:	df 91       	pop	r29
    385c:	08 95       	ret

0000385e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    385e:	df 93       	push	r29
    3860:	cf 93       	push	r28
    3862:	0f 92       	push	r0
    3864:	cd b7       	in	r28, 0x3d	; 61
    3866:	de b7       	in	r29, 0x3e	; 62
    3868:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    386a:	eb e2       	ldi	r30, 0x2B	; 43
    386c:	f0 e0       	ldi	r31, 0x00	; 0
    386e:	80 81       	ld	r24, Z
    3870:	88 2f       	mov	r24, r24
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	80 72       	andi	r24, 0x20	; 32
    3876:	90 70       	andi	r25, 0x00	; 0
    3878:	00 97       	sbiw	r24, 0x00	; 0
    387a:	b9 f3       	breq	.-18     	; 0x386a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    387c:	ec e2       	ldi	r30, 0x2C	; 44
    387e:	f0 e0       	ldi	r31, 0x00	; 0
    3880:	89 81       	ldd	r24, Y+1	; 0x01
    3882:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3884:	0f 90       	pop	r0
    3886:	cf 91       	pop	r28
    3888:	df 91       	pop	r29
    388a:	08 95       	ret

0000388c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    388c:	df 93       	push	r29
    388e:	cf 93       	push	r28
    3890:	cd b7       	in	r28, 0x3d	; 61
    3892:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3894:	eb e2       	ldi	r30, 0x2B	; 43
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	80 81       	ld	r24, Z
    389a:	88 23       	and	r24, r24
    389c:	dc f7       	brge	.-10     	; 0x3894 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    389e:	ec e2       	ldi	r30, 0x2C	; 44
    38a0:	f0 e0       	ldi	r31, 0x00	; 0
    38a2:	80 81       	ld	r24, Z
}
    38a4:	cf 91       	pop	r28
    38a6:	df 91       	pop	r29
    38a8:	08 95       	ret

000038aa <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    38aa:	df 93       	push	r29
    38ac:	cf 93       	push	r28
    38ae:	00 d0       	rcall	.+0      	; 0x38b0 <UART_sendString+0x6>
    38b0:	0f 92       	push	r0
    38b2:	cd b7       	in	r28, 0x3d	; 61
    38b4:	de b7       	in	r29, 0x3e	; 62
    38b6:	9b 83       	std	Y+3, r25	; 0x03
    38b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    38ba:	19 82       	std	Y+1, r1	; 0x01
    38bc:	0e c0       	rjmp	.+28     	; 0x38da <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    38be:	89 81       	ldd	r24, Y+1	; 0x01
    38c0:	28 2f       	mov	r18, r24
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	8a 81       	ldd	r24, Y+2	; 0x02
    38c6:	9b 81       	ldd	r25, Y+3	; 0x03
    38c8:	fc 01       	movw	r30, r24
    38ca:	e2 0f       	add	r30, r18
    38cc:	f3 1f       	adc	r31, r19
    38ce:	80 81       	ld	r24, Z
    38d0:	0e 94 2f 1c 	call	0x385e	; 0x385e <UART_sendByte>
		i++;
    38d4:	89 81       	ldd	r24, Y+1	; 0x01
    38d6:	8f 5f       	subi	r24, 0xFF	; 255
    38d8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    38da:	89 81       	ldd	r24, Y+1	; 0x01
    38dc:	28 2f       	mov	r18, r24
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	8a 81       	ldd	r24, Y+2	; 0x02
    38e2:	9b 81       	ldd	r25, Y+3	; 0x03
    38e4:	fc 01       	movw	r30, r24
    38e6:	e2 0f       	add	r30, r18
    38e8:	f3 1f       	adc	r31, r19
    38ea:	80 81       	ld	r24, Z
    38ec:	88 23       	and	r24, r24
    38ee:	39 f7       	brne	.-50     	; 0x38be <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
	UART_sendByte('#');
    38f0:	83 e2       	ldi	r24, 0x23	; 35
    38f2:	0e 94 2f 1c 	call	0x385e	; 0x385e <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    38f6:	0f 90       	pop	r0
    38f8:	0f 90       	pop	r0
    38fa:	0f 90       	pop	r0
    38fc:	cf 91       	pop	r28
    38fe:	df 91       	pop	r29
    3900:	08 95       	ret

00003902 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3902:	0f 93       	push	r16
    3904:	1f 93       	push	r17
    3906:	df 93       	push	r29
    3908:	cf 93       	push	r28
    390a:	00 d0       	rcall	.+0      	; 0x390c <UART_receiveString+0xa>
    390c:	0f 92       	push	r0
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	9b 83       	std	Y+3, r25	; 0x03
    3914:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3916:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	28 2f       	mov	r18, r24
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	8a 81       	ldd	r24, Y+2	; 0x02
    3920:	9b 81       	ldd	r25, Y+3	; 0x03
    3922:	8c 01       	movw	r16, r24
    3924:	02 0f       	add	r16, r18
    3926:	13 1f       	adc	r17, r19
    3928:	0e 94 46 1c 	call	0x388c	; 0x388c <UART_recieveByte>
    392c:	f8 01       	movw	r30, r16
    392e:	80 83       	st	Z, r24
    3930:	0f c0       	rjmp	.+30     	; 0x3950 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3932:	89 81       	ldd	r24, Y+1	; 0x01
    3934:	8f 5f       	subi	r24, 0xFF	; 255
    3936:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3938:	89 81       	ldd	r24, Y+1	; 0x01
    393a:	28 2f       	mov	r18, r24
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	8a 81       	ldd	r24, Y+2	; 0x02
    3940:	9b 81       	ldd	r25, Y+3	; 0x03
    3942:	8c 01       	movw	r16, r24
    3944:	02 0f       	add	r16, r18
    3946:	13 1f       	adc	r17, r19
    3948:	0e 94 46 1c 	call	0x388c	; 0x388c <UART_recieveByte>
    394c:	f8 01       	movw	r30, r16
    394e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3950:	89 81       	ldd	r24, Y+1	; 0x01
    3952:	28 2f       	mov	r18, r24
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	8a 81       	ldd	r24, Y+2	; 0x02
    3958:	9b 81       	ldd	r25, Y+3	; 0x03
    395a:	fc 01       	movw	r30, r24
    395c:	e2 0f       	add	r30, r18
    395e:	f3 1f       	adc	r31, r19
    3960:	80 81       	ld	r24, Z
    3962:	83 32       	cpi	r24, 0x23	; 35
    3964:	31 f7       	brne	.-52     	; 0x3932 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3966:	89 81       	ldd	r24, Y+1	; 0x01
    3968:	28 2f       	mov	r18, r24
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	8a 81       	ldd	r24, Y+2	; 0x02
    396e:	9b 81       	ldd	r25, Y+3	; 0x03
    3970:	fc 01       	movw	r30, r24
    3972:	e2 0f       	add	r30, r18
    3974:	f3 1f       	adc	r31, r19
    3976:	10 82       	st	Z, r1
}
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	0f 90       	pop	r0
    397e:	cf 91       	pop	r28
    3980:	df 91       	pop	r29
    3982:	1f 91       	pop	r17
    3984:	0f 91       	pop	r16
    3986:	08 95       	ret

00003988 <UART_RX_SetCallBack>:
/***************************
 * Set Call Back Functions *
 ***************************/

void UART_RX_SetCallBack(volatile void(*a_ptr)(void))
{
    3988:	df 93       	push	r29
    398a:	cf 93       	push	r28
    398c:	00 d0       	rcall	.+0      	; 0x398e <UART_RX_SetCallBack+0x6>
    398e:	cd b7       	in	r28, 0x3d	; 61
    3990:	de b7       	in	r29, 0x3e	; 62
    3992:	9a 83       	std	Y+2, r25	; 0x02
    3994:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr_UART_RXC = a_ptr;
    3996:	89 81       	ldd	r24, Y+1	; 0x01
    3998:	9a 81       	ldd	r25, Y+2	; 0x02
    399a:	90 93 29 01 	sts	0x0129, r25
    399e:	80 93 28 01 	sts	0x0128, r24
}
    39a2:	0f 90       	pop	r0
    39a4:	0f 90       	pop	r0
    39a6:	cf 91       	pop	r28
    39a8:	df 91       	pop	r29
    39aa:	08 95       	ret

000039ac <UART_TX_SetCallBack>:

void UART_TX_SetCallBack(volatile void(*a_ptr)(void))
{
    39ac:	df 93       	push	r29
    39ae:	cf 93       	push	r28
    39b0:	00 d0       	rcall	.+0      	; 0x39b2 <UART_TX_SetCallBack+0x6>
    39b2:	cd b7       	in	r28, 0x3d	; 61
    39b4:	de b7       	in	r29, 0x3e	; 62
    39b6:	9a 83       	std	Y+2, r25	; 0x02
    39b8:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr_UART_TXC = a_ptr;
    39ba:	89 81       	ldd	r24, Y+1	; 0x01
    39bc:	9a 81       	ldd	r25, Y+2	; 0x02
    39be:	90 93 2b 01 	sts	0x012B, r25
    39c2:	80 93 2a 01 	sts	0x012A, r24
}
    39c6:	0f 90       	pop	r0
    39c8:	0f 90       	pop	r0
    39ca:	cf 91       	pop	r28
    39cc:	df 91       	pop	r29
    39ce:	08 95       	ret

000039d0 <UART_UDRE_SetCallBack>:

void UART_UDRE_SetCallBack(volatile void(*a_ptr)(void))
{
    39d0:	df 93       	push	r29
    39d2:	cf 93       	push	r28
    39d4:	00 d0       	rcall	.+0      	; 0x39d6 <UART_UDRE_SetCallBack+0x6>
    39d6:	cd b7       	in	r28, 0x3d	; 61
    39d8:	de b7       	in	r29, 0x3e	; 62
    39da:	9a 83       	std	Y+2, r25	; 0x02
    39dc:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr_UART_UDRE = a_ptr;
    39de:	89 81       	ldd	r24, Y+1	; 0x01
    39e0:	9a 81       	ldd	r25, Y+2	; 0x02
    39e2:	90 93 2d 01 	sts	0x012D, r25
    39e6:	80 93 2c 01 	sts	0x012C, r24
}
    39ea:	0f 90       	pop	r0
    39ec:	0f 90       	pop	r0
    39ee:	cf 91       	pop	r28
    39f0:	df 91       	pop	r29
    39f2:	08 95       	ret

000039f4 <__udivmodsi4>:
    39f4:	a1 e2       	ldi	r26, 0x21	; 33
    39f6:	1a 2e       	mov	r1, r26
    39f8:	aa 1b       	sub	r26, r26
    39fa:	bb 1b       	sub	r27, r27
    39fc:	fd 01       	movw	r30, r26
    39fe:	0d c0       	rjmp	.+26     	; 0x3a1a <__udivmodsi4_ep>

00003a00 <__udivmodsi4_loop>:
    3a00:	aa 1f       	adc	r26, r26
    3a02:	bb 1f       	adc	r27, r27
    3a04:	ee 1f       	adc	r30, r30
    3a06:	ff 1f       	adc	r31, r31
    3a08:	a2 17       	cp	r26, r18
    3a0a:	b3 07       	cpc	r27, r19
    3a0c:	e4 07       	cpc	r30, r20
    3a0e:	f5 07       	cpc	r31, r21
    3a10:	20 f0       	brcs	.+8      	; 0x3a1a <__udivmodsi4_ep>
    3a12:	a2 1b       	sub	r26, r18
    3a14:	b3 0b       	sbc	r27, r19
    3a16:	e4 0b       	sbc	r30, r20
    3a18:	f5 0b       	sbc	r31, r21

00003a1a <__udivmodsi4_ep>:
    3a1a:	66 1f       	adc	r22, r22
    3a1c:	77 1f       	adc	r23, r23
    3a1e:	88 1f       	adc	r24, r24
    3a20:	99 1f       	adc	r25, r25
    3a22:	1a 94       	dec	r1
    3a24:	69 f7       	brne	.-38     	; 0x3a00 <__udivmodsi4_loop>
    3a26:	60 95       	com	r22
    3a28:	70 95       	com	r23
    3a2a:	80 95       	com	r24
    3a2c:	90 95       	com	r25
    3a2e:	9b 01       	movw	r18, r22
    3a30:	ac 01       	movw	r20, r24
    3a32:	bd 01       	movw	r22, r26
    3a34:	cf 01       	movw	r24, r30
    3a36:	08 95       	ret

00003a38 <__prologue_saves__>:
    3a38:	2f 92       	push	r2
    3a3a:	3f 92       	push	r3
    3a3c:	4f 92       	push	r4
    3a3e:	5f 92       	push	r5
    3a40:	6f 92       	push	r6
    3a42:	7f 92       	push	r7
    3a44:	8f 92       	push	r8
    3a46:	9f 92       	push	r9
    3a48:	af 92       	push	r10
    3a4a:	bf 92       	push	r11
    3a4c:	cf 92       	push	r12
    3a4e:	df 92       	push	r13
    3a50:	ef 92       	push	r14
    3a52:	ff 92       	push	r15
    3a54:	0f 93       	push	r16
    3a56:	1f 93       	push	r17
    3a58:	cf 93       	push	r28
    3a5a:	df 93       	push	r29
    3a5c:	cd b7       	in	r28, 0x3d	; 61
    3a5e:	de b7       	in	r29, 0x3e	; 62
    3a60:	ca 1b       	sub	r28, r26
    3a62:	db 0b       	sbc	r29, r27
    3a64:	0f b6       	in	r0, 0x3f	; 63
    3a66:	f8 94       	cli
    3a68:	de bf       	out	0x3e, r29	; 62
    3a6a:	0f be       	out	0x3f, r0	; 63
    3a6c:	cd bf       	out	0x3d, r28	; 61
    3a6e:	09 94       	ijmp

00003a70 <__epilogue_restores__>:
    3a70:	2a 88       	ldd	r2, Y+18	; 0x12
    3a72:	39 88       	ldd	r3, Y+17	; 0x11
    3a74:	48 88       	ldd	r4, Y+16	; 0x10
    3a76:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a78:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a7a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a7c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a7e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a80:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a82:	b9 84       	ldd	r11, Y+9	; 0x09
    3a84:	c8 84       	ldd	r12, Y+8	; 0x08
    3a86:	df 80       	ldd	r13, Y+7	; 0x07
    3a88:	ee 80       	ldd	r14, Y+6	; 0x06
    3a8a:	fd 80       	ldd	r15, Y+5	; 0x05
    3a8c:	0c 81       	ldd	r16, Y+4	; 0x04
    3a8e:	1b 81       	ldd	r17, Y+3	; 0x03
    3a90:	aa 81       	ldd	r26, Y+2	; 0x02
    3a92:	b9 81       	ldd	r27, Y+1	; 0x01
    3a94:	ce 0f       	add	r28, r30
    3a96:	d1 1d       	adc	r29, r1
    3a98:	0f b6       	in	r0, 0x3f	; 63
    3a9a:	f8 94       	cli
    3a9c:	de bf       	out	0x3e, r29	; 62
    3a9e:	0f be       	out	0x3f, r0	; 63
    3aa0:	cd bf       	out	0x3d, r28	; 61
    3aa2:	ed 01       	movw	r28, r26
    3aa4:	08 95       	ret

00003aa6 <itoa>:
    3aa6:	fb 01       	movw	r30, r22
    3aa8:	9f 01       	movw	r18, r30
    3aaa:	e8 94       	clt
    3aac:	42 30       	cpi	r20, 0x02	; 2
    3aae:	c4 f0       	brlt	.+48     	; 0x3ae0 <itoa+0x3a>
    3ab0:	45 32       	cpi	r20, 0x25	; 37
    3ab2:	b4 f4       	brge	.+44     	; 0x3ae0 <itoa+0x3a>
    3ab4:	4a 30       	cpi	r20, 0x0A	; 10
    3ab6:	29 f4       	brne	.+10     	; 0x3ac2 <itoa+0x1c>
    3ab8:	97 fb       	bst	r25, 7
    3aba:	1e f4       	brtc	.+6      	; 0x3ac2 <itoa+0x1c>
    3abc:	90 95       	com	r25
    3abe:	81 95       	neg	r24
    3ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac2:	64 2f       	mov	r22, r20
    3ac4:	77 27       	eor	r23, r23
    3ac6:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <__udivmodhi4>
    3aca:	80 5d       	subi	r24, 0xD0	; 208
    3acc:	8a 33       	cpi	r24, 0x3A	; 58
    3ace:	0c f0       	brlt	.+2      	; 0x3ad2 <itoa+0x2c>
    3ad0:	89 5d       	subi	r24, 0xD9	; 217
    3ad2:	81 93       	st	Z+, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	00 97       	sbiw	r24, 0x00	; 0
    3ad8:	a1 f7       	brne	.-24     	; 0x3ac2 <itoa+0x1c>
    3ada:	16 f4       	brtc	.+4      	; 0x3ae0 <itoa+0x3a>
    3adc:	5d e2       	ldi	r21, 0x2D	; 45
    3ade:	51 93       	st	Z+, r21
    3ae0:	10 82       	st	Z, r1
    3ae2:	c9 01       	movw	r24, r18
    3ae4:	0c 94 74 1d 	jmp	0x3ae8	; 0x3ae8 <strrev>

00003ae8 <strrev>:
    3ae8:	dc 01       	movw	r26, r24
    3aea:	fc 01       	movw	r30, r24
    3aec:	67 2f       	mov	r22, r23
    3aee:	71 91       	ld	r23, Z+
    3af0:	77 23       	and	r23, r23
    3af2:	e1 f7       	brne	.-8      	; 0x3aec <strrev+0x4>
    3af4:	32 97       	sbiw	r30, 0x02	; 2
    3af6:	04 c0       	rjmp	.+8      	; 0x3b00 <strrev+0x18>
    3af8:	7c 91       	ld	r23, X
    3afa:	6d 93       	st	X+, r22
    3afc:	70 83       	st	Z, r23
    3afe:	62 91       	ld	r22, -Z
    3b00:	ae 17       	cp	r26, r30
    3b02:	bf 07       	cpc	r27, r31
    3b04:	c8 f3       	brcs	.-14     	; 0x3af8 <strrev+0x10>
    3b06:	08 95       	ret

00003b08 <__udivmodhi4>:
    3b08:	aa 1b       	sub	r26, r26
    3b0a:	bb 1b       	sub	r27, r27
    3b0c:	51 e1       	ldi	r21, 0x11	; 17
    3b0e:	07 c0       	rjmp	.+14     	; 0x3b1e <__udivmodhi4_ep>

00003b10 <__udivmodhi4_loop>:
    3b10:	aa 1f       	adc	r26, r26
    3b12:	bb 1f       	adc	r27, r27
    3b14:	a6 17       	cp	r26, r22
    3b16:	b7 07       	cpc	r27, r23
    3b18:	10 f0       	brcs	.+4      	; 0x3b1e <__udivmodhi4_ep>
    3b1a:	a6 1b       	sub	r26, r22
    3b1c:	b7 0b       	sbc	r27, r23

00003b1e <__udivmodhi4_ep>:
    3b1e:	88 1f       	adc	r24, r24
    3b20:	99 1f       	adc	r25, r25
    3b22:	5a 95       	dec	r21
    3b24:	a9 f7       	brne	.-22     	; 0x3b10 <__udivmodhi4_loop>
    3b26:	80 95       	com	r24
    3b28:	90 95       	com	r25
    3b2a:	bc 01       	movw	r22, r24
    3b2c:	cd 01       	movw	r24, r26
    3b2e:	08 95       	ret

00003b30 <_exit>:
    3b30:	f8 94       	cli

00003b32 <__stop_program>:
    3b32:	ff cf       	rjmp	.-2      	; 0x3b32 <__stop_program>
