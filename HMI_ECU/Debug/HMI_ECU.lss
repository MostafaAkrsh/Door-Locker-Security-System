
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  00800060  000039a4  00003a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800144  00800144  00003b1c  2**0
                  ALLOC
  3 .stab         00003834  00000000  00000000  00003b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001602  00000000  00000000  00007350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008952  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008a92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008c02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a84b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b736  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c4e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c644  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c8d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d09f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__vector_3>
      10:	0c 94 af 14 	jmp	0x295e	; 0x295e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__vector_8>
      24:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__vector_11>
      30:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__vector_12>
      34:	0c 94 19 1a 	jmp	0x3432	; 0x3432 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 34       	cpi	r26, 0x44	; 68
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e4       	ldi	r26, 0x44	; 68
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 36       	cpi	r26, 0x66	; 102
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <main>
      8a:	0c 94 d0 1c 	jmp	0x39a0	; 0x39a0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e3       	ldi	r26, 0x3B	; 59
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 70 1c 	jmp	0x38e0	; 0x38e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b e3       	ldi	r24, 0x3B	; 59
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 70 1c 	jmp	0x38e0	; 0x38e0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <check_identical>:
extern uint8 password1[PASS_SIZE];
extern uint8 password2[PASS_SIZE];
extern uint8 passwordCheck[PASS_SIZE];

/*function to check the two passwords are identical or no*/
uint8 check_identical(uint8* pass1, uint8* pass2) {
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	27 97       	sbiw	r28, 0x07	; 7
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	9c 83       	std	Y+4, r25	; 0x04
    11d8:	8b 83       	std	Y+3, r24	; 0x03
    11da:	7e 83       	std	Y+6, r23	; 0x06
    11dc:	6d 83       	std	Y+5, r22	; 0x05
	int pass_index;
	for (pass_index = 0; pass_index < PASS_SIZE; pass_index++) {
    11de:	1a 82       	std	Y+2, r1	; 0x02
    11e0:	19 82       	std	Y+1, r1	; 0x01
    11e2:	19 c0       	rjmp	.+50     	; 0x1216 <check_identical+0x54>
		if (pass1[pass_index] != pass2[pass_index]) {
    11e4:	29 81       	ldd	r18, Y+1	; 0x01
    11e6:	3a 81       	ldd	r19, Y+2	; 0x02
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	fc 01       	movw	r30, r24
    11ee:	e2 0f       	add	r30, r18
    11f0:	f3 1f       	adc	r31, r19
    11f2:	40 81       	ld	r20, Z
    11f4:	29 81       	ldd	r18, Y+1	; 0x01
    11f6:	3a 81       	ldd	r19, Y+2	; 0x02
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	fc 01       	movw	r30, r24
    11fe:	e2 0f       	add	r30, r18
    1200:	f3 1f       	adc	r31, r19
    1202:	80 81       	ld	r24, Z
    1204:	48 17       	cp	r20, r24
    1206:	11 f0       	breq	.+4      	; 0x120c <check_identical+0x4a>
			return NO;
    1208:	1f 82       	std	Y+7, r1	; 0x07
    120a:	0c c0       	rjmp	.+24     	; 0x1224 <check_identical+0x62>
extern uint8 passwordCheck[PASS_SIZE];

/*function to check the two passwords are identical or no*/
uint8 check_identical(uint8* pass1, uint8* pass2) {
	int pass_index;
	for (pass_index = 0; pass_index < PASS_SIZE; pass_index++) {
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	9a 81       	ldd	r25, Y+2	; 0x02
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	9a 83       	std	Y+2, r25	; 0x02
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	9a 81       	ldd	r25, Y+2	; 0x02
    121a:	85 30       	cpi	r24, 0x05	; 5
    121c:	91 05       	cpc	r25, r1
    121e:	14 f3       	brlt	.-60     	; 0x11e4 <check_identical+0x22>
		if (pass1[pass_index] != pass2[pass_index]) {
			return NO;
		}
	}

	return YES;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	8f 83       	std	Y+7, r24	; 0x07
    1224:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1226:	27 96       	adiw	r28, 0x07	; 7
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <enter_password>:
/* function to make the user chooses the password */
void enter_password(void) {
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	60 97       	sbiw	r28, 0x10	; 16
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    124c:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_clearScreen>
	LCD_displayString("Please Enter Password:");
    1250:	80 e6       	ldi	r24, 0x60	; 96
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayString>
	LCD_moveCursor(1, 5);
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	65 e0       	ldi	r22, 0x05	; 5
    125c:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <LCD_moveCursor>
	uint8 key = 0;
    1260:	18 8a       	std	Y+16, r1	; 0x10
	uint8 password_index = 0;
    1262:	1f 86       	std	Y+15, r1	; 0x0f
    1264:	83 c0       	rjmp	.+262    	; 0x136c <enter_password+0x134>
	while (password_index != PASS_SIZE) {
		key = KEYPAD_getPressedKey();
    1266:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <KEYPAD_getPressedKey>
    126a:	88 8b       	std	Y+16, r24	; 0x10
		LCD_displayCharacter('*');
    126c:	8a e2       	ldi	r24, 0x2A	; 42
    126e:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayCharacter>
		password1[password_index] = key;
    1272:	8f 85       	ldd	r24, Y+15	; 0x0f
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	fc 01       	movw	r30, r24
    127a:	ef 59       	subi	r30, 0x9F	; 159
    127c:	fe 4f       	sbci	r31, 0xFE	; 254
    127e:	88 89       	ldd	r24, Y+16	; 0x10
    1280:	80 83       	st	Z, r24
		password_index++;
    1282:	8f 85       	ldd	r24, Y+15	; 0x0f
    1284:	8f 5f       	subi	r24, 0xFF	; 255
    1286:	8f 87       	std	Y+15, r24	; 0x0f
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	aa ef       	ldi	r26, 0xFA	; 250
    128e:	b3 e4       	ldi	r27, 0x43	; 67
    1290:	8b 87       	std	Y+11, r24	; 0x0b
    1292:	9c 87       	std	Y+12, r25	; 0x0c
    1294:	ad 87       	std	Y+13, r26	; 0x0d
    1296:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1298:	6b 85       	ldd	r22, Y+11	; 0x0b
    129a:	7c 85       	ldd	r23, Y+12	; 0x0c
    129c:	8d 85       	ldd	r24, Y+13	; 0x0d
    129e:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	4a ef       	ldi	r20, 0xFA	; 250
    12a6:	54 e4       	ldi	r21, 0x44	; 68
    12a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	8f 83       	std	Y+7, r24	; 0x07
    12b2:	98 87       	std	Y+8, r25	; 0x08
    12b4:	a9 87       	std	Y+9, r26	; 0x09
    12b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ba:	78 85       	ldd	r23, Y+8	; 0x08
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e8       	ldi	r20, 0x80	; 128
    12c6:	5f e3       	ldi	r21, 0x3F	; 63
    12c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12cc:	88 23       	and	r24, r24
    12ce:	2c f4       	brge	.+10     	; 0x12da <enter_password+0xa2>
		__ticks = 1;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	9e 83       	std	Y+6, r25	; 0x06
    12d6:	8d 83       	std	Y+5, r24	; 0x05
    12d8:	3f c0       	rjmp	.+126    	; 0x1358 <enter_password+0x120>
	else if (__tmp > 65535)
    12da:	6f 81       	ldd	r22, Y+7	; 0x07
    12dc:	78 85       	ldd	r23, Y+8	; 0x08
    12de:	89 85       	ldd	r24, Y+9	; 0x09
    12e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	3f ef       	ldi	r19, 0xFF	; 255
    12e6:	4f e7       	ldi	r20, 0x7F	; 127
    12e8:	57 e4       	ldi	r21, 0x47	; 71
    12ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ee:	18 16       	cp	r1, r24
    12f0:	4c f5       	brge	.+82     	; 0x1344 <enter_password+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e2       	ldi	r20, 0x20	; 32
    1300:	51 e4       	ldi	r21, 0x41	; 65
    1302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	bc 01       	movw	r22, r24
    130c:	cd 01       	movw	r24, r26
    130e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	9e 83       	std	Y+6, r25	; 0x06
    1318:	8d 83       	std	Y+5, r24	; 0x05
    131a:	0f c0       	rjmp	.+30     	; 0x133a <enter_password+0x102>
    131c:	88 ec       	ldi	r24, 0xC8	; 200
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	9c 83       	std	Y+4, r25	; 0x04
    1322:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	f1 f7       	brne	.-4      	; 0x1328 <enter_password+0xf0>
    132c:	9c 83       	std	Y+4, r25	; 0x04
    132e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	9e 83       	std	Y+6, r25	; 0x06
    1338:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	69 f7       	brne	.-38     	; 0x131c <enter_password+0xe4>
    1342:	14 c0       	rjmp	.+40     	; 0x136c <enter_password+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1344:	6f 81       	ldd	r22, Y+7	; 0x07
    1346:	78 85       	ldd	r23, Y+8	; 0x08
    1348:	89 85       	ldd	r24, Y+9	; 0x09
    134a:	9a 85       	ldd	r25, Y+10	; 0x0a
    134c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	9e 83       	std	Y+6, r25	; 0x06
    1356:	8d 83       	std	Y+5, r24	; 0x05
    1358:	8d 81       	ldd	r24, Y+5	; 0x05
    135a:	9e 81       	ldd	r25, Y+6	; 0x06
    135c:	9a 83       	std	Y+2, r25	; 0x02
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	9a 81       	ldd	r25, Y+2	; 0x02
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <enter_password+0x12c>
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_displayString("Please Enter Password:");
	LCD_moveCursor(1, 5);
	uint8 key = 0;
	uint8 password_index = 0;
	while (password_index != PASS_SIZE) {
    136c:	8f 85       	ldd	r24, Y+15	; 0x0f
    136e:	85 30       	cpi	r24, 0x05	; 5
    1370:	09 f0       	breq	.+2      	; 0x1374 <enter_password+0x13c>
    1372:	79 cf       	rjmp	.-270    	; 0x1266 <enter_password+0x2e>
		LCD_displayCharacter('*');
		password1[password_index] = key;
		password_index++;
		_delay_ms(500); /* Press time */
	}
}
    1374:	60 96       	adiw	r28, 0x10	; 16
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <reenter_password>:
/* function to make the user reenter the password to make sure that he entered it as he intended */
uint8 reenter_password(void) {
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	62 97       	sbiw	r28, 0x12	; 18
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    139a:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_clearScreen>
	LCD_displayString("Please Reenter Password:");
    139e:	87 e7       	ldi	r24, 0x77	; 119
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayString>
	LCD_moveCursor(1, 5);
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	65 e0       	ldi	r22, 0x05	; 5
    13aa:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <LCD_moveCursor>
	uint8 key = 0;
    13ae:	1a 8a       	std	Y+18, r1	; 0x12
	uint8 password_index = 0;
    13b0:	19 8a       	std	Y+17, r1	; 0x11
    13b2:	83 c0       	rjmp	.+262    	; 0x14ba <reenter_password+0x134>

	while (password_index != PASS_SIZE) {
		key = KEYPAD_getPressedKey();
    13b4:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <KEYPAD_getPressedKey>
    13b8:	8a 8b       	std	Y+18, r24	; 0x12
		LCD_displayCharacter('*');
    13ba:	8a e2       	ldi	r24, 0x2A	; 42
    13bc:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayCharacter>
		password2[password_index] = key;
    13c0:	89 89       	ldd	r24, Y+17	; 0x11
    13c2:	88 2f       	mov	r24, r24
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	fc 01       	movw	r30, r24
    13c8:	e4 5a       	subi	r30, 0xA4	; 164
    13ca:	fe 4f       	sbci	r31, 0xFE	; 254
    13cc:	8a 89       	ldd	r24, Y+18	; 0x12
    13ce:	80 83       	st	Z, r24
		password_index++;
    13d0:	89 89       	ldd	r24, Y+17	; 0x11
    13d2:	8f 5f       	subi	r24, 0xFF	; 255
    13d4:	89 8b       	std	Y+17, r24	; 0x11
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	aa ef       	ldi	r26, 0xFA	; 250
    13dc:	b3 e4       	ldi	r27, 0x43	; 67
    13de:	8b 87       	std	Y+11, r24	; 0x0b
    13e0:	9c 87       	std	Y+12, r25	; 0x0c
    13e2:	ad 87       	std	Y+13, r26	; 0x0d
    13e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	4a ef       	ldi	r20, 0xFA	; 250
    13f4:	54 e4       	ldi	r21, 0x44	; 68
    13f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	8f 83       	std	Y+7, r24	; 0x07
    1400:	98 87       	std	Y+8, r25	; 0x08
    1402:	a9 87       	std	Y+9, r26	; 0x09
    1404:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1406:	6f 81       	ldd	r22, Y+7	; 0x07
    1408:	78 85       	ldd	r23, Y+8	; 0x08
    140a:	89 85       	ldd	r24, Y+9	; 0x09
    140c:	9a 85       	ldd	r25, Y+10	; 0x0a
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e8       	ldi	r20, 0x80	; 128
    1414:	5f e3       	ldi	r21, 0x3F	; 63
    1416:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    141a:	88 23       	and	r24, r24
    141c:	2c f4       	brge	.+10     	; 0x1428 <reenter_password+0xa2>
		__ticks = 1;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	9e 83       	std	Y+6, r25	; 0x06
    1424:	8d 83       	std	Y+5, r24	; 0x05
    1426:	3f c0       	rjmp	.+126    	; 0x14a6 <reenter_password+0x120>
	else if (__tmp > 65535)
    1428:	6f 81       	ldd	r22, Y+7	; 0x07
    142a:	78 85       	ldd	r23, Y+8	; 0x08
    142c:	89 85       	ldd	r24, Y+9	; 0x09
    142e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	3f ef       	ldi	r19, 0xFF	; 255
    1434:	4f e7       	ldi	r20, 0x7F	; 127
    1436:	57 e4       	ldi	r21, 0x47	; 71
    1438:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    143c:	18 16       	cp	r1, r24
    143e:	4c f5       	brge	.+82     	; 0x1492 <reenter_password+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1440:	6b 85       	ldd	r22, Y+11	; 0x0b
    1442:	7c 85       	ldd	r23, Y+12	; 0x0c
    1444:	8d 85       	ldd	r24, Y+13	; 0x0d
    1446:	9e 85       	ldd	r25, Y+14	; 0x0e
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e2       	ldi	r20, 0x20	; 32
    144e:	51 e4       	ldi	r21, 0x41	; 65
    1450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	bc 01       	movw	r22, r24
    145a:	cd 01       	movw	r24, r26
    145c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	9e 83       	std	Y+6, r25	; 0x06
    1466:	8d 83       	std	Y+5, r24	; 0x05
    1468:	0f c0       	rjmp	.+30     	; 0x1488 <reenter_password+0x102>
    146a:	88 ec       	ldi	r24, 0xC8	; 200
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9c 83       	std	Y+4, r25	; 0x04
    1470:	8b 83       	std	Y+3, r24	; 0x03
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	9c 81       	ldd	r25, Y+4	; 0x04
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <reenter_password+0xf0>
    147a:	9c 83       	std	Y+4, r25	; 0x04
    147c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147e:	8d 81       	ldd	r24, Y+5	; 0x05
    1480:	9e 81       	ldd	r25, Y+6	; 0x06
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	9e 83       	std	Y+6, r25	; 0x06
    1486:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	9e 81       	ldd	r25, Y+6	; 0x06
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	69 f7       	brne	.-38     	; 0x146a <reenter_password+0xe4>
    1490:	14 c0       	rjmp	.+40     	; 0x14ba <reenter_password+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1492:	6f 81       	ldd	r22, Y+7	; 0x07
    1494:	78 85       	ldd	r23, Y+8	; 0x08
    1496:	89 85       	ldd	r24, Y+9	; 0x09
    1498:	9a 85       	ldd	r25, Y+10	; 0x0a
    149a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	9e 83       	std	Y+6, r25	; 0x06
    14a4:	8d 83       	std	Y+5, r24	; 0x05
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	9e 81       	ldd	r25, Y+6	; 0x06
    14aa:	9a 83       	std	Y+2, r25	; 0x02
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	9a 81       	ldd	r25, Y+2	; 0x02
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <reenter_password+0x12c>
    14b6:	9a 83       	std	Y+2, r25	; 0x02
    14b8:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString("Please Reenter Password:");
	LCD_moveCursor(1, 5);
	uint8 key = 0;
	uint8 password_index = 0;

	while (password_index != PASS_SIZE) {
    14ba:	89 89       	ldd	r24, Y+17	; 0x11
    14bc:	85 30       	cpi	r24, 0x05	; 5
    14be:	09 f0       	breq	.+2      	; 0x14c2 <reenter_password+0x13c>
    14c0:	79 cf       	rjmp	.-270    	; 0x13b4 <reenter_password+0x2e>
		password2[password_index] = key;
		password_index++;
		_delay_ms(500); /* Press time */
	}

	uint8 identical = check_identical(password1, password2);
    14c2:	81 e6       	ldi	r24, 0x61	; 97
    14c4:	91 e0       	ldi	r25, 0x01	; 1
    14c6:	2c e5       	ldi	r18, 0x5C	; 92
    14c8:	31 e0       	ldi	r19, 0x01	; 1
    14ca:	b9 01       	movw	r22, r18
    14cc:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <check_identical>
    14d0:	88 8b       	std	Y+16, r24	; 0x10

	if (identical) {
    14d2:	88 89       	ldd	r24, Y+16	; 0x10
    14d4:	88 23       	and	r24, r24
    14d6:	69 f0       	breq	.+26     	; 0x14f2 <reenter_password+0x16c>
		UART_sendByte('!');
    14d8:	81 e2       	ldi	r24, 0x21	; 33
    14da:	0e 94 67 1b 	call	0x36ce	; 0x36ce <UART_sendByte>
		uint8 key = UART_recieveByte();
    14de:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <UART_recieveByte>
    14e2:	8f 87       	std	Y+15, r24	; 0x0f
		if (key == '!')
    14e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e6:	81 32       	cpi	r24, 0x21	; 33
    14e8:	21 f4       	brne	.+8      	; 0x14f2 <reenter_password+0x16c>
			UART_sendString(password1);
    14ea:	81 e6       	ldi	r24, 0x61	; 97
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	0e 94 8d 1b 	call	0x371a	; 0x371a <UART_sendString>
	}

	return identical;
    14f2:	88 89       	ldd	r24, Y+16	; 0x10
}
    14f4:	62 96       	adiw	r28, 0x12	; 18
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <password_not_identical>:

/* display on the lcd that the passwords are not the same  */
void password_not_identical(void) {
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	2e 97       	sbiw	r28, 0x0e	; 14
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    151a:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_clearScreen>
	LCD_displayString("inputs are not identical");
    151e:	80 e9       	ldi	r24, 0x90	; 144
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayString>
	LCD_moveCursor(1, 0);
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <LCD_moveCursor>
	LCD_displayString("Please Enter same inputs twice.");
    152e:	89 ea       	ldi	r24, 0xA9	; 169
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayString>
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e8       	ldi	r25, 0x80	; 128
    153a:	ab e3       	ldi	r26, 0x3B	; 59
    153c:	b5 e4       	ldi	r27, 0x45	; 69
    153e:	8b 87       	std	Y+11, r24	; 0x0b
    1540:	9c 87       	std	Y+12, r25	; 0x0c
    1542:	ad 87       	std	Y+13, r26	; 0x0d
    1544:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1546:	6b 85       	ldd	r22, Y+11	; 0x0b
    1548:	7c 85       	ldd	r23, Y+12	; 0x0c
    154a:	8d 85       	ldd	r24, Y+13	; 0x0d
    154c:	9e 85       	ldd	r25, Y+14	; 0x0e
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	4a ef       	ldi	r20, 0xFA	; 250
    1554:	54 e4       	ldi	r21, 0x44	; 68
    1556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	8f 83       	std	Y+7, r24	; 0x07
    1560:	98 87       	std	Y+8, r25	; 0x08
    1562:	a9 87       	std	Y+9, r26	; 0x09
    1564:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1566:	6f 81       	ldd	r22, Y+7	; 0x07
    1568:	78 85       	ldd	r23, Y+8	; 0x08
    156a:	89 85       	ldd	r24, Y+9	; 0x09
    156c:	9a 85       	ldd	r25, Y+10	; 0x0a
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e8       	ldi	r20, 0x80	; 128
    1574:	5f e3       	ldi	r21, 0x3F	; 63
    1576:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    157a:	88 23       	and	r24, r24
    157c:	2c f4       	brge	.+10     	; 0x1588 <password_not_identical+0x82>
		__ticks = 1;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
    1586:	3f c0       	rjmp	.+126    	; 0x1606 <password_not_identical+0x100>
	else if (__tmp > 65535)
    1588:	6f 81       	ldd	r22, Y+7	; 0x07
    158a:	78 85       	ldd	r23, Y+8	; 0x08
    158c:	89 85       	ldd	r24, Y+9	; 0x09
    158e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	3f ef       	ldi	r19, 0xFF	; 255
    1594:	4f e7       	ldi	r20, 0x7F	; 127
    1596:	57 e4       	ldi	r21, 0x47	; 71
    1598:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    159c:	18 16       	cp	r1, r24
    159e:	4c f5       	brge	.+82     	; 0x15f2 <password_not_identical+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	40 e2       	ldi	r20, 0x20	; 32
    15ae:	51 e4       	ldi	r21, 0x41	; 65
    15b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	bc 01       	movw	r22, r24
    15ba:	cd 01       	movw	r24, r26
    15bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	9e 83       	std	Y+6, r25	; 0x06
    15c6:	8d 83       	std	Y+5, r24	; 0x05
    15c8:	0f c0       	rjmp	.+30     	; 0x15e8 <password_not_identical+0xe2>
    15ca:	88 ec       	ldi	r24, 0xC8	; 200
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9c 83       	std	Y+4, r25	; 0x04
    15d0:	8b 83       	std	Y+3, r24	; 0x03
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	f1 f7       	brne	.-4      	; 0x15d6 <password_not_identical+0xd0>
    15da:	9c 83       	std	Y+4, r25	; 0x04
    15dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	9e 83       	std	Y+6, r25	; 0x06
    15e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ea:	9e 81       	ldd	r25, Y+6	; 0x06
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	69 f7       	brne	.-38     	; 0x15ca <password_not_identical+0xc4>
    15f0:	14 c0       	rjmp	.+40     	; 0x161a <password_not_identical+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f2:	6f 81       	ldd	r22, Y+7	; 0x07
    15f4:	78 85       	ldd	r23, Y+8	; 0x08
    15f6:	89 85       	ldd	r24, Y+9	; 0x09
    15f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	9e 83       	std	Y+6, r25	; 0x06
    1604:	8d 83       	std	Y+5, r24	; 0x05
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	9e 81       	ldd	r25, Y+6	; 0x06
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	9a 81       	ldd	r25, Y+2	; 0x02
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <password_not_identical+0x10c>
    1616:	9a 83       	std	Y+2, r25	; 0x02
    1618:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
}
    161a:	2e 96       	adiw	r28, 0x0e	; 14
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <main_options>:

/* function to display the options list *
 * + Open Door                          *
 * - Change Password                    */
Option main_options(void) {
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	6e 97       	sbiw	r28, 0x1e	; 30
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1640:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    1644:	89 ec       	ldi	r24, 0xC9	; 201
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayString>
	LCD_moveCursor(1, 0);
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <LCD_moveCursor>
	LCD_displayString("- : Change Password");
    1654:	87 ed       	ldi	r24, 0xD7	; 215
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayString>

	uint8 key = 0;
    165c:	1d 8e       	std	Y+29, r1	; 0x1d
	while (1) {
		key = KEYPAD_getPressedKey();
    165e:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <KEYPAD_getPressedKey>
    1662:	8d 8f       	std	Y+29, r24	; 0x1d

		if (key == '+') {
    1664:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1666:	8b 32       	cpi	r24, 0x2B	; 43
    1668:	09 f0       	breq	.+2      	; 0x166c <main_options+0x40>
    166a:	74 c0       	rjmp	.+232    	; 0x1754 <main_options+0x128>
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	aa ef       	ldi	r26, 0xFA	; 250
    1672:	b3 e4       	ldi	r27, 0x43	; 67
    1674:	89 8f       	std	Y+25, r24	; 0x19
    1676:	9a 8f       	std	Y+26, r25	; 0x1a
    1678:	ab 8f       	std	Y+27, r26	; 0x1b
    167a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167c:	69 8d       	ldd	r22, Y+25	; 0x19
    167e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1680:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1682:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	4a ef       	ldi	r20, 0xFA	; 250
    168a:	54 e4       	ldi	r21, 0x44	; 68
    168c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	8d 8b       	std	Y+21, r24	; 0x15
    1696:	9e 8b       	std	Y+22, r25	; 0x16
    1698:	af 8b       	std	Y+23, r26	; 0x17
    169a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    169c:	6d 89       	ldd	r22, Y+21	; 0x15
    169e:	7e 89       	ldd	r23, Y+22	; 0x16
    16a0:	8f 89       	ldd	r24, Y+23	; 0x17
    16a2:	98 8d       	ldd	r25, Y+24	; 0x18
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e8       	ldi	r20, 0x80	; 128
    16aa:	5f e3       	ldi	r21, 0x3F	; 63
    16ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b0:	88 23       	and	r24, r24
    16b2:	2c f4       	brge	.+10     	; 0x16be <main_options+0x92>
		__ticks = 1;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9c 8b       	std	Y+20, r25	; 0x14
    16ba:	8b 8b       	std	Y+19, r24	; 0x13
    16bc:	3f c0       	rjmp	.+126    	; 0x173c <main_options+0x110>
	else if (__tmp > 65535)
    16be:	6d 89       	ldd	r22, Y+21	; 0x15
    16c0:	7e 89       	ldd	r23, Y+22	; 0x16
    16c2:	8f 89       	ldd	r24, Y+23	; 0x17
    16c4:	98 8d       	ldd	r25, Y+24	; 0x18
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	3f ef       	ldi	r19, 0xFF	; 255
    16ca:	4f e7       	ldi	r20, 0x7F	; 127
    16cc:	57 e4       	ldi	r21, 0x47	; 71
    16ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d2:	18 16       	cp	r1, r24
    16d4:	4c f5       	brge	.+82     	; 0x1728 <main_options+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d6:	69 8d       	ldd	r22, Y+25	; 0x19
    16d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e2       	ldi	r20, 0x20	; 32
    16e4:	51 e4       	ldi	r21, 0x41	; 65
    16e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	9c 8b       	std	Y+20, r25	; 0x14
    16fc:	8b 8b       	std	Y+19, r24	; 0x13
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <main_options+0xf2>
    1700:	88 ec       	ldi	r24, 0xC8	; 200
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	9a 8b       	std	Y+18, r25	; 0x12
    1706:	89 8b       	std	Y+17, r24	; 0x11
    1708:	89 89       	ldd	r24, Y+17	; 0x11
    170a:	9a 89       	ldd	r25, Y+18	; 0x12
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <main_options+0xe0>
    1710:	9a 8b       	std	Y+18, r25	; 0x12
    1712:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1714:	8b 89       	ldd	r24, Y+19	; 0x13
    1716:	9c 89       	ldd	r25, Y+20	; 0x14
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	9c 8b       	std	Y+20, r25	; 0x14
    171c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171e:	8b 89       	ldd	r24, Y+19	; 0x13
    1720:	9c 89       	ldd	r25, Y+20	; 0x14
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	69 f7       	brne	.-38     	; 0x1700 <main_options+0xd4>
    1726:	14 c0       	rjmp	.+40     	; 0x1750 <main_options+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1728:	6d 89       	ldd	r22, Y+21	; 0x15
    172a:	7e 89       	ldd	r23, Y+22	; 0x16
    172c:	8f 89       	ldd	r24, Y+23	; 0x17
    172e:	98 8d       	ldd	r25, Y+24	; 0x18
    1730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9c 8b       	std	Y+20, r25	; 0x14
    173a:	8b 8b       	std	Y+19, r24	; 0x13
    173c:	8b 89       	ldd	r24, Y+19	; 0x13
    173e:	9c 89       	ldd	r25, Y+20	; 0x14
    1740:	98 8b       	std	Y+16, r25	; 0x10
    1742:	8f 87       	std	Y+15, r24	; 0x0f
    1744:	8f 85       	ldd	r24, Y+15	; 0x0f
    1746:	98 89       	ldd	r25, Y+16	; 0x10
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <main_options+0x11c>
    174c:	98 8b       	std	Y+16, r25	; 0x10
    174e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500); /* Press time */
			return OPENDOOR;
    1750:	1e 8e       	std	Y+30, r1	; 0x1e
    1752:	7b c0       	rjmp	.+246    	; 0x184a <main_options+0x21e>
			break;
		}
		if (key == '-') {
    1754:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1756:	8d 32       	cpi	r24, 0x2D	; 45
    1758:	09 f0       	breq	.+2      	; 0x175c <main_options+0x130>
    175a:	81 cf       	rjmp	.-254    	; 0x165e <main_options+0x32>
			UART_sendByte('-');
    175c:	8d e2       	ldi	r24, 0x2D	; 45
    175e:	0e 94 67 1b 	call	0x36ce	; 0x36ce <UART_sendByte>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	aa ef       	ldi	r26, 0xFA	; 250
    1768:	b3 e4       	ldi	r27, 0x43	; 67
    176a:	8b 87       	std	Y+11, r24	; 0x0b
    176c:	9c 87       	std	Y+12, r25	; 0x0c
    176e:	ad 87       	std	Y+13, r26	; 0x0d
    1770:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1772:	6b 85       	ldd	r22, Y+11	; 0x0b
    1774:	7c 85       	ldd	r23, Y+12	; 0x0c
    1776:	8d 85       	ldd	r24, Y+13	; 0x0d
    1778:	9e 85       	ldd	r25, Y+14	; 0x0e
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	4a ef       	ldi	r20, 0xFA	; 250
    1780:	54 e4       	ldi	r21, 0x44	; 68
    1782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	8f 83       	std	Y+7, r24	; 0x07
    178c:	98 87       	std	Y+8, r25	; 0x08
    178e:	a9 87       	std	Y+9, r26	; 0x09
    1790:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1792:	6f 81       	ldd	r22, Y+7	; 0x07
    1794:	78 85       	ldd	r23, Y+8	; 0x08
    1796:	89 85       	ldd	r24, Y+9	; 0x09
    1798:	9a 85       	ldd	r25, Y+10	; 0x0a
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e8       	ldi	r20, 0x80	; 128
    17a0:	5f e3       	ldi	r21, 0x3F	; 63
    17a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a6:	88 23       	and	r24, r24
    17a8:	2c f4       	brge	.+10     	; 0x17b4 <main_options+0x188>
		__ticks = 1;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9e 83       	std	Y+6, r25	; 0x06
    17b0:	8d 83       	std	Y+5, r24	; 0x05
    17b2:	3f c0       	rjmp	.+126    	; 0x1832 <main_options+0x206>
	else if (__tmp > 65535)
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	78 85       	ldd	r23, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	3f ef       	ldi	r19, 0xFF	; 255
    17c0:	4f e7       	ldi	r20, 0x7F	; 127
    17c2:	57 e4       	ldi	r21, 0x47	; 71
    17c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c8:	18 16       	cp	r1, r24
    17ca:	4c f5       	brge	.+82     	; 0x181e <main_options+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e2       	ldi	r20, 0x20	; 32
    17da:	51 e4       	ldi	r21, 0x41	; 65
    17dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	bc 01       	movw	r22, r24
    17e6:	cd 01       	movw	r24, r26
    17e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	0f c0       	rjmp	.+30     	; 0x1814 <main_options+0x1e8>
    17f6:	88 ec       	ldi	r24, 0xC8	; 200
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9c 83       	std	Y+4, r25	; 0x04
    17fc:	8b 83       	std	Y+3, r24	; 0x03
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <main_options+0x1d6>
    1806:	9c 83       	std	Y+4, r25	; 0x04
    1808:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	9e 83       	std	Y+6, r25	; 0x06
    1812:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	69 f7       	brne	.-38     	; 0x17f6 <main_options+0x1ca>
    181c:	14 c0       	rjmp	.+40     	; 0x1846 <main_options+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181e:	6f 81       	ldd	r22, Y+7	; 0x07
    1820:	78 85       	ldd	r23, Y+8	; 0x08
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	8d 83       	std	Y+5, r24	; 0x05
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	f1 f7       	brne	.-4      	; 0x183e <main_options+0x212>
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500); /* Press time */
			return CHANGEPW;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	8e 8f       	std	Y+30, r24	; 0x1e
			break;
		}
	}
    184a:	8e 8d       	ldd	r24, Y+30	; 0x1e

}
    184c:	6e 96       	adiw	r28, 0x1e	; 30
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <enter_saved_password>:

/* function asks the user to enter the saved password*/
uint8 enter_saved_password(void) {
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	61 97       	sbiw	r28, 0x11	; 17
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1872:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_clearScreen>
	LCD_displayString("Please Enter Password:");
    1876:	80 e6       	ldi	r24, 0x60	; 96
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayString>
	LCD_moveCursor(1, 5);
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	65 e0       	ldi	r22, 0x05	; 5
    1882:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <LCD_moveCursor>
	uint8 key = 0;
    1886:	18 8a       	std	Y+16, r1	; 0x10
	uint8 password_index = 0;
    1888:	1f 86       	std	Y+15, r1	; 0x0f
    188a:	83 c0       	rjmp	.+262    	; 0x1992 <enter_saved_password+0x134>
	while (password_index != PASS_SIZE) {
		key = KEYPAD_getPressedKey();
    188c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <KEYPAD_getPressedKey>
    1890:	88 8b       	std	Y+16, r24	; 0x10
		LCD_displayCharacter('*');
    1892:	8a e2       	ldi	r24, 0x2A	; 42
    1894:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayCharacter>
		passwordCheck[password_index] = key;
    1898:	8f 85       	ldd	r24, Y+15	; 0x0f
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	fc 01       	movw	r30, r24
    18a0:	e9 5a       	subi	r30, 0xA9	; 169
    18a2:	fe 4f       	sbci	r31, 0xFE	; 254
    18a4:	88 89       	ldd	r24, Y+16	; 0x10
    18a6:	80 83       	st	Z, r24
		password_index++;
    18a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18aa:	8f 5f       	subi	r24, 0xFF	; 255
    18ac:	8f 87       	std	Y+15, r24	; 0x0f
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	aa ef       	ldi	r26, 0xFA	; 250
    18b4:	b3 e4       	ldi	r27, 0x43	; 67
    18b6:	8b 87       	std	Y+11, r24	; 0x0b
    18b8:	9c 87       	std	Y+12, r25	; 0x0c
    18ba:	ad 87       	std	Y+13, r26	; 0x0d
    18bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18be:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	4a ef       	ldi	r20, 0xFA	; 250
    18cc:	54 e4       	ldi	r21, 0x44	; 68
    18ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	8f 83       	std	Y+7, r24	; 0x07
    18d8:	98 87       	std	Y+8, r25	; 0x08
    18da:	a9 87       	std	Y+9, r26	; 0x09
    18dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18de:	6f 81       	ldd	r22, Y+7	; 0x07
    18e0:	78 85       	ldd	r23, Y+8	; 0x08
    18e2:	89 85       	ldd	r24, Y+9	; 0x09
    18e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e8       	ldi	r20, 0x80	; 128
    18ec:	5f e3       	ldi	r21, 0x3F	; 63
    18ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18f2:	88 23       	and	r24, r24
    18f4:	2c f4       	brge	.+10     	; 0x1900 <enter_saved_password+0xa2>
		__ticks = 1;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	9e 83       	std	Y+6, r25	; 0x06
    18fc:	8d 83       	std	Y+5, r24	; 0x05
    18fe:	3f c0       	rjmp	.+126    	; 0x197e <enter_saved_password+0x120>
	else if (__tmp > 65535)
    1900:	6f 81       	ldd	r22, Y+7	; 0x07
    1902:	78 85       	ldd	r23, Y+8	; 0x08
    1904:	89 85       	ldd	r24, Y+9	; 0x09
    1906:	9a 85       	ldd	r25, Y+10	; 0x0a
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	3f ef       	ldi	r19, 0xFF	; 255
    190c:	4f e7       	ldi	r20, 0x7F	; 127
    190e:	57 e4       	ldi	r21, 0x47	; 71
    1910:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1914:	18 16       	cp	r1, r24
    1916:	4c f5       	brge	.+82     	; 0x196a <enter_saved_password+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1918:	6b 85       	ldd	r22, Y+11	; 0x0b
    191a:	7c 85       	ldd	r23, Y+12	; 0x0c
    191c:	8d 85       	ldd	r24, Y+13	; 0x0d
    191e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e2       	ldi	r20, 0x20	; 32
    1926:	51 e4       	ldi	r21, 0x41	; 65
    1928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	bc 01       	movw	r22, r24
    1932:	cd 01       	movw	r24, r26
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	0f c0       	rjmp	.+30     	; 0x1960 <enter_saved_password+0x102>
    1942:	88 ec       	ldi	r24, 0xC8	; 200
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9c 83       	std	Y+4, r25	; 0x04
    1948:	8b 83       	std	Y+3, r24	; 0x03
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	9c 81       	ldd	r25, Y+4	; 0x04
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <enter_saved_password+0xf0>
    1952:	9c 83       	std	Y+4, r25	; 0x04
    1954:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1956:	8d 81       	ldd	r24, Y+5	; 0x05
    1958:	9e 81       	ldd	r25, Y+6	; 0x06
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	9e 83       	std	Y+6, r25	; 0x06
    195e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	9e 81       	ldd	r25, Y+6	; 0x06
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	69 f7       	brne	.-38     	; 0x1942 <enter_saved_password+0xe4>
    1968:	14 c0       	rjmp	.+40     	; 0x1992 <enter_saved_password+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196a:	6f 81       	ldd	r22, Y+7	; 0x07
    196c:	78 85       	ldd	r23, Y+8	; 0x08
    196e:	89 85       	ldd	r24, Y+9	; 0x09
    1970:	9a 85       	ldd	r25, Y+10	; 0x0a
    1972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	9e 83       	std	Y+6, r25	; 0x06
    197c:	8d 83       	std	Y+5, r24	; 0x05
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	9a 83       	std	Y+2, r25	; 0x02
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <enter_saved_password+0x12c>
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_displayString("Please Enter Password:");
	LCD_moveCursor(1, 5);
	uint8 key = 0;
	uint8 password_index = 0;
	while (password_index != PASS_SIZE) {
    1992:	8f 85       	ldd	r24, Y+15	; 0x0f
    1994:	85 30       	cpi	r24, 0x05	; 5
    1996:	09 f0       	breq	.+2      	; 0x199a <enter_saved_password+0x13c>
    1998:	79 cf       	rjmp	.-270    	; 0x188c <enter_saved_password+0x2e>
		passwordCheck[password_index] = key;
		password_index++;
		_delay_ms(500); /* Press time */
	}

	UART_sendByte('+');
    199a:	8b e2       	ldi	r24, 0x2B	; 43
    199c:	0e 94 67 1b 	call	0x36ce	; 0x36ce <UART_sendByte>
	key = UART_recieveByte();
    19a0:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <UART_recieveByte>
    19a4:	88 8b       	std	Y+16, r24	; 0x10
	if (key == '!')
    19a6:	88 89       	ldd	r24, Y+16	; 0x10
    19a8:	81 32       	cpi	r24, 0x21	; 33
    19aa:	21 f4       	brne	.+8      	; 0x19b4 <enter_saved_password+0x156>
		UART_sendString(passwordCheck);
    19ac:	87 e5       	ldi	r24, 0x57	; 87
    19ae:	91 e0       	ldi	r25, 0x01	; 1
    19b0:	0e 94 8d 1b 	call	0x371a	; 0x371a <UART_sendString>

	UART_sendByte('+');
    19b4:	8b e2       	ldi	r24, 0x2B	; 43
    19b6:	0e 94 67 1b 	call	0x36ce	; 0x36ce <UART_sendByte>

	key = UART_recieveByte();
    19ba:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <UART_recieveByte>
    19be:	88 8b       	std	Y+16, r24	; 0x10

	if (key == '+') {
    19c0:	88 89       	ldd	r24, Y+16	; 0x10
    19c2:	8b 32       	cpi	r24, 0x2B	; 43
    19c4:	19 f4       	brne	.+6      	; 0x19cc <enter_saved_password+0x16e>
		return 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	89 8b       	std	Y+17, r24	; 0x11
    19ca:	01 c0       	rjmp	.+2      	; 0x19ce <enter_saved_password+0x170>
	}

	return 0;
    19cc:	19 8a       	std	Y+17, r1	; 0x11
    19ce:	89 89       	ldd	r24, Y+17	; 0x11
}
    19d0:	61 96       	adiw	r28, 0x11	; 17
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <open_door>:

/* function to run the motor to open the door */
void open_door(void) {
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    19ea:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_clearScreen>
	LCD_displayString("Opening Door");
    19ee:	8b ee       	ldi	r24, 0xEB	; 235
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayString>

	UART_recieveByte();
    19f6:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <UART_recieveByte>
}
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <ask_to_close>:

/* ask the user wheather he wants to close the door */
uint8 ask_to_close(void) {
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <ask_to_close+0x6>
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1a0a:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_clearScreen>
	LCD_displayString("Door is open");
    1a0e:	88 ef       	ldi	r24, 0xF8	; 248
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayString>
	LCD_moveCursor(1, 0);
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <LCD_moveCursor>
	LCD_displayString("Click + to close it");
    1a1e:	85 e0       	ldi	r24, 0x05	; 5
    1a20:	91 e0       	ldi	r25, 0x01	; 1
    1a22:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayString>

	uint8 key = 0;
    1a26:	19 82       	std	Y+1, r1	; 0x01

	key = KEYPAD_getPressedKey();
    1a28:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <KEYPAD_getPressedKey>
    1a2c:	89 83       	std	Y+1, r24	; 0x01
	if (key == '+') {
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	8b 32       	cpi	r24, 0x2B	; 43
    1a32:	79 f4       	brne	.+30     	; 0x1a52 <ask_to_close+0x52>
		LCD_clearScreen();
    1a34:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_clearScreen>
		LCD_displayString("Closing Door");
    1a38:	89 e1       	ldi	r24, 0x19	; 25
    1a3a:	91 e0       	ldi	r25, 0x01	; 1
    1a3c:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayString>
		UART_sendByte('+');
    1a40:	8b e2       	ldi	r24, 0x2B	; 43
    1a42:	0e 94 67 1b 	call	0x36ce	; 0x36ce <UART_sendByte>
		key = UART_recieveByte();
    1a46:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <UART_recieveByte>
    1a4a:	89 83       	std	Y+1, r24	; 0x01
		return 1;
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	8a 83       	std	Y+2, r24	; 0x02
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <ask_to_close+0x54>
	}
	return 0;
    1a52:	1a 82       	std	Y+2, r1	; 0x02
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <close_door>:

/* run the motor a-cw to close the door */
void close_door(void) {
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	2e 97       	sbiw	r28, 0x0e	; 14
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1a74:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_clearScreen>
	LCD_displayString("Door is closed");
    1a78:	86 e2       	ldi	r24, 0x26	; 38
    1a7a:	91 e0       	ldi	r25, 0x01	; 1
    1a7c:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayString>
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	aa e7       	ldi	r26, 0x7A	; 122
    1a86:	b4 e4       	ldi	r27, 0x44	; 68
    1a88:	8b 87       	std	Y+11, r24	; 0x0b
    1a8a:	9c 87       	std	Y+12, r25	; 0x0c
    1a8c:	ad 87       	std	Y+13, r26	; 0x0d
    1a8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	4a ef       	ldi	r20, 0xFA	; 250
    1a9e:	54 e4       	ldi	r21, 0x44	; 68
    1aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	8f 83       	std	Y+7, r24	; 0x07
    1aaa:	98 87       	std	Y+8, r25	; 0x08
    1aac:	a9 87       	std	Y+9, r26	; 0x09
    1aae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab2:	78 85       	ldd	r23, Y+8	; 0x08
    1ab4:	89 85       	ldd	r24, Y+9	; 0x09
    1ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e8       	ldi	r20, 0x80	; 128
    1abe:	5f e3       	ldi	r21, 0x3F	; 63
    1ac0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ac4:	88 23       	and	r24, r24
    1ac6:	2c f4       	brge	.+10     	; 0x1ad2 <close_door+0x72>
		__ticks = 1;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	9e 83       	std	Y+6, r25	; 0x06
    1ace:	8d 83       	std	Y+5, r24	; 0x05
    1ad0:	3f c0       	rjmp	.+126    	; 0x1b50 <close_door+0xf0>
	else if (__tmp > 65535)
    1ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad4:	78 85       	ldd	r23, Y+8	; 0x08
    1ad6:	89 85       	ldd	r24, Y+9	; 0x09
    1ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	3f ef       	ldi	r19, 0xFF	; 255
    1ade:	4f e7       	ldi	r20, 0x7F	; 127
    1ae0:	57 e4       	ldi	r21, 0x47	; 71
    1ae2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ae6:	18 16       	cp	r1, r24
    1ae8:	4c f5       	brge	.+82     	; 0x1b3c <close_door+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e2       	ldi	r20, 0x20	; 32
    1af8:	51 e4       	ldi	r21, 0x41	; 65
    1afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	bc 01       	movw	r22, r24
    1b04:	cd 01       	movw	r24, r26
    1b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	9e 83       	std	Y+6, r25	; 0x06
    1b10:	8d 83       	std	Y+5, r24	; 0x05
    1b12:	0f c0       	rjmp	.+30     	; 0x1b32 <close_door+0xd2>
    1b14:	88 ec       	ldi	r24, 0xC8	; 200
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9c 83       	std	Y+4, r25	; 0x04
    1b1a:	8b 83       	std	Y+3, r24	; 0x03
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <close_door+0xc0>
    1b24:	9c 83       	std	Y+4, r25	; 0x04
    1b26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	69 f7       	brne	.-38     	; 0x1b14 <close_door+0xb4>
    1b3a:	14 c0       	rjmp	.+40     	; 0x1b64 <close_door+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3e:	78 85       	ldd	r23, Y+8	; 0x08
    1b40:	89 85       	ldd	r24, Y+9	; 0x09
    1b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	9e 83       	std	Y+6, r25	; 0x06
    1b4e:	8d 83       	std	Y+5, r24	; 0x05
    1b50:	8d 81       	ldd	r24, Y+5	; 0x05
    1b52:	9e 81       	ldd	r25, Y+6	; 0x06
    1b54:	9a 83       	std	Y+2, r25	; 0x02
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <close_door+0xfc>
    1b60:	9a 83       	std	Y+2, r25	; 0x02
    1b62:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000); /* Press time */

}
    1b64:	2e 96       	adiw	r28, 0x0e	; 14
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <KEYPAD_getPressedKey+0x6>
    1b7c:	0f 92       	push	r0
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1b82:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1b84:	1b 82       	std	Y+3, r1	; 0x03
    1b86:	43 c0       	rjmp	.+134    	; 0x1c0e <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1b88:	82 e0       	ldi	r24, 0x02	; 2
    1b8a:	60 e0       	ldi	r22, 0x00	; 0
    1b8c:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	98 2f       	mov	r25, r24
    1b94:	9c 5f       	subi	r25, 0xFC	; 252
    1b96:	82 e0       	ldi	r24, 0x02	; 2
    1b98:	69 2f       	mov	r22, r25
    1b9a:	41 e0       	ldi	r20, 0x01	; 1
    1b9c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	88 2f       	mov	r24, r24
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	9c 01       	movw	r18, r24
    1ba8:	2c 5f       	subi	r18, 0xFC	; 252
    1baa:	3f 4f       	sbci	r19, 0xFF	; 255
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <KEYPAD_getPressedKey+0x40>
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	2a 95       	dec	r18
    1bb8:	e2 f7       	brpl	.-8      	; 0x1bb2 <KEYPAD_getPressedKey+0x3c>
    1bba:	80 95       	com	r24
    1bbc:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
    1bc0:	69 81       	ldd	r22, Y+1	; 0x01
    1bc2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1bc6:	1a 82       	std	Y+2, r1	; 0x02
    1bc8:	1c c0       	rjmp	.+56     	; 0x1c02 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	6a 81       	ldd	r22, Y+2	; 0x02
    1bce:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1bd2:	88 23       	and	r24, r24
    1bd4:	99 f4       	brne	.+38     	; 0x1bfc <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	98 2f       	mov	r25, r24
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	89 0f       	add	r24, r25
    1bea:	8f 5f       	subi	r24, 0xFF	; 255
    1bec:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	8f 5f       	subi	r24, 0xFF	; 255
    1c00:	8a 83       	std	Y+2, r24	; 0x02
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	84 30       	cpi	r24, 0x04	; 4
    1c06:	08 f3       	brcs	.-62     	; 0x1bca <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	8f 5f       	subi	r24, 0xFF	; 255
    1c0c:	8b 83       	std	Y+3, r24	; 0x03
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	84 30       	cpi	r24, 0x04	; 4
    1c12:	08 f4       	brcc	.+2      	; 0x1c16 <KEYPAD_getPressedKey+0xa0>
    1c14:	b9 cf       	rjmp	.-142    	; 0x1b88 <KEYPAD_getPressedKey+0x12>
    1c16:	b6 cf       	rjmp	.-148    	; 0x1b84 <KEYPAD_getPressedKey+0xe>

00001c18 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	00 d0       	rcall	.+0      	; 0x1c1e <KEYPAD_4x4_adjustKeyNumber+0x6>
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1c26:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	3c 83       	std	Y+4, r19	; 0x04
    1c30:	2b 83       	std	Y+3, r18	; 0x03
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	88 30       	cpi	r24, 0x08	; 8
    1c38:	91 05       	cpc	r25, r1
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <KEYPAD_4x4_adjustKeyNumber+0x26>
    1c3c:	70 c0       	rjmp	.+224    	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x106>
    1c3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c40:	3c 81       	ldd	r19, Y+4	; 0x04
    1c42:	29 30       	cpi	r18, 0x09	; 9
    1c44:	31 05       	cpc	r19, r1
    1c46:	5c f5       	brge	.+86     	; 0x1c9e <KEYPAD_4x4_adjustKeyNumber+0x86>
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	84 30       	cpi	r24, 0x04	; 4
    1c4e:	91 05       	cpc	r25, r1
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1c52:	59 c0       	rjmp	.+178    	; 0x1d06 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1c54:	2b 81       	ldd	r18, Y+3	; 0x03
    1c56:	3c 81       	ldd	r19, Y+4	; 0x04
    1c58:	25 30       	cpi	r18, 0x05	; 5
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	9c f4       	brge	.+38     	; 0x1c84 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	9c 81       	ldd	r25, Y+4	; 0x04
    1c62:	82 30       	cpi	r24, 0x02	; 2
    1c64:	91 05       	cpc	r25, r1
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <KEYPAD_4x4_adjustKeyNumber+0x52>
    1c68:	48 c0       	rjmp	.+144    	; 0x1cfa <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1c6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6e:	23 30       	cpi	r18, 0x03	; 3
    1c70:	31 05       	cpc	r19, r1
    1c72:	0c f0       	brlt	.+2      	; 0x1c76 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1c74:	45 c0       	rjmp	.+138    	; 0x1d00 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c80:	39 c0       	rjmp	.+114    	; 0x1cf4 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1c82:	68 c0       	rjmp	.+208    	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x13c>
    1c84:	2b 81       	ldd	r18, Y+3	; 0x03
    1c86:	3c 81       	ldd	r19, Y+4	; 0x04
    1c88:	26 30       	cpi	r18, 0x06	; 6
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1c8e:	41 c0       	rjmp	.+130    	; 0x1d12 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	87 30       	cpi	r24, 0x07	; 7
    1c96:	91 05       	cpc	r25, r1
    1c98:	0c f0       	brlt	.+2      	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x84>
    1c9a:	3e c0       	rjmp	.+124    	; 0x1d18 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1c9c:	37 c0       	rjmp	.+110    	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1c9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca2:	2c 30       	cpi	r18, 0x0C	; 12
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <KEYPAD_4x4_adjustKeyNumber+0x92>
    1ca8:	46 c0       	rjmp	.+140    	; 0x1d36 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	9c 81       	ldd	r25, Y+4	; 0x04
    1cae:	8d 30       	cpi	r24, 0x0D	; 13
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	5c f4       	brge	.+22     	; 0x1cca <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1cb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb8:	2a 30       	cpi	r18, 0x0A	; 10
    1cba:	31 05       	cpc	r19, r1
    1cbc:	b1 f1       	breq	.+108    	; 0x1d2a <KEYPAD_4x4_adjustKeyNumber+0x112>
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	8b 30       	cpi	r24, 0x0B	; 11
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	a4 f5       	brge	.+104    	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1cc8:	2d c0       	rjmp	.+90     	; 0x1d24 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1cca:	2b 81       	ldd	r18, Y+3	; 0x03
    1ccc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cce:	2e 30       	cpi	r18, 0x0E	; 14
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	b9 f1       	breq	.+110    	; 0x1d42 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	8e 30       	cpi	r24, 0x0E	; 14
    1cda:	91 05       	cpc	r25, r1
    1cdc:	7c f1       	brlt	.+94     	; 0x1d3c <KEYPAD_4x4_adjustKeyNumber+0x124>
    1cde:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce2:	2f 30       	cpi	r18, 0x0F	; 15
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	81 f1       	breq	.+96     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x130>
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	80 31       	cpi	r24, 0x10	; 16
    1cee:	91 05       	cpc	r25, r1
    1cf0:	71 f1       	breq	.+92     	; 0x1d4e <KEYPAD_4x4_adjustKeyNumber+0x136>
    1cf2:	30 c0       	rjmp	.+96     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    1cf4:	87 e3       	ldi	r24, 0x37	; 55
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	2f c0       	rjmp	.+94     	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    1cfa:	88 e3       	ldi	r24, 0x38	; 56
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	2c c0       	rjmp	.+88     	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    1d00:	89 e3       	ldi	r24, 0x39	; 57
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	29 c0       	rjmp	.+82     	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1d06:	85 e2       	ldi	r24, 0x25	; 37
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	26 c0       	rjmp	.+76     	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    1d0c:	84 e3       	ldi	r24, 0x34	; 52
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	23 c0       	rjmp	.+70     	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    1d12:	85 e3       	ldi	r24, 0x35	; 53
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	20 c0       	rjmp	.+64     	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    1d18:	86 e3       	ldi	r24, 0x36	; 54
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	1d c0       	rjmp	.+58     	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1d1e:	8a e2       	ldi	r24, 0x2A	; 42
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	1a c0       	rjmp	.+52     	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;		
		case 9: keypad_button = '1';
    1d24:	81 e3       	ldi	r24, 0x31	; 49
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	17 c0       	rjmp	.+46     	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    1d2a:	82 e3       	ldi	r24, 0x32	; 50
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	14 c0       	rjmp	.+40     	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    1d30:	83 e3       	ldi	r24, 0x33	; 51
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	11 c0       	rjmp	.+34     	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1d36:	8d e2       	ldi	r24, 0x2D	; 45
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	0e c0       	rjmp	.+28     	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1d3c:	8d e0       	ldi	r24, 0x0D	; 13
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	0b c0       	rjmp	.+22     	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;			
		case 14: keypad_button = '0';
    1d42:	80 e3       	ldi	r24, 0x30	; 48
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	08 c0       	rjmp	.+16     	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1d48:	8d e3       	ldi	r24, 0x3D	; 61
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	05 c0       	rjmp	.+10     	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1d4e:	8b e2       	ldi	r24, 0x2B	; 43
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	41 e0       	ldi	r20, 0x01	; 1
    1d76:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	61 e0       	ldi	r22, 0x01	; 1
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	62 e0       	ldi	r22, 0x02	; 2
    1d88:	41 e0       	ldi	r20, 0x01	; 1
    1d8a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	6f ef       	ldi	r22, 0xFF	; 255
    1d92:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1d96:	88 e3       	ldi	r24, 0x38	; 56
    1d98:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1d9c:	8c e0       	ldi	r24, 0x0C	; 12
    1d9e:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_sendCommand>
}
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    1db6:	e9 97       	sbiw	r28, 0x39	; 57
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	61 e0       	ldi	r22, 0x01	; 1
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a0 e8       	ldi	r26, 0x80	; 128
    1dde:	bf e3       	ldi	r27, 0x3F	; 63
    1de0:	8d ab       	std	Y+53, r24	; 0x35
    1de2:	9e ab       	std	Y+54, r25	; 0x36
    1de4:	af ab       	std	Y+55, r26	; 0x37
    1de6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de8:	6d a9       	ldd	r22, Y+53	; 0x35
    1dea:	7e a9       	ldd	r23, Y+54	; 0x36
    1dec:	8f a9       	ldd	r24, Y+55	; 0x37
    1dee:	98 ad       	ldd	r25, Y+56	; 0x38
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a ef       	ldi	r20, 0xFA	; 250
    1df6:	54 e4       	ldi	r21, 0x44	; 68
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	89 ab       	std	Y+49, r24	; 0x31
    1e02:	9a ab       	std	Y+50, r25	; 0x32
    1e04:	ab ab       	std	Y+51, r26	; 0x33
    1e06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e08:	69 a9       	ldd	r22, Y+49	; 0x31
    1e0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f e3       	ldi	r21, 0x3F	; 63
    1e18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	2c f4       	brge	.+10     	; 0x1e2a <LCD_sendCommand+0x7c>
		__ticks = 1;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	98 ab       	std	Y+48, r25	; 0x30
    1e26:	8f a7       	std	Y+47, r24	; 0x2f
    1e28:	3f c0       	rjmp	.+126    	; 0x1ea8 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1e2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e30:	9c a9       	ldd	r25, Y+52	; 0x34
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	4f e7       	ldi	r20, 0x7F	; 127
    1e38:	57 e4       	ldi	r21, 0x47	; 71
    1e3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e3e:	18 16       	cp	r1, r24
    1e40:	4c f5       	brge	.+82     	; 0x1e94 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e42:	6d a9       	ldd	r22, Y+53	; 0x35
    1e44:	7e a9       	ldd	r23, Y+54	; 0x36
    1e46:	8f a9       	ldd	r24, Y+55	; 0x37
    1e48:	98 ad       	ldd	r25, Y+56	; 0x38
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e2       	ldi	r20, 0x20	; 32
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	98 ab       	std	Y+48, r25	; 0x30
    1e68:	8f a7       	std	Y+47, r24	; 0x2f
    1e6a:	0f c0       	rjmp	.+30     	; 0x1e8a <LCD_sendCommand+0xdc>
    1e6c:	88 ec       	ldi	r24, 0xC8	; 200
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9e a7       	std	Y+46, r25	; 0x2e
    1e72:	8d a7       	std	Y+45, r24	; 0x2d
    1e74:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e76:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <LCD_sendCommand+0xca>
    1e7c:	9e a7       	std	Y+46, r25	; 0x2e
    1e7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e82:	98 a9       	ldd	r25, Y+48	; 0x30
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	98 ab       	std	Y+48, r25	; 0x30
    1e88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	69 f7       	brne	.-38     	; 0x1e6c <LCD_sendCommand+0xbe>
    1e92:	14 c0       	rjmp	.+40     	; 0x1ebc <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e94:	69 a9       	ldd	r22, Y+49	; 0x31
    1e96:	7a a9       	ldd	r23, Y+50	; 0x32
    1e98:	8b a9       	ldd	r24, Y+51	; 0x33
    1e9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	98 ab       	std	Y+48, r25	; 0x30
    1ea6:	8f a7       	std	Y+47, r24	; 0x2f
    1ea8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eaa:	98 a9       	ldd	r25, Y+48	; 0x30
    1eac:	9c a7       	std	Y+44, r25	; 0x2c
    1eae:	8b a7       	std	Y+43, r24	; 0x2b
    1eb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eb2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <LCD_sendCommand+0x106>
    1eb8:	9c a7       	std	Y+44, r25	; 0x2c
    1eba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	62 e0       	ldi	r22, 0x02	; 2
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a0 e8       	ldi	r26, 0x80	; 128
    1ecc:	bf e3       	ldi	r27, 0x3F	; 63
    1ece:	8f a3       	std	Y+39, r24	; 0x27
    1ed0:	98 a7       	std	Y+40, r25	; 0x28
    1ed2:	a9 a7       	std	Y+41, r26	; 0x29
    1ed4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ed8:	78 a5       	ldd	r23, Y+40	; 0x28
    1eda:	89 a5       	ldd	r24, Y+41	; 0x29
    1edc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	4a ef       	ldi	r20, 0xFA	; 250
    1ee4:	54 e4       	ldi	r21, 0x44	; 68
    1ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	8b a3       	std	Y+35, r24	; 0x23
    1ef0:	9c a3       	std	Y+36, r25	; 0x24
    1ef2:	ad a3       	std	Y+37, r26	; 0x25
    1ef4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ef6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef8:	7c a1       	ldd	r23, Y+36	; 0x24
    1efa:	8d a1       	ldd	r24, Y+37	; 0x25
    1efc:	9e a1       	ldd	r25, Y+38	; 0x26
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	2c f4       	brge	.+10     	; 0x1f18 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9a a3       	std	Y+34, r25	; 0x22
    1f14:	89 a3       	std	Y+33, r24	; 0x21
    1f16:	3f c0       	rjmp	.+126    	; 0x1f96 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1f18:	6b a1       	ldd	r22, Y+35	; 0x23
    1f1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	3f ef       	ldi	r19, 0xFF	; 255
    1f24:	4f e7       	ldi	r20, 0x7F	; 127
    1f26:	57 e4       	ldi	r21, 0x47	; 71
    1f28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f2c:	18 16       	cp	r1, r24
    1f2e:	4c f5       	brge	.+82     	; 0x1f82 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f30:	6f a1       	ldd	r22, Y+39	; 0x27
    1f32:	78 a5       	ldd	r23, Y+40	; 0x28
    1f34:	89 a5       	ldd	r24, Y+41	; 0x29
    1f36:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e2       	ldi	r20, 0x20	; 32
    1f3e:	51 e4       	ldi	r21, 0x41	; 65
    1f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	9a a3       	std	Y+34, r25	; 0x22
    1f56:	89 a3       	std	Y+33, r24	; 0x21
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <LCD_sendCommand+0x1ca>
    1f5a:	88 ec       	ldi	r24, 0xC8	; 200
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	98 a3       	std	Y+32, r25	; 0x20
    1f60:	8f 8f       	std	Y+31, r24	; 0x1f
    1f62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f64:	98 a1       	ldd	r25, Y+32	; 0x20
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <LCD_sendCommand+0x1b8>
    1f6a:	98 a3       	std	Y+32, r25	; 0x20
    1f6c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f70:	9a a1       	ldd	r25, Y+34	; 0x22
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	9a a3       	std	Y+34, r25	; 0x22
    1f76:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f78:	89 a1       	ldd	r24, Y+33	; 0x21
    1f7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	69 f7       	brne	.-38     	; 0x1f5a <LCD_sendCommand+0x1ac>
    1f80:	14 c0       	rjmp	.+40     	; 0x1faa <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f82:	6b a1       	ldd	r22, Y+35	; 0x23
    1f84:	7c a1       	ldd	r23, Y+36	; 0x24
    1f86:	8d a1       	ldd	r24, Y+37	; 0x25
    1f88:	9e a1       	ldd	r25, Y+38	; 0x26
    1f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	9a a3       	std	Y+34, r25	; 0x22
    1f94:	89 a3       	std	Y+33, r24	; 0x21
    1f96:	89 a1       	ldd	r24, Y+33	; 0x21
    1f98:	9a a1       	ldd	r25, Y+34	; 0x22
    1f9a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f9c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fa0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <LCD_sendCommand+0x1f4>
    1fa6:	9e 8f       	std	Y+30, r25	; 0x1e
    1fa8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	69 ad       	ldd	r22, Y+57	; 0x39
    1fae:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	a0 e8       	ldi	r26, 0x80	; 128
    1fb8:	bf e3       	ldi	r27, 0x3F	; 63
    1fba:	89 8f       	std	Y+25, r24	; 0x19
    1fbc:	9a 8f       	std	Y+26, r25	; 0x1a
    1fbe:	ab 8f       	std	Y+27, r26	; 0x1b
    1fc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4a ef       	ldi	r20, 0xFA	; 250
    1fd0:	54 e4       	ldi	r21, 0x44	; 68
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	8d 8b       	std	Y+21, r24	; 0x15
    1fdc:	9e 8b       	std	Y+22, r25	; 0x16
    1fde:	af 8b       	std	Y+23, r26	; 0x17
    1fe0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fe2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e8       	ldi	r20, 0x80	; 128
    1ff0:	5f e3       	ldi	r21, 0x3F	; 63
    1ff2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff6:	88 23       	and	r24, r24
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <LCD_sendCommand+0x256>
		__ticks = 1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9c 8b       	std	Y+20, r25	; 0x14
    2000:	8b 8b       	std	Y+19, r24	; 0x13
    2002:	3f c0       	rjmp	.+126    	; 0x2082 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    2004:	6d 89       	ldd	r22, Y+21	; 0x15
    2006:	7e 89       	ldd	r23, Y+22	; 0x16
    2008:	8f 89       	ldd	r24, Y+23	; 0x17
    200a:	98 8d       	ldd	r25, Y+24	; 0x18
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	4f e7       	ldi	r20, 0x7F	; 127
    2012:	57 e4       	ldi	r21, 0x47	; 71
    2014:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2018:	18 16       	cp	r1, r24
    201a:	4c f5       	brge	.+82     	; 0x206e <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201c:	69 8d       	ldd	r22, Y+25	; 0x19
    201e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2020:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2022:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e2       	ldi	r20, 0x20	; 32
    202a:	51 e4       	ldi	r21, 0x41	; 65
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9c 8b       	std	Y+20, r25	; 0x14
    2042:	8b 8b       	std	Y+19, r24	; 0x13
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <LCD_sendCommand+0x2b6>
    2046:	88 ec       	ldi	r24, 0xC8	; 200
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	9a 8b       	std	Y+18, r25	; 0x12
    204c:	89 8b       	std	Y+17, r24	; 0x11
    204e:	89 89       	ldd	r24, Y+17	; 0x11
    2050:	9a 89       	ldd	r25, Y+18	; 0x12
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <LCD_sendCommand+0x2a4>
    2056:	9a 8b       	std	Y+18, r25	; 0x12
    2058:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205a:	8b 89       	ldd	r24, Y+19	; 0x13
    205c:	9c 89       	ldd	r25, Y+20	; 0x14
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	9c 8b       	std	Y+20, r25	; 0x14
    2062:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2064:	8b 89       	ldd	r24, Y+19	; 0x13
    2066:	9c 89       	ldd	r25, Y+20	; 0x14
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	69 f7       	brne	.-38     	; 0x2046 <LCD_sendCommand+0x298>
    206c:	14 c0       	rjmp	.+40     	; 0x2096 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206e:	6d 89       	ldd	r22, Y+21	; 0x15
    2070:	7e 89       	ldd	r23, Y+22	; 0x16
    2072:	8f 89       	ldd	r24, Y+23	; 0x17
    2074:	98 8d       	ldd	r25, Y+24	; 0x18
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9c 8b       	std	Y+20, r25	; 0x14
    2080:	8b 8b       	std	Y+19, r24	; 0x13
    2082:	8b 89       	ldd	r24, Y+19	; 0x13
    2084:	9c 89       	ldd	r25, Y+20	; 0x14
    2086:	98 8b       	std	Y+16, r25	; 0x10
    2088:	8f 87       	std	Y+15, r24	; 0x0f
    208a:	8f 85       	ldd	r24, Y+15	; 0x0f
    208c:	98 89       	ldd	r25, Y+16	; 0x10
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_sendCommand+0x2e0>
    2092:	98 8b       	std	Y+16, r25	; 0x10
    2094:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	62 e0       	ldi	r22, 0x02	; 2
    209a:	40 e0       	ldi	r20, 0x00	; 0
    209c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	a0 e8       	ldi	r26, 0x80	; 128
    20a6:	bf e3       	ldi	r27, 0x3F	; 63
    20a8:	8b 87       	std	Y+11, r24	; 0x0b
    20aa:	9c 87       	std	Y+12, r25	; 0x0c
    20ac:	ad 87       	std	Y+13, r26	; 0x0d
    20ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	4a ef       	ldi	r20, 0xFA	; 250
    20be:	54 e4       	ldi	r21, 0x44	; 68
    20c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	8f 83       	std	Y+7, r24	; 0x07
    20ca:	98 87       	std	Y+8, r25	; 0x08
    20cc:	a9 87       	std	Y+9, r26	; 0x09
    20ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20d0:	6f 81       	ldd	r22, Y+7	; 0x07
    20d2:	78 85       	ldd	r23, Y+8	; 0x08
    20d4:	89 85       	ldd	r24, Y+9	; 0x09
    20d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e8       	ldi	r20, 0x80	; 128
    20de:	5f e3       	ldi	r21, 0x3F	; 63
    20e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e4:	88 23       	and	r24, r24
    20e6:	2c f4       	brge	.+10     	; 0x20f2 <LCD_sendCommand+0x344>
		__ticks = 1;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	9e 83       	std	Y+6, r25	; 0x06
    20ee:	8d 83       	std	Y+5, r24	; 0x05
    20f0:	3f c0       	rjmp	.+126    	; 0x2170 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    20f2:	6f 81       	ldd	r22, Y+7	; 0x07
    20f4:	78 85       	ldd	r23, Y+8	; 0x08
    20f6:	89 85       	ldd	r24, Y+9	; 0x09
    20f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	3f ef       	ldi	r19, 0xFF	; 255
    20fe:	4f e7       	ldi	r20, 0x7F	; 127
    2100:	57 e4       	ldi	r21, 0x47	; 71
    2102:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2106:	18 16       	cp	r1, r24
    2108:	4c f5       	brge	.+82     	; 0x215c <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210a:	6b 85       	ldd	r22, Y+11	; 0x0b
    210c:	7c 85       	ldd	r23, Y+12	; 0x0c
    210e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2110:	9e 85       	ldd	r25, Y+14	; 0x0e
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e2       	ldi	r20, 0x20	; 32
    2118:	51 e4       	ldi	r21, 0x41	; 65
    211a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	bc 01       	movw	r22, r24
    2124:	cd 01       	movw	r24, r26
    2126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	9e 83       	std	Y+6, r25	; 0x06
    2130:	8d 83       	std	Y+5, r24	; 0x05
    2132:	0f c0       	rjmp	.+30     	; 0x2152 <LCD_sendCommand+0x3a4>
    2134:	88 ec       	ldi	r24, 0xC8	; 200
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	9c 83       	std	Y+4, r25	; 0x04
    213a:	8b 83       	std	Y+3, r24	; 0x03
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	9c 81       	ldd	r25, Y+4	; 0x04
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	f1 f7       	brne	.-4      	; 0x2140 <LCD_sendCommand+0x392>
    2144:	9c 83       	std	Y+4, r25	; 0x04
    2146:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2148:	8d 81       	ldd	r24, Y+5	; 0x05
    214a:	9e 81       	ldd	r25, Y+6	; 0x06
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	69 f7       	brne	.-38     	; 0x2134 <LCD_sendCommand+0x386>
    215a:	14 c0       	rjmp	.+40     	; 0x2184 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215c:	6f 81       	ldd	r22, Y+7	; 0x07
    215e:	78 85       	ldd	r23, Y+8	; 0x08
    2160:	89 85       	ldd	r24, Y+9	; 0x09
    2162:	9a 85       	ldd	r25, Y+10	; 0x0a
    2164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	9e 83       	std	Y+6, r25	; 0x06
    216e:	8d 83       	std	Y+5, r24	; 0x05
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	9a 83       	std	Y+2, r25	; 0x02
    2176:	89 83       	std	Y+1, r24	; 0x01
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	9a 81       	ldd	r25, Y+2	; 0x02
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <LCD_sendCommand+0x3ce>
    2180:	9a 83       	std	Y+2, r25	; 0x02
    2182:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2184:	e9 96       	adiw	r28, 0x39	; 57
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	e9 97       	sbiw	r28, 0x39	; 57
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	41 e0       	ldi	r20, 0x01	; 1
    21b2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	61 e0       	ldi	r22, 0x01	; 1
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	a0 e8       	ldi	r26, 0x80	; 128
    21c6:	bf e3       	ldi	r27, 0x3F	; 63
    21c8:	8d ab       	std	Y+53, r24	; 0x35
    21ca:	9e ab       	std	Y+54, r25	; 0x36
    21cc:	af ab       	std	Y+55, r26	; 0x37
    21ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d0:	6d a9       	ldd	r22, Y+53	; 0x35
    21d2:	7e a9       	ldd	r23, Y+54	; 0x36
    21d4:	8f a9       	ldd	r24, Y+55	; 0x37
    21d6:	98 ad       	ldd	r25, Y+56	; 0x38
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	4a ef       	ldi	r20, 0xFA	; 250
    21de:	54 e4       	ldi	r21, 0x44	; 68
    21e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	89 ab       	std	Y+49, r24	; 0x31
    21ea:	9a ab       	std	Y+50, r25	; 0x32
    21ec:	ab ab       	std	Y+51, r26	; 0x33
    21ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21f0:	69 a9       	ldd	r22, Y+49	; 0x31
    21f2:	7a a9       	ldd	r23, Y+50	; 0x32
    21f4:	8b a9       	ldd	r24, Y+51	; 0x33
    21f6:	9c a9       	ldd	r25, Y+52	; 0x34
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e8       	ldi	r20, 0x80	; 128
    21fe:	5f e3       	ldi	r21, 0x3F	; 63
    2200:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2204:	88 23       	and	r24, r24
    2206:	2c f4       	brge	.+10     	; 0x2212 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	98 ab       	std	Y+48, r25	; 0x30
    220e:	8f a7       	std	Y+47, r24	; 0x2f
    2210:	3f c0       	rjmp	.+126    	; 0x2290 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2212:	69 a9       	ldd	r22, Y+49	; 0x31
    2214:	7a a9       	ldd	r23, Y+50	; 0x32
    2216:	8b a9       	ldd	r24, Y+51	; 0x33
    2218:	9c a9       	ldd	r25, Y+52	; 0x34
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	3f ef       	ldi	r19, 0xFF	; 255
    221e:	4f e7       	ldi	r20, 0x7F	; 127
    2220:	57 e4       	ldi	r21, 0x47	; 71
    2222:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2226:	18 16       	cp	r1, r24
    2228:	4c f5       	brge	.+82     	; 0x227c <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222a:	6d a9       	ldd	r22, Y+53	; 0x35
    222c:	7e a9       	ldd	r23, Y+54	; 0x36
    222e:	8f a9       	ldd	r24, Y+55	; 0x37
    2230:	98 ad       	ldd	r25, Y+56	; 0x38
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e2       	ldi	r20, 0x20	; 32
    2238:	51 e4       	ldi	r21, 0x41	; 65
    223a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	bc 01       	movw	r22, r24
    2244:	cd 01       	movw	r24, r26
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	98 ab       	std	Y+48, r25	; 0x30
    2250:	8f a7       	std	Y+47, r24	; 0x2f
    2252:	0f c0       	rjmp	.+30     	; 0x2272 <LCD_displayCharacter+0xdc>
    2254:	88 ec       	ldi	r24, 0xC8	; 200
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	9e a7       	std	Y+46, r25	; 0x2e
    225a:	8d a7       	std	Y+45, r24	; 0x2d
    225c:	8d a5       	ldd	r24, Y+45	; 0x2d
    225e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <LCD_displayCharacter+0xca>
    2264:	9e a7       	std	Y+46, r25	; 0x2e
    2266:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2268:	8f a5       	ldd	r24, Y+47	; 0x2f
    226a:	98 a9       	ldd	r25, Y+48	; 0x30
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	98 ab       	std	Y+48, r25	; 0x30
    2270:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2272:	8f a5       	ldd	r24, Y+47	; 0x2f
    2274:	98 a9       	ldd	r25, Y+48	; 0x30
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	69 f7       	brne	.-38     	; 0x2254 <LCD_displayCharacter+0xbe>
    227a:	14 c0       	rjmp	.+40     	; 0x22a4 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227c:	69 a9       	ldd	r22, Y+49	; 0x31
    227e:	7a a9       	ldd	r23, Y+50	; 0x32
    2280:	8b a9       	ldd	r24, Y+51	; 0x33
    2282:	9c a9       	ldd	r25, Y+52	; 0x34
    2284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	98 ab       	std	Y+48, r25	; 0x30
    228e:	8f a7       	std	Y+47, r24	; 0x2f
    2290:	8f a5       	ldd	r24, Y+47	; 0x2f
    2292:	98 a9       	ldd	r25, Y+48	; 0x30
    2294:	9c a7       	std	Y+44, r25	; 0x2c
    2296:	8b a7       	std	Y+43, r24	; 0x2b
    2298:	8b a5       	ldd	r24, Y+43	; 0x2b
    229a:	9c a5       	ldd	r25, Y+44	; 0x2c
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <LCD_displayCharacter+0x106>
    22a0:	9c a7       	std	Y+44, r25	; 0x2c
    22a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	62 e0       	ldi	r22, 0x02	; 2
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 e8       	ldi	r26, 0x80	; 128
    22b4:	bf e3       	ldi	r27, 0x3F	; 63
    22b6:	8f a3       	std	Y+39, r24	; 0x27
    22b8:	98 a7       	std	Y+40, r25	; 0x28
    22ba:	a9 a7       	std	Y+41, r26	; 0x29
    22bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22be:	6f a1       	ldd	r22, Y+39	; 0x27
    22c0:	78 a5       	ldd	r23, Y+40	; 0x28
    22c2:	89 a5       	ldd	r24, Y+41	; 0x29
    22c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a ef       	ldi	r20, 0xFA	; 250
    22cc:	54 e4       	ldi	r21, 0x44	; 68
    22ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	8b a3       	std	Y+35, r24	; 0x23
    22d8:	9c a3       	std	Y+36, r25	; 0x24
    22da:	ad a3       	std	Y+37, r26	; 0x25
    22dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22de:	6b a1       	ldd	r22, Y+35	; 0x23
    22e0:	7c a1       	ldd	r23, Y+36	; 0x24
    22e2:	8d a1       	ldd	r24, Y+37	; 0x25
    22e4:	9e a1       	ldd	r25, Y+38	; 0x26
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	5f e3       	ldi	r21, 0x3F	; 63
    22ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f2:	88 23       	and	r24, r24
    22f4:	2c f4       	brge	.+10     	; 0x2300 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9a a3       	std	Y+34, r25	; 0x22
    22fc:	89 a3       	std	Y+33, r24	; 0x21
    22fe:	3f c0       	rjmp	.+126    	; 0x237e <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2300:	6b a1       	ldd	r22, Y+35	; 0x23
    2302:	7c a1       	ldd	r23, Y+36	; 0x24
    2304:	8d a1       	ldd	r24, Y+37	; 0x25
    2306:	9e a1       	ldd	r25, Y+38	; 0x26
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	3f ef       	ldi	r19, 0xFF	; 255
    230c:	4f e7       	ldi	r20, 0x7F	; 127
    230e:	57 e4       	ldi	r21, 0x47	; 71
    2310:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2314:	18 16       	cp	r1, r24
    2316:	4c f5       	brge	.+82     	; 0x236a <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2318:	6f a1       	ldd	r22, Y+39	; 0x27
    231a:	78 a5       	ldd	r23, Y+40	; 0x28
    231c:	89 a5       	ldd	r24, Y+41	; 0x29
    231e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e2       	ldi	r20, 0x20	; 32
    2326:	51 e4       	ldi	r21, 0x41	; 65
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9a a3       	std	Y+34, r25	; 0x22
    233e:	89 a3       	std	Y+33, r24	; 0x21
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <LCD_displayCharacter+0x1ca>
    2342:	88 ec       	ldi	r24, 0xC8	; 200
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	98 a3       	std	Y+32, r25	; 0x20
    2348:	8f 8f       	std	Y+31, r24	; 0x1f
    234a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    234c:	98 a1       	ldd	r25, Y+32	; 0x20
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <LCD_displayCharacter+0x1b8>
    2352:	98 a3       	std	Y+32, r25	; 0x20
    2354:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2356:	89 a1       	ldd	r24, Y+33	; 0x21
    2358:	9a a1       	ldd	r25, Y+34	; 0x22
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	9a a3       	std	Y+34, r25	; 0x22
    235e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2360:	89 a1       	ldd	r24, Y+33	; 0x21
    2362:	9a a1       	ldd	r25, Y+34	; 0x22
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	69 f7       	brne	.-38     	; 0x2342 <LCD_displayCharacter+0x1ac>
    2368:	14 c0       	rjmp	.+40     	; 0x2392 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236a:	6b a1       	ldd	r22, Y+35	; 0x23
    236c:	7c a1       	ldd	r23, Y+36	; 0x24
    236e:	8d a1       	ldd	r24, Y+37	; 0x25
    2370:	9e a1       	ldd	r25, Y+38	; 0x26
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9a a3       	std	Y+34, r25	; 0x22
    237c:	89 a3       	std	Y+33, r24	; 0x21
    237e:	89 a1       	ldd	r24, Y+33	; 0x21
    2380:	9a a1       	ldd	r25, Y+34	; 0x22
    2382:	9e 8f       	std	Y+30, r25	; 0x1e
    2384:	8d 8f       	std	Y+29, r24	; 0x1d
    2386:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2388:	9e 8d       	ldd	r25, Y+30	; 0x1e
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <LCD_displayCharacter+0x1f4>
    238e:	9e 8f       	std	Y+30, r25	; 0x1e
    2390:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	69 ad       	ldd	r22, Y+57	; 0x39
    2396:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	a0 e8       	ldi	r26, 0x80	; 128
    23a0:	bf e3       	ldi	r27, 0x3F	; 63
    23a2:	89 8f       	std	Y+25, r24	; 0x19
    23a4:	9a 8f       	std	Y+26, r25	; 0x1a
    23a6:	ab 8f       	std	Y+27, r26	; 0x1b
    23a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23aa:	69 8d       	ldd	r22, Y+25	; 0x19
    23ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	4a ef       	ldi	r20, 0xFA	; 250
    23b8:	54 e4       	ldi	r21, 0x44	; 68
    23ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	8d 8b       	std	Y+21, r24	; 0x15
    23c4:	9e 8b       	std	Y+22, r25	; 0x16
    23c6:	af 8b       	std	Y+23, r26	; 0x17
    23c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23ca:	6d 89       	ldd	r22, Y+21	; 0x15
    23cc:	7e 89       	ldd	r23, Y+22	; 0x16
    23ce:	8f 89       	ldd	r24, Y+23	; 0x17
    23d0:	98 8d       	ldd	r25, Y+24	; 0x18
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e8       	ldi	r20, 0x80	; 128
    23d8:	5f e3       	ldi	r21, 0x3F	; 63
    23da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23de:	88 23       	and	r24, r24
    23e0:	2c f4       	brge	.+10     	; 0x23ec <LCD_displayCharacter+0x256>
		__ticks = 1;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9c 8b       	std	Y+20, r25	; 0x14
    23e8:	8b 8b       	std	Y+19, r24	; 0x13
    23ea:	3f c0       	rjmp	.+126    	; 0x246a <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    23ec:	6d 89       	ldd	r22, Y+21	; 0x15
    23ee:	7e 89       	ldd	r23, Y+22	; 0x16
    23f0:	8f 89       	ldd	r24, Y+23	; 0x17
    23f2:	98 8d       	ldd	r25, Y+24	; 0x18
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	3f ef       	ldi	r19, 0xFF	; 255
    23f8:	4f e7       	ldi	r20, 0x7F	; 127
    23fa:	57 e4       	ldi	r21, 0x47	; 71
    23fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2400:	18 16       	cp	r1, r24
    2402:	4c f5       	brge	.+82     	; 0x2456 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2404:	69 8d       	ldd	r22, Y+25	; 0x19
    2406:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2408:	8b 8d       	ldd	r24, Y+27	; 0x1b
    240a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e2       	ldi	r20, 0x20	; 32
    2412:	51 e4       	ldi	r21, 0x41	; 65
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	bc 01       	movw	r22, r24
    241e:	cd 01       	movw	r24, r26
    2420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9c 8b       	std	Y+20, r25	; 0x14
    242a:	8b 8b       	std	Y+19, r24	; 0x13
    242c:	0f c0       	rjmp	.+30     	; 0x244c <LCD_displayCharacter+0x2b6>
    242e:	88 ec       	ldi	r24, 0xC8	; 200
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9a 8b       	std	Y+18, r25	; 0x12
    2434:	89 8b       	std	Y+17, r24	; 0x11
    2436:	89 89       	ldd	r24, Y+17	; 0x11
    2438:	9a 89       	ldd	r25, Y+18	; 0x12
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <LCD_displayCharacter+0x2a4>
    243e:	9a 8b       	std	Y+18, r25	; 0x12
    2440:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2442:	8b 89       	ldd	r24, Y+19	; 0x13
    2444:	9c 89       	ldd	r25, Y+20	; 0x14
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	9c 8b       	std	Y+20, r25	; 0x14
    244a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244c:	8b 89       	ldd	r24, Y+19	; 0x13
    244e:	9c 89       	ldd	r25, Y+20	; 0x14
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	69 f7       	brne	.-38     	; 0x242e <LCD_displayCharacter+0x298>
    2454:	14 c0       	rjmp	.+40     	; 0x247e <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2456:	6d 89       	ldd	r22, Y+21	; 0x15
    2458:	7e 89       	ldd	r23, Y+22	; 0x16
    245a:	8f 89       	ldd	r24, Y+23	; 0x17
    245c:	98 8d       	ldd	r25, Y+24	; 0x18
    245e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	9c 8b       	std	Y+20, r25	; 0x14
    2468:	8b 8b       	std	Y+19, r24	; 0x13
    246a:	8b 89       	ldd	r24, Y+19	; 0x13
    246c:	9c 89       	ldd	r25, Y+20	; 0x14
    246e:	98 8b       	std	Y+16, r25	; 0x10
    2470:	8f 87       	std	Y+15, r24	; 0x0f
    2472:	8f 85       	ldd	r24, Y+15	; 0x0f
    2474:	98 89       	ldd	r25, Y+16	; 0x10
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <LCD_displayCharacter+0x2e0>
    247a:	98 8b       	std	Y+16, r25	; 0x10
    247c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	62 e0       	ldi	r22, 0x02	; 2
    2482:	40 e0       	ldi	r20, 0x00	; 0
    2484:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	a0 e8       	ldi	r26, 0x80	; 128
    248e:	bf e3       	ldi	r27, 0x3F	; 63
    2490:	8b 87       	std	Y+11, r24	; 0x0b
    2492:	9c 87       	std	Y+12, r25	; 0x0c
    2494:	ad 87       	std	Y+13, r26	; 0x0d
    2496:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2498:	6b 85       	ldd	r22, Y+11	; 0x0b
    249a:	7c 85       	ldd	r23, Y+12	; 0x0c
    249c:	8d 85       	ldd	r24, Y+13	; 0x0d
    249e:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	4a ef       	ldi	r20, 0xFA	; 250
    24a6:	54 e4       	ldi	r21, 0x44	; 68
    24a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	8f 83       	std	Y+7, r24	; 0x07
    24b2:	98 87       	std	Y+8, r25	; 0x08
    24b4:	a9 87       	std	Y+9, r26	; 0x09
    24b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24b8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ba:	78 85       	ldd	r23, Y+8	; 0x08
    24bc:	89 85       	ldd	r24, Y+9	; 0x09
    24be:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e8       	ldi	r20, 0x80	; 128
    24c6:	5f e3       	ldi	r21, 0x3F	; 63
    24c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24cc:	88 23       	and	r24, r24
    24ce:	2c f4       	brge	.+10     	; 0x24da <LCD_displayCharacter+0x344>
		__ticks = 1;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	9e 83       	std	Y+6, r25	; 0x06
    24d6:	8d 83       	std	Y+5, r24	; 0x05
    24d8:	3f c0       	rjmp	.+126    	; 0x2558 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    24da:	6f 81       	ldd	r22, Y+7	; 0x07
    24dc:	78 85       	ldd	r23, Y+8	; 0x08
    24de:	89 85       	ldd	r24, Y+9	; 0x09
    24e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	3f ef       	ldi	r19, 0xFF	; 255
    24e6:	4f e7       	ldi	r20, 0x7F	; 127
    24e8:	57 e4       	ldi	r21, 0x47	; 71
    24ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ee:	18 16       	cp	r1, r24
    24f0:	4c f5       	brge	.+82     	; 0x2544 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e2       	ldi	r20, 0x20	; 32
    2500:	51 e4       	ldi	r21, 0x41	; 65
    2502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	bc 01       	movw	r22, r24
    250c:	cd 01       	movw	r24, r26
    250e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	9e 83       	std	Y+6, r25	; 0x06
    2518:	8d 83       	std	Y+5, r24	; 0x05
    251a:	0f c0       	rjmp	.+30     	; 0x253a <LCD_displayCharacter+0x3a4>
    251c:	88 ec       	ldi	r24, 0xC8	; 200
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	9c 83       	std	Y+4, r25	; 0x04
    2522:	8b 83       	std	Y+3, r24	; 0x03
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	9c 81       	ldd	r25, Y+4	; 0x04
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	f1 f7       	brne	.-4      	; 0x2528 <LCD_displayCharacter+0x392>
    252c:	9c 83       	std	Y+4, r25	; 0x04
    252e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2530:	8d 81       	ldd	r24, Y+5	; 0x05
    2532:	9e 81       	ldd	r25, Y+6	; 0x06
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	9e 83       	std	Y+6, r25	; 0x06
    2538:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253a:	8d 81       	ldd	r24, Y+5	; 0x05
    253c:	9e 81       	ldd	r25, Y+6	; 0x06
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	69 f7       	brne	.-38     	; 0x251c <LCD_displayCharacter+0x386>
    2542:	14 c0       	rjmp	.+40     	; 0x256c <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2544:	6f 81       	ldd	r22, Y+7	; 0x07
    2546:	78 85       	ldd	r23, Y+8	; 0x08
    2548:	89 85       	ldd	r24, Y+9	; 0x09
    254a:	9a 85       	ldd	r25, Y+10	; 0x0a
    254c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	8d 83       	std	Y+5, r24	; 0x05
    2558:	8d 81       	ldd	r24, Y+5	; 0x05
    255a:	9e 81       	ldd	r25, Y+6	; 0x06
    255c:	9a 83       	std	Y+2, r25	; 0x02
    255e:	89 83       	std	Y+1, r24	; 0x01
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	9a 81       	ldd	r25, Y+2	; 0x02
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <LCD_displayCharacter+0x3ce>
    2568:	9a 83       	std	Y+2, r25	; 0x02
    256a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    256c:	e9 96       	adiw	r28, 0x39	; 57
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	00 d0       	rcall	.+0      	; 0x2584 <LCD_displayString+0x6>
    2584:	0f 92       	push	r0
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	9b 83       	std	Y+3, r25	; 0x03
    258c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    258e:	19 82       	std	Y+1, r1	; 0x01
    2590:	0e c0       	rjmp	.+28     	; 0x25ae <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	8a 81       	ldd	r24, Y+2	; 0x02
    259a:	9b 81       	ldd	r25, Y+3	; 0x03
    259c:	fc 01       	movw	r30, r24
    259e:	e2 0f       	add	r30, r18
    25a0:	f3 1f       	adc	r31, r19
    25a2:	80 81       	ld	r24, Z
    25a4:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_displayCharacter>
		i++;
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	8f 5f       	subi	r24, 0xFF	; 255
    25ac:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	9b 81       	ldd	r25, Y+3	; 0x03
    25b8:	fc 01       	movw	r30, r24
    25ba:	e2 0f       	add	r30, r18
    25bc:	f3 1f       	adc	r31, r19
    25be:	80 81       	ld	r24, Z
    25c0:	88 23       	and	r24, r24
    25c2:	39 f7       	brne	.-50     	; 0x2592 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <LCD_moveCursor+0x6>
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <LCD_moveCursor+0x8>
    25d8:	0f 92       	push	r0
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	8a 83       	std	Y+2, r24	; 0x02
    25e0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	3d 83       	std	Y+5, r19	; 0x05
    25ea:	2c 83       	std	Y+4, r18	; 0x04
    25ec:	8c 81       	ldd	r24, Y+4	; 0x04
    25ee:	9d 81       	ldd	r25, Y+5	; 0x05
    25f0:	81 30       	cpi	r24, 0x01	; 1
    25f2:	91 05       	cpc	r25, r1
    25f4:	c1 f0       	breq	.+48     	; 0x2626 <LCD_moveCursor+0x56>
    25f6:	2c 81       	ldd	r18, Y+4	; 0x04
    25f8:	3d 81       	ldd	r19, Y+5	; 0x05
    25fa:	22 30       	cpi	r18, 0x02	; 2
    25fc:	31 05       	cpc	r19, r1
    25fe:	2c f4       	brge	.+10     	; 0x260a <LCD_moveCursor+0x3a>
    2600:	8c 81       	ldd	r24, Y+4	; 0x04
    2602:	9d 81       	ldd	r25, Y+5	; 0x05
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	61 f0       	breq	.+24     	; 0x2620 <LCD_moveCursor+0x50>
    2608:	19 c0       	rjmp	.+50     	; 0x263c <LCD_moveCursor+0x6c>
    260a:	2c 81       	ldd	r18, Y+4	; 0x04
    260c:	3d 81       	ldd	r19, Y+5	; 0x05
    260e:	22 30       	cpi	r18, 0x02	; 2
    2610:	31 05       	cpc	r19, r1
    2612:	69 f0       	breq	.+26     	; 0x262e <LCD_moveCursor+0x5e>
    2614:	8c 81       	ldd	r24, Y+4	; 0x04
    2616:	9d 81       	ldd	r25, Y+5	; 0x05
    2618:	83 30       	cpi	r24, 0x03	; 3
    261a:	91 05       	cpc	r25, r1
    261c:	61 f0       	breq	.+24     	; 0x2636 <LCD_moveCursor+0x66>
    261e:	0e c0       	rjmp	.+28     	; 0x263c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	0b c0       	rjmp	.+22     	; 0x263c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	80 5c       	subi	r24, 0xC0	; 192
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	07 c0       	rjmp	.+14     	; 0x263c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	80 5f       	subi	r24, 0xF0	; 240
    2632:	89 83       	std	Y+1, r24	; 0x01
    2634:	03 c0       	rjmp	.+6      	; 0x263c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	80 5b       	subi	r24, 0xB0	; 176
    263a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	80 68       	ori	r24, 0x80	; 128
    2640:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_sendCommand>
}
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	00 d0       	rcall	.+0      	; 0x265a <LCD_displayStringRowColumn+0x6>
    265a:	00 d0       	rcall	.+0      	; 0x265c <LCD_displayStringRowColumn+0x8>
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	6a 83       	std	Y+2, r22	; 0x02
    2664:	5c 83       	std	Y+4, r21	; 0x04
    2666:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	6a 81       	ldd	r22, Y+2	; 0x02
    266c:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	9c 81       	ldd	r25, Y+4	; 0x04
    2674:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayString>
}
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	62 97       	sbiw	r28, 0x12	; 18
    2690:	0f b6       	in	r0, 0x3f	; 63
    2692:	f8 94       	cli
    2694:	de bf       	out	0x3e, r29	; 62
    2696:	0f be       	out	0x3f, r0	; 63
    2698:	cd bf       	out	0x3d, r28	; 61
    269a:	9a 8b       	std	Y+18, r25	; 0x12
    269c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    269e:	89 89       	ldd	r24, Y+17	; 0x11
    26a0:	9a 89       	ldd	r25, Y+18	; 0x12
    26a2:	9e 01       	movw	r18, r28
    26a4:	2f 5f       	subi	r18, 0xFF	; 255
    26a6:	3f 4f       	sbci	r19, 0xFF	; 255
    26a8:	b9 01       	movw	r22, r18
    26aa:	4a e0       	ldi	r20, 0x0A	; 10
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	0e 94 8b 1c 	call	0x3916	; 0x3916 <itoa>
   LCD_displayString(buff); /* Display the string */
    26b2:	ce 01       	movw	r24, r28
    26b4:	01 96       	adiw	r24, 0x01	; 1
    26b6:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayString>
}
    26ba:	62 96       	adiw	r28, 0x12	; 18
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_sendCommand>
}
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <clock>:
uint8 passwordCheck[PASS_SIZE];

uint8 g_tick = 0;

/* Call back functions to count seconds */
volatile void clock() {
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    26e8:	80 91 44 01 	lds	r24, 0x0144
    26ec:	8f 5f       	subi	r24, 0xFF	; 255
    26ee:	80 93 44 01 	sts	0x0144, r24
}
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <main>:

int main() {
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	6c 97       	sbiw	r28, 0x1c	; 28
    2702:	0f b6       	in	r0, 0x3f	; 63
    2704:	f8 94       	cli
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	cd bf       	out	0x3d, r28	; 61
	 * 			  = 	1/31250
	 * compare value =  ( timer_required ) / ( clock_time )
	 * 				 = 1/(1/31250) = 31250*/
	TIMER_Config config;

	config.timer_id = TIMER1_ID;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	8f 83       	std	Y+7, r24	; 0x07
	config.timer_mode = COMPARE_MODE;
    2710:	82 e0       	ldi	r24, 0x02	; 2
    2712:	88 87       	std	Y+8, r24	; 0x08
	config.timer_clk = PRESCALER256;
    2714:	84 e0       	ldi	r24, 0x04	; 4
    2716:	8a 87       	std	Y+10, r24	; 0x0a
	config.oc_mode = TOGGLE;
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	89 87       	std	Y+9, r24	; 0x09
	config.interrupt = ON;
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	8b 87       	std	Y+11, r24	; 0x0b
	config.inital_value = 0;
    2720:	1d 86       	std	Y+13, r1	; 0x0d
    2722:	1c 86       	std	Y+12, r1	; 0x0c
	config.compare_value = 31250;
    2724:	82 e1       	ldi	r24, 0x12	; 18
    2726:	9a e7       	ldi	r25, 0x7A	; 122
    2728:	9f 87       	std	Y+15, r25	; 0x0f
    272a:	8e 87       	std	Y+14, r24	; 0x0e

	Timer_Init(&config);
    272c:	ce 01       	movw	r24, r28
    272e:	07 96       	adiw	r24, 0x07	; 7
    2730:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <Timer_Init>

	/* set the callback function */
	Timer_SetCallBack(TIMER1_ID, clock, COMPARE_MODE);
    2734:	20 e7       	ldi	r18, 0x70	; 112
    2736:	33 e1       	ldi	r19, 0x13	; 19
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	b9 01       	movw	r22, r18
    273c:	42 e0       	ldi	r20, 0x02	; 2
    273e:	0e 94 2f 19 	call	0x325e	; 0x325e <Timer_SetCallBack>
	/********************** Modules Initialization ************************/

	/* Uart Initialization */
	UART_Config uconfig;

	uconfig.RxEn = ON;
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	88 8b       	std	Y+16, r24	; 0x10
	uconfig.TxEn = ON;
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	89 8b       	std	Y+17, r24	; 0x11
	uconfig.EMPInt = OFF;
    274a:	1d 8a       	std	Y+21, r1	; 0x15
	uconfig.RxInt = OFF;
    274c:	1b 8a       	std	Y+19, r1	; 0x13
	uconfig.TxInt = OFF;
    274e:	1c 8a       	std	Y+20, r1	; 0x14
	uconfig.doublespeed = ON;
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	8a 8b       	std	Y+18, r24	; 0x12
	uconfig.parity = EVEN;
    2754:	82 e0       	ldi	r24, 0x02	; 2
    2756:	8e 8b       	std	Y+22, r24	; 0x16
	uconfig.stopbits = ONE;
    2758:	1f 8a       	std	Y+23, r1	; 0x17
	uconfig.databits = EIGHT;
    275a:	83 e0       	ldi	r24, 0x03	; 3
    275c:	88 8f       	std	Y+24, r24	; 0x18
	uconfig.baudrate = 9600;
    275e:	80 e8       	ldi	r24, 0x80	; 128
    2760:	95 e2       	ldi	r25, 0x25	; 37
    2762:	9a 8f       	std	Y+26, r25	; 0x1a
    2764:	89 8f       	std	Y+25, r24	; 0x19

	UART_init(&uconfig);
    2766:	ce 01       	movw	r24, r28
    2768:	40 96       	adiw	r24, 0x10	; 16
    276a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <UART_init>

	/* LCD Initialization */
	LCD_init();
    276e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_init>

	/* Enable The global Interrupt */
	SREG |= (1 << 7);
    2772:	af e5       	ldi	r26, 0x5F	; 95
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	ef e5       	ldi	r30, 0x5F	; 95
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	80 68       	ori	r24, 0x80	; 128
    277e:	8c 93       	st	X, r24
	uint8 key;

	/* State Machine */
	State state = CHANGE_PW_STATE;
    2780:	1d 82       	std	Y+5, r1	; 0x05

	uint8 no_of_trials = 0;
    2782:	1c 82       	std	Y+4, r1	; 0x04
	while (1) {
		switch (state) {
    2784:	8d 81       	ldd	r24, Y+5	; 0x05
    2786:	28 2f       	mov	r18, r24
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	3c 8f       	std	Y+28, r19	; 0x1c
    278c:	2b 8f       	std	Y+27, r18	; 0x1b
    278e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2790:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2792:	82 30       	cpi	r24, 0x02	; 2
    2794:	91 05       	cpc	r25, r1
    2796:	09 f4       	brne	.+2      	; 0x279a <main+0xa2>
    2798:	53 c0       	rjmp	.+166    	; 0x2840 <main+0x148>
    279a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    279c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    279e:	23 30       	cpi	r18, 0x03	; 3
    27a0:	31 05       	cpc	r19, r1
    27a2:	54 f4       	brge	.+20     	; 0x27b8 <main+0xc0>
    27a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	c1 f0       	breq	.+48     	; 0x27dc <main+0xe4>
    27ac:	2b 8d       	ldd	r18, Y+27	; 0x1b
    27ae:	3c 8d       	ldd	r19, Y+28	; 0x1c
    27b0:	21 30       	cpi	r18, 0x01	; 1
    27b2:	31 05       	cpc	r19, r1
    27b4:	09 f1       	breq	.+66     	; 0x27f8 <main+0x100>
    27b6:	e6 cf       	rjmp	.-52     	; 0x2784 <main+0x8c>
    27b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27bc:	84 30       	cpi	r24, 0x04	; 4
    27be:	91 05       	cpc	r25, r1
    27c0:	69 f1       	breq	.+90     	; 0x281c <main+0x124>
    27c2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    27c4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    27c6:	24 30       	cpi	r18, 0x04	; 4
    27c8:	31 05       	cpc	r19, r1
    27ca:	0c f4       	brge	.+2      	; 0x27ce <main+0xd6>
    27cc:	3e c0       	rjmp	.+124    	; 0x284a <main+0x152>
    27ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27d2:	85 30       	cpi	r24, 0x05	; 5
    27d4:	91 05       	cpc	r25, r1
    27d6:	09 f4       	brne	.+2      	; 0x27da <main+0xe2>
    27d8:	47 c0       	rjmp	.+142    	; 0x2868 <main+0x170>
    27da:	d4 cf       	rjmp	.-88     	; 0x2784 <main+0x8c>
		/*********************** CHANGE_PW_STATE ************************/
		case CHANGE_PW_STATE:
			enter_password();
    27dc:	0e 94 1c 09 	call	0x1238	; 0x1238 <enter_password>
			uint8 iscorrect = reenter_password();
    27e0:	0e 94 c3 09 	call	0x1386	; 0x1386 <reenter_password>
    27e4:	8b 83       	std	Y+3, r24	; 0x03
			if (iscorrect == YES) {
    27e6:	8b 81       	ldd	r24, Y+3	; 0x03
    27e8:	81 30       	cpi	r24, 0x01	; 1
    27ea:	19 f4       	brne	.+6      	; 0x27f2 <main+0xfa>
				/* if two inputs are identical goto options menu */
				state = OPTIONS_STATE;
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	8d 83       	std	Y+5, r24	; 0x05
    27f0:	c9 cf       	rjmp	.-110    	; 0x2784 <main+0x8c>
			} else {
				/* not identical return to the same state */
				password_not_identical();
    27f2:	0e 94 83 0a 	call	0x1506	; 0x1506 <password_not_identical>
    27f6:	c6 cf       	rjmp	.-116    	; 0x2784 <main+0x8c>
			}
			break;

			/*********************** OPTIONS_STATE ************************/
		case OPTIONS_STATE:
			key++; /* any trivial instruction due I can't initialize any thing in the fist line of case block */
    27f8:	8e 81       	ldd	r24, Y+6	; 0x06
    27fa:	8f 5f       	subi	r24, 0xFF	; 255
    27fc:	8e 83       	std	Y+6, r24	; 0x06

			/* Display Meun */
			Option option = main_options();
    27fe:	0e 94 16 0b 	call	0x162c	; 0x162c <main_options>
    2802:	8a 83       	std	Y+2, r24	; 0x02

			if (option == CHANGEPW) {
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	81 30       	cpi	r24, 0x01	; 1
    2808:	11 f4       	brne	.+4      	; 0x280e <main+0x116>
				state = CHANGE_PW_STATE;
    280a:	1d 82       	std	Y+5, r1	; 0x05
    280c:	bb cf       	rjmp	.-138    	; 0x2784 <main+0x8c>
			} else if (option == OPENDOOR) {
    280e:	8a 81       	ldd	r24, Y+2	; 0x02
    2810:	88 23       	and	r24, r24
    2812:	09 f0       	breq	.+2      	; 0x2816 <main+0x11e>
    2814:	b7 cf       	rjmp	.-146    	; 0x2784 <main+0x8c>
				state = ENTER_PW_STATE;
    2816:	84 e0       	ldi	r24, 0x04	; 4
    2818:	8d 83       	std	Y+5, r24	; 0x05
    281a:	b4 cf       	rjmp	.-152    	; 0x2784 <main+0x8c>
			}
			break;

			/*********************** ENTER_PW_STATE ************************/
		case ENTER_PW_STATE:
			if (enter_saved_password()) {
    281c:	0e 94 2f 0c 	call	0x185e	; 0x185e <enter_saved_password>
    2820:	88 23       	and	r24, r24
    2822:	21 f0       	breq	.+8      	; 0x282c <main+0x134>
				state = OPEN_DOOR_STATE;
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	8d 83       	std	Y+5, r24	; 0x05
				no_of_trials = 0;
    2828:	1c 82       	std	Y+4, r1	; 0x04
    282a:	ac cf       	rjmp	.-168    	; 0x2784 <main+0x8c>
			} else if (no_of_trials >= 2) { /* If number of trials > 3 goto theif state*/
    282c:	8c 81       	ldd	r24, Y+4	; 0x04
    282e:	82 30       	cpi	r24, 0x02	; 2
    2830:	18 f0       	brcs	.+6      	; 0x2838 <main+0x140>
				state = THIEF_STATE;
    2832:	85 e0       	ldi	r24, 0x05	; 5
    2834:	8d 83       	std	Y+5, r24	; 0x05
    2836:	a6 cf       	rjmp	.-180    	; 0x2784 <main+0x8c>
			} else {
				no_of_trials++;
    2838:	8c 81       	ldd	r24, Y+4	; 0x04
    283a:	8f 5f       	subi	r24, 0xFF	; 255
    283c:	8c 83       	std	Y+4, r24	; 0x04
    283e:	a2 cf       	rjmp	.-188    	; 0x2784 <main+0x8c>
			}
			break;

			/*********************** OPEN_DOOR_STATE ************************/
		case OPEN_DOOR_STATE:
			open_door();
    2840:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <open_door>
			state = CLOSE_DOOR_STATE;
    2844:	83 e0       	ldi	r24, 0x03	; 3
    2846:	8d 83       	std	Y+5, r24	; 0x05
    2848:	9d cf       	rjmp	.-198    	; 0x2784 <main+0x8c>
			break;

			/*********************** CLOSE_DOOR_STATE ************************/
		case CLOSE_DOOR_STATE:
			key++;
    284a:	8e 81       	ldd	r24, Y+6	; 0x06
    284c:	8f 5f       	subi	r24, 0xFF	; 255
    284e:	8e 83       	std	Y+6, r24	; 0x06
			uint8 close = ask_to_close();
    2850:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <ask_to_close>
    2854:	89 83       	std	Y+1, r24	; 0x01
			if (close == YES) {
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	81 30       	cpi	r24, 0x01	; 1
    285a:	09 f0       	breq	.+2      	; 0x285e <main+0x166>
    285c:	93 cf       	rjmp	.-218    	; 0x2784 <main+0x8c>
				close_door();
    285e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <close_door>
				state = OPTIONS_STATE;
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	8d 83       	std	Y+5, r24	; 0x05
    2866:	8e cf       	rjmp	.-228    	; 0x2784 <main+0x8c>
			}
			break;

			/*********************** THIEF_STATE ************************/
		case THIEF_STATE:
			LCD_clearScreen();
    2868:	0e 94 66 13 	call	0x26cc	; 0x26cc <LCD_clearScreen>
			LCD_displayString("THEIF");
    286c:	85 e3       	ldi	r24, 0x35	; 53
    286e:	91 e0       	ldi	r25, 0x01	; 1
    2870:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_displayString>
			UART_sendByte('0');
    2874:	80 e3       	ldi	r24, 0x30	; 48
    2876:	0e 94 67 1b 	call	0x36ce	; 0x36ce <UART_sendByte>
			g_tick = 0;
    287a:	10 92 44 01 	sts	0x0144, r1
			/* wait for 1 minute */
			while (g_tick < 60)
    287e:	80 91 44 01 	lds	r24, 0x0144
    2882:	8c 33       	cpi	r24, 0x3C	; 60
    2884:	e0 f3       	brcs	.-8      	; 0x287e <main+0x186>
				;
			UART_sendByte('1'); /* send to controller ecu that the 1 minute is end */
    2886:	81 e3       	ldi	r24, 0x31	; 49
    2888:	0e 94 67 1b 	call	0x36ce	; 0x36ce <UART_sendByte>
			state = OPTIONS_STATE;
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	8d 83       	std	Y+5, r24	; 0x05
    2890:	79 cf       	rjmp	.-270    	; 0x2784 <main+0x8c>

00002892 <__vector_9>:
static volatile void (*g_callBackPtr_timer1_COMP)(void) = NULL_PTR;
static volatile void (*g_callBackPtr_timer2_COMP)(void) = NULL_PTR;

/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR(TIMER0_OVF_vect)
{
    2892:	1f 92       	push	r1
    2894:	0f 92       	push	r0
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	0f 92       	push	r0
    289a:	11 24       	eor	r1, r1
    289c:	2f 93       	push	r18
    289e:	3f 93       	push	r19
    28a0:	4f 93       	push	r20
    28a2:	5f 93       	push	r21
    28a4:	6f 93       	push	r22
    28a6:	7f 93       	push	r23
    28a8:	8f 93       	push	r24
    28aa:	9f 93       	push	r25
    28ac:	af 93       	push	r26
    28ae:	bf 93       	push	r27
    28b0:	ef 93       	push	r30
    28b2:	ff 93       	push	r31
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0_OVF != NULL_PTR)
    28bc:	80 91 45 01 	lds	r24, 0x0145
    28c0:	90 91 46 01 	lds	r25, 0x0146
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	29 f0       	breq	.+10     	; 0x28d2 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer0_OVF)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    28c8:	e0 91 45 01 	lds	r30, 0x0145
    28cc:	f0 91 46 01 	lds	r31, 0x0146
    28d0:	09 95       	icall
	}
}
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	ff 91       	pop	r31
    28d8:	ef 91       	pop	r30
    28da:	bf 91       	pop	r27
    28dc:	af 91       	pop	r26
    28de:	9f 91       	pop	r25
    28e0:	8f 91       	pop	r24
    28e2:	7f 91       	pop	r23
    28e4:	6f 91       	pop	r22
    28e6:	5f 91       	pop	r21
    28e8:	4f 91       	pop	r20
    28ea:	3f 91       	pop	r19
    28ec:	2f 91       	pop	r18
    28ee:	0f 90       	pop	r0
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	0f 90       	pop	r0
    28f4:	1f 90       	pop	r1
    28f6:	18 95       	reti

000028f8 <__vector_8>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR(TIMER1_OVF_vect)
{
    28f8:	1f 92       	push	r1
    28fa:	0f 92       	push	r0
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	0f 92       	push	r0
    2900:	11 24       	eor	r1, r1
    2902:	2f 93       	push	r18
    2904:	3f 93       	push	r19
    2906:	4f 93       	push	r20
    2908:	5f 93       	push	r21
    290a:	6f 93       	push	r22
    290c:	7f 93       	push	r23
    290e:	8f 93       	push	r24
    2910:	9f 93       	push	r25
    2912:	af 93       	push	r26
    2914:	bf 93       	push	r27
    2916:	ef 93       	push	r30
    2918:	ff 93       	push	r31
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1_OVF != NULL_PTR)
    2922:	80 91 47 01 	lds	r24, 0x0147
    2926:	90 91 48 01 	lds	r25, 0x0148
    292a:	00 97       	sbiw	r24, 0x00	; 0
    292c:	29 f0       	breq	.+10     	; 0x2938 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer1_OVF)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    292e:	e0 91 47 01 	lds	r30, 0x0147
    2932:	f0 91 48 01 	lds	r31, 0x0148
    2936:	09 95       	icall
	}
}
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	ff 91       	pop	r31
    293e:	ef 91       	pop	r30
    2940:	bf 91       	pop	r27
    2942:	af 91       	pop	r26
    2944:	9f 91       	pop	r25
    2946:	8f 91       	pop	r24
    2948:	7f 91       	pop	r23
    294a:	6f 91       	pop	r22
    294c:	5f 91       	pop	r21
    294e:	4f 91       	pop	r20
    2950:	3f 91       	pop	r19
    2952:	2f 91       	pop	r18
    2954:	0f 90       	pop	r0
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	0f 90       	pop	r0
    295a:	1f 90       	pop	r1
    295c:	18 95       	reti

0000295e <__vector_4>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR(TIMER2_OVF_vect)
{
    295e:	1f 92       	push	r1
    2960:	0f 92       	push	r0
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	0f 92       	push	r0
    2966:	11 24       	eor	r1, r1
    2968:	2f 93       	push	r18
    296a:	3f 93       	push	r19
    296c:	4f 93       	push	r20
    296e:	5f 93       	push	r21
    2970:	6f 93       	push	r22
    2972:	7f 93       	push	r23
    2974:	8f 93       	push	r24
    2976:	9f 93       	push	r25
    2978:	af 93       	push	r26
    297a:	bf 93       	push	r27
    297c:	ef 93       	push	r30
    297e:	ff 93       	push	r31
    2980:	df 93       	push	r29
    2982:	cf 93       	push	r28
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2_OVF != NULL_PTR)
    2988:	80 91 49 01 	lds	r24, 0x0149
    298c:	90 91 4a 01 	lds	r25, 0x014A
    2990:	00 97       	sbiw	r24, 0x00	; 0
    2992:	29 f0       	breq	.+10     	; 0x299e <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer2_OVF)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2994:	e0 91 49 01 	lds	r30, 0x0149
    2998:	f0 91 4a 01 	lds	r31, 0x014A
    299c:	09 95       	icall
	}
}
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	ff 91       	pop	r31
    29a4:	ef 91       	pop	r30
    29a6:	bf 91       	pop	r27
    29a8:	af 91       	pop	r26
    29aa:	9f 91       	pop	r25
    29ac:	8f 91       	pop	r24
    29ae:	7f 91       	pop	r23
    29b0:	6f 91       	pop	r22
    29b2:	5f 91       	pop	r21
    29b4:	4f 91       	pop	r20
    29b6:	3f 91       	pop	r19
    29b8:	2f 91       	pop	r18
    29ba:	0f 90       	pop	r0
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	0f 90       	pop	r0
    29c0:	1f 90       	pop	r1
    29c2:	18 95       	reti

000029c4 <__vector_19>:
/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR(TIMER0_COMP_vect)
{
    29c4:	1f 92       	push	r1
    29c6:	0f 92       	push	r0
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	0f 92       	push	r0
    29cc:	11 24       	eor	r1, r1
    29ce:	2f 93       	push	r18
    29d0:	3f 93       	push	r19
    29d2:	4f 93       	push	r20
    29d4:	5f 93       	push	r21
    29d6:	6f 93       	push	r22
    29d8:	7f 93       	push	r23
    29da:	8f 93       	push	r24
    29dc:	9f 93       	push	r25
    29de:	af 93       	push	r26
    29e0:	bf 93       	push	r27
    29e2:	ef 93       	push	r30
    29e4:	ff 93       	push	r31
    29e6:	df 93       	push	r29
    29e8:	cf 93       	push	r28
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0_COMP != NULL_PTR)
    29ee:	80 91 4b 01 	lds	r24, 0x014B
    29f2:	90 91 4c 01 	lds	r25, 0x014C
    29f6:	00 97       	sbiw	r24, 0x00	; 0
    29f8:	29 f0       	breq	.+10     	; 0x2a04 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer0_COMP)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    29fa:	e0 91 4b 01 	lds	r30, 0x014B
    29fe:	f0 91 4c 01 	lds	r31, 0x014C
    2a02:	09 95       	icall
	}
}
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	ff 91       	pop	r31
    2a0a:	ef 91       	pop	r30
    2a0c:	bf 91       	pop	r27
    2a0e:	af 91       	pop	r26
    2a10:	9f 91       	pop	r25
    2a12:	8f 91       	pop	r24
    2a14:	7f 91       	pop	r23
    2a16:	6f 91       	pop	r22
    2a18:	5f 91       	pop	r21
    2a1a:	4f 91       	pop	r20
    2a1c:	3f 91       	pop	r19
    2a1e:	2f 91       	pop	r18
    2a20:	0f 90       	pop	r0
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	0f 90       	pop	r0
    2a26:	1f 90       	pop	r1
    2a28:	18 95       	reti

00002a2a <__vector_6>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR(TIMER1_COMPA_vect)
{
    2a2a:	1f 92       	push	r1
    2a2c:	0f 92       	push	r0
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	0f 92       	push	r0
    2a32:	11 24       	eor	r1, r1
    2a34:	2f 93       	push	r18
    2a36:	3f 93       	push	r19
    2a38:	4f 93       	push	r20
    2a3a:	5f 93       	push	r21
    2a3c:	6f 93       	push	r22
    2a3e:	7f 93       	push	r23
    2a40:	8f 93       	push	r24
    2a42:	9f 93       	push	r25
    2a44:	af 93       	push	r26
    2a46:	bf 93       	push	r27
    2a48:	ef 93       	push	r30
    2a4a:	ff 93       	push	r31
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1_COMP != NULL_PTR)
    2a54:	80 91 4d 01 	lds	r24, 0x014D
    2a58:	90 91 4e 01 	lds	r25, 0x014E
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	29 f0       	breq	.+10     	; 0x2a6a <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer1_COMP)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2a60:	e0 91 4d 01 	lds	r30, 0x014D
    2a64:	f0 91 4e 01 	lds	r31, 0x014E
    2a68:	09 95       	icall
	}
}
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	ff 91       	pop	r31
    2a70:	ef 91       	pop	r30
    2a72:	bf 91       	pop	r27
    2a74:	af 91       	pop	r26
    2a76:	9f 91       	pop	r25
    2a78:	8f 91       	pop	r24
    2a7a:	7f 91       	pop	r23
    2a7c:	6f 91       	pop	r22
    2a7e:	5f 91       	pop	r21
    2a80:	4f 91       	pop	r20
    2a82:	3f 91       	pop	r19
    2a84:	2f 91       	pop	r18
    2a86:	0f 90       	pop	r0
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	0f 90       	pop	r0
    2a8c:	1f 90       	pop	r1
    2a8e:	18 95       	reti

00002a90 <__vector_3>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR(TIMER2_COMP_vect)
{
    2a90:	1f 92       	push	r1
    2a92:	0f 92       	push	r0
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	0f 92       	push	r0
    2a98:	11 24       	eor	r1, r1
    2a9a:	2f 93       	push	r18
    2a9c:	3f 93       	push	r19
    2a9e:	4f 93       	push	r20
    2aa0:	5f 93       	push	r21
    2aa2:	6f 93       	push	r22
    2aa4:	7f 93       	push	r23
    2aa6:	8f 93       	push	r24
    2aa8:	9f 93       	push	r25
    2aaa:	af 93       	push	r26
    2aac:	bf 93       	push	r27
    2aae:	ef 93       	push	r30
    2ab0:	ff 93       	push	r31
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2_COMP != NULL_PTR)
    2aba:	80 91 4f 01 	lds	r24, 0x014F
    2abe:	90 91 50 01 	lds	r25, 0x0150
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	29 f0       	breq	.+10     	; 0x2ad0 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer2_COMP)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2ac6:	e0 91 4f 01 	lds	r30, 0x014F
    2aca:	f0 91 50 01 	lds	r31, 0x0150
    2ace:	09 95       	icall
	}
}
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	ff 91       	pop	r31
    2ad6:	ef 91       	pop	r30
    2ad8:	bf 91       	pop	r27
    2ada:	af 91       	pop	r26
    2adc:	9f 91       	pop	r25
    2ade:	8f 91       	pop	r24
    2ae0:	7f 91       	pop	r23
    2ae2:	6f 91       	pop	r22
    2ae4:	5f 91       	pop	r21
    2ae6:	4f 91       	pop	r20
    2ae8:	3f 91       	pop	r19
    2aea:	2f 91       	pop	r18
    2aec:	0f 90       	pop	r0
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	0f 90       	pop	r0
    2af2:	1f 90       	pop	r1
    2af4:	18 95       	reti

00002af6 <Timer_Init>:

uint8 Timer_Init(TIMER_Config* config)
{
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	67 97       	sbiw	r28, 0x17	; 23
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	9a 83       	std	Y+2, r25	; 0x02
    2b0c:	89 83       	std	Y+1, r24	; 0x01

	switch(config->timer_id){
    2b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b10:	fa 81       	ldd	r31, Y+2	; 0x02
    2b12:	80 81       	ld	r24, Z
    2b14:	28 2f       	mov	r18, r24
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	3f 8b       	std	Y+23, r19	; 0x17
    2b1a:	2e 8b       	std	Y+22, r18	; 0x16
    2b1c:	8e 89       	ldd	r24, Y+22	; 0x16
    2b1e:	9f 89       	ldd	r25, Y+23	; 0x17
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	91 05       	cpc	r25, r1
    2b24:	09 f4       	brne	.+2      	; 0x2b28 <Timer_Init+0x32>
    2b26:	f9 c0       	rjmp	.+498    	; 0x2d1a <Timer_Init+0x224>
    2b28:	2e 89       	ldd	r18, Y+22	; 0x16
    2b2a:	3f 89       	ldd	r19, Y+23	; 0x17
    2b2c:	22 30       	cpi	r18, 0x02	; 2
    2b2e:	31 05       	cpc	r19, r1
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <Timer_Init+0x3e>
    2b32:	ff c1       	rjmp	.+1022   	; 0x2f32 <Timer_Init+0x43c>
    2b34:	8e 89       	ldd	r24, Y+22	; 0x16
    2b36:	9f 89       	ldd	r25, Y+23	; 0x17
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	09 f0       	breq	.+2      	; 0x2b3e <Timer_Init+0x48>
    2b3c:	e7 c2       	rjmp	.+1486   	; 0x310c <Timer_Init+0x616>

	/*********************TIMER0******************/
	case TIMER0_ID:
		/* Set FOC PIN as NON PWM MODE */
		SET_BIT(TCCR0,FOC0);
    2b3e:	a3 e5       	ldi	r26, 0x53	; 83
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	e3 e5       	ldi	r30, 0x53	; 83
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	80 68       	ori	r24, 0x80	; 128
    2b4a:	8c 93       	st	X, r24

		/*Configure timer mode*/
		switch(config->timer_mode)
    2b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b50:	81 81       	ldd	r24, Z+1	; 0x01
    2b52:	28 2f       	mov	r18, r24
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	3d 8b       	std	Y+21, r19	; 0x15
    2b58:	2c 8b       	std	Y+20, r18	; 0x14
    2b5a:	8c 89       	ldd	r24, Y+20	; 0x14
    2b5c:	9d 89       	ldd	r25, Y+21	; 0x15
    2b5e:	00 97       	sbiw	r24, 0x00	; 0
    2b60:	31 f0       	breq	.+12     	; 0x2b6e <Timer_Init+0x78>
    2b62:	2c 89       	ldd	r18, Y+20	; 0x14
    2b64:	3d 89       	ldd	r19, Y+21	; 0x15
    2b66:	22 30       	cpi	r18, 0x02	; 2
    2b68:	31 05       	cpc	r19, r1
    2b6a:	81 f0       	breq	.+32     	; 0x2b8c <Timer_Init+0x96>
    2b6c:	1e c0       	rjmp	.+60     	; 0x2baa <Timer_Init+0xb4>
		{
			case OVERFLOW_MODE :
				CLEAR_BIT(TCCR0,WGM00);
    2b6e:	a3 e5       	ldi	r26, 0x53	; 83
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	e3 e5       	ldi	r30, 0x53	; 83
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	8f 7b       	andi	r24, 0xBF	; 191
    2b7a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,WGM01);
    2b7c:	a3 e5       	ldi	r26, 0x53	; 83
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	e3 e5       	ldi	r30, 0x53	; 83
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	87 7f       	andi	r24, 0xF7	; 247
    2b88:	8c 93       	st	X, r24
    2b8a:	11 c0       	rjmp	.+34     	; 0x2bae <Timer_Init+0xb8>
				break;

			case COMPARE_MODE :
				CLEAR_BIT(TCCR0,WGM00);
    2b8c:	a3 e5       	ldi	r26, 0x53	; 83
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e3 e5       	ldi	r30, 0x53	; 83
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	8f 7b       	andi	r24, 0xBF	; 191
    2b98:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    2b9a:	a3 e5       	ldi	r26, 0x53	; 83
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	e3 e5       	ldi	r30, 0x53	; 83
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	88 60       	ori	r24, 0x08	; 8
    2ba6:	8c 93       	st	X, r24
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <Timer_Init+0xb8>
				break;
			default :
				return 0;
    2baa:	1b 8a       	std	Y+19, r1	; 0x13
    2bac:	b3 c2       	rjmp	.+1382   	; 0x3114 <Timer_Init+0x61e>
		}

		/* Configure OC PIN Mode */
		switch(config->oc_mode)
    2bae:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb2:	82 81       	ldd	r24, Z+2	; 0x02
    2bb4:	28 2f       	mov	r18, r24
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	3a 8b       	std	Y+18, r19	; 0x12
    2bba:	29 8b       	std	Y+17, r18	; 0x11
    2bbc:	89 89       	ldd	r24, Y+17	; 0x11
    2bbe:	9a 89       	ldd	r25, Y+18	; 0x12
    2bc0:	81 30       	cpi	r24, 0x01	; 1
    2bc2:	91 05       	cpc	r25, r1
    2bc4:	21 f1       	breq	.+72     	; 0x2c0e <Timer_Init+0x118>
    2bc6:	29 89       	ldd	r18, Y+17	; 0x11
    2bc8:	3a 89       	ldd	r19, Y+18	; 0x12
    2bca:	22 30       	cpi	r18, 0x02	; 2
    2bcc:	31 05       	cpc	r19, r1
    2bce:	2c f4       	brge	.+10     	; 0x2bda <Timer_Init+0xe4>
    2bd0:	89 89       	ldd	r24, Y+17	; 0x11
    2bd2:	9a 89       	ldd	r25, Y+18	; 0x12
    2bd4:	00 97       	sbiw	r24, 0x00	; 0
    2bd6:	61 f0       	breq	.+24     	; 0x2bf0 <Timer_Init+0xfa>
    2bd8:	5c c0       	rjmp	.+184    	; 0x2c92 <Timer_Init+0x19c>
    2bda:	29 89       	ldd	r18, Y+17	; 0x11
    2bdc:	3a 89       	ldd	r19, Y+18	; 0x12
    2bde:	22 30       	cpi	r18, 0x02	; 2
    2be0:	31 05       	cpc	r19, r1
    2be2:	59 f1       	breq	.+86     	; 0x2c3a <Timer_Init+0x144>
    2be4:	89 89       	ldd	r24, Y+17	; 0x11
    2be6:	9a 89       	ldd	r25, Y+18	; 0x12
    2be8:	83 30       	cpi	r24, 0x03	; 3
    2bea:	91 05       	cpc	r25, r1
    2bec:	e1 f1       	breq	.+120    	; 0x2c66 <Timer_Init+0x170>
    2bee:	51 c0       	rjmp	.+162    	; 0x2c92 <Timer_Init+0x19c>
		{
			case DISCONNECTED:
				CLEAR_BIT(TCCR0,COM00);
    2bf0:	a3 e5       	ldi	r26, 0x53	; 83
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	e3 e5       	ldi	r30, 0x53	; 83
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	8f 7e       	andi	r24, 0xEF	; 239
    2bfc:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,COM01);
    2bfe:	a3 e5       	ldi	r26, 0x53	; 83
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	e3 e5       	ldi	r30, 0x53	; 83
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	8f 7d       	andi	r24, 0xDF	; 223
    2c0a:	8c 93       	st	X, r24
    2c0c:	44 c0       	rjmp	.+136    	; 0x2c96 <Timer_Init+0x1a0>
				break;
			case TOGGLE:
				SET_BIT(DDRB,PB3);
    2c0e:	a7 e3       	ldi	r26, 0x37	; 55
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e7 e3       	ldi	r30, 0x37	; 55
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	88 60       	ori	r24, 0x08	; 8
    2c1a:	8c 93       	st	X, r24
				SET_BIT(TCCR0,COM00);
    2c1c:	a3 e5       	ldi	r26, 0x53	; 83
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	e3 e5       	ldi	r30, 0x53	; 83
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	80 61       	ori	r24, 0x10	; 16
    2c28:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,COM01);
    2c2a:	a3 e5       	ldi	r26, 0x53	; 83
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	e3 e5       	ldi	r30, 0x53	; 83
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 81       	ld	r24, Z
    2c34:	8f 7d       	andi	r24, 0xDF	; 223
    2c36:	8c 93       	st	X, r24
    2c38:	2e c0       	rjmp	.+92     	; 0x2c96 <Timer_Init+0x1a0>
				break;
			case CLEAR:
				SET_BIT(DDRB,PB3);
    2c3a:	a7 e3       	ldi	r26, 0x37	; 55
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	e7 e3       	ldi	r30, 0x37	; 55
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	80 81       	ld	r24, Z
    2c44:	88 60       	ori	r24, 0x08	; 8
    2c46:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,COM00);
    2c48:	a3 e5       	ldi	r26, 0x53	; 83
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	e3 e5       	ldi	r30, 0x53	; 83
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	8f 7e       	andi	r24, 0xEF	; 239
    2c54:	8c 93       	st	X, r24
				SET_BIT(TCCR0,COM01);
    2c56:	a3 e5       	ldi	r26, 0x53	; 83
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	e3 e5       	ldi	r30, 0x53	; 83
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	80 62       	ori	r24, 0x20	; 32
    2c62:	8c 93       	st	X, r24
    2c64:	18 c0       	rjmp	.+48     	; 0x2c96 <Timer_Init+0x1a0>
				break;
			case SET:
				SET_BIT(DDRB,PB3);
    2c66:	a7 e3       	ldi	r26, 0x37	; 55
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	e7 e3       	ldi	r30, 0x37	; 55
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	88 60       	ori	r24, 0x08	; 8
    2c72:	8c 93       	st	X, r24
				SET_BIT(TCCR0,COM00);
    2c74:	a3 e5       	ldi	r26, 0x53	; 83
    2c76:	b0 e0       	ldi	r27, 0x00	; 0
    2c78:	e3 e5       	ldi	r30, 0x53	; 83
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	80 81       	ld	r24, Z
    2c7e:	80 61       	ori	r24, 0x10	; 16
    2c80:	8c 93       	st	X, r24
				SET_BIT(TCCR0,COM01);
    2c82:	a3 e5       	ldi	r26, 0x53	; 83
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	e3 e5       	ldi	r30, 0x53	; 83
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	80 62       	ori	r24, 0x20	; 32
    2c8e:	8c 93       	st	X, r24
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <Timer_Init+0x1a0>
				break;
			default :
				return 0;
    2c92:	1b 8a       	std	Y+19, r1	; 0x13
    2c94:	3f c2       	rjmp	.+1150   	; 0x3114 <Timer_Init+0x61e>
		}

		/* Clock Select */
		TCCR0 = (TCCR0 & 0xF8) | (config->timer_clk & 0x07);
    2c96:	a3 e5       	ldi	r26, 0x53	; 83
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e3 e5       	ldi	r30, 0x53	; 83
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	98 2f       	mov	r25, r24
    2ca2:	98 7f       	andi	r25, 0xF8	; 248
    2ca4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ca6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ca8:	83 81       	ldd	r24, Z+3	; 0x03
    2caa:	87 70       	andi	r24, 0x07	; 7
    2cac:	89 2b       	or	r24, r25
    2cae:	8c 93       	st	X, r24

		/*	Set The initial value */
		TCNT0 = config->inital_value;
    2cb0:	a2 e5       	ldi	r26, 0x52	; 82
    2cb2:	b0 e0       	ldi	r27, 0x00	; 0
    2cb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cb8:	85 81       	ldd	r24, Z+5	; 0x05
    2cba:	96 81       	ldd	r25, Z+6	; 0x06
    2cbc:	8c 93       	st	X, r24

		/* Set the compare value */
		OCR0 = config->compare_value;
    2cbe:	ac e5       	ldi	r26, 0x5C	; 92
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc4:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc6:	87 81       	ldd	r24, Z+7	; 0x07
    2cc8:	90 85       	ldd	r25, Z+8	; 0x08
    2cca:	8c 93       	st	X, r24

		/*Set the interrupt Configuarion */
		if(config->interrupt)
    2ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    2cce:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd0:	84 81       	ldd	r24, Z+4	; 0x04
    2cd2:	88 23       	and	r24, r24
    2cd4:	09 f4       	brne	.+2      	; 0x2cd8 <Timer_Init+0x1e2>
    2cd6:	1c c2       	rjmp	.+1080   	; 0x3110 <Timer_Init+0x61a>
		{
			switch(config->timer_mode)
    2cd8:	e9 81       	ldd	r30, Y+1	; 0x01
    2cda:	fa 81       	ldd	r31, Y+2	; 0x02
    2cdc:	81 81       	ldd	r24, Z+1	; 0x01
    2cde:	28 2f       	mov	r18, r24
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	38 8b       	std	Y+16, r19	; 0x10
    2ce4:	2f 87       	std	Y+15, r18	; 0x0f
    2ce6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ce8:	98 89       	ldd	r25, Y+16	; 0x10
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	31 f0       	breq	.+12     	; 0x2cfa <Timer_Init+0x204>
    2cee:	2f 85       	ldd	r18, Y+15	; 0x0f
    2cf0:	38 89       	ldd	r19, Y+16	; 0x10
    2cf2:	22 30       	cpi	r18, 0x02	; 2
    2cf4:	31 05       	cpc	r19, r1
    2cf6:	49 f0       	breq	.+18     	; 0x2d0a <Timer_Init+0x214>
    2cf8:	0b c2       	rjmp	.+1046   	; 0x3110 <Timer_Init+0x61a>
			{
			case OVERFLOW_MODE :
				SET_BIT(TIMSK,TOIE0);
    2cfa:	a9 e5       	ldi	r26, 0x59	; 89
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e9 e5       	ldi	r30, 0x59	; 89
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	81 60       	ori	r24, 0x01	; 1
    2d06:	8c 93       	st	X, r24
    2d08:	03 c2       	rjmp	.+1030   	; 0x3110 <Timer_Init+0x61a>
				break;
			case COMPARE_MODE :
				SET_BIT(TIMSK,OCIE0);
    2d0a:	a9 e5       	ldi	r26, 0x59	; 89
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	e9 e5       	ldi	r30, 0x59	; 89
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	82 60       	ori	r24, 0x02	; 2
    2d16:	8c 93       	st	X, r24
    2d18:	fb c1       	rjmp	.+1014   	; 0x3110 <Timer_Init+0x61a>

	/*********************TIMER 1******************/
	case TIMER1_ID:

		/* Set FOC PIN as NON PWM MODE */
		SET_BIT(TCCR1A,FOC1A);
    2d1a:	af e4       	ldi	r26, 0x4F	; 79
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	ef e4       	ldi	r30, 0x4F	; 79
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	88 60       	ori	r24, 0x08	; 8
    2d26:	8c 93       	st	X, r24

		/*Configure timer mode*/
		switch(config->timer_mode)
    2d28:	e9 81       	ldd	r30, Y+1	; 0x01
    2d2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d2c:	81 81       	ldd	r24, Z+1	; 0x01
    2d2e:	28 2f       	mov	r18, r24
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	3e 87       	std	Y+14, r19	; 0x0e
    2d34:	2d 87       	std	Y+13, r18	; 0x0d
    2d36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d3a:	00 97       	sbiw	r24, 0x00	; 0
    2d3c:	31 f0       	breq	.+12     	; 0x2d4a <Timer_Init+0x254>
    2d3e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d40:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d42:	22 30       	cpi	r18, 0x02	; 2
    2d44:	31 05       	cpc	r19, r1
    2d46:	f1 f0       	breq	.+60     	; 0x2d84 <Timer_Init+0x28e>
    2d48:	3a c0       	rjmp	.+116    	; 0x2dbe <Timer_Init+0x2c8>
		{
			case OVERFLOW_MODE :
				CLEAR_BIT(TCCR1A,WGM10);
    2d4a:	af e4       	ldi	r26, 0x4F	; 79
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	ef e4       	ldi	r30, 0x4F	; 79
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	8e 7f       	andi	r24, 0xFE	; 254
    2d56:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,WGM11);
    2d58:	af e4       	ldi	r26, 0x4F	; 79
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	ef e4       	ldi	r30, 0x4F	; 79
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	8d 7f       	andi	r24, 0xFD	; 253
    2d64:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM12);
    2d66:	ae e4       	ldi	r26, 0x4E	; 78
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	ee e4       	ldi	r30, 0x4E	; 78
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 81       	ld	r24, Z
    2d70:	87 7f       	andi	r24, 0xF7	; 247
    2d72:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM13);
    2d74:	ae e4       	ldi	r26, 0x4E	; 78
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	ee e4       	ldi	r30, 0x4E	; 78
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	8f 7e       	andi	r24, 0xEF	; 239
    2d80:	8c 93       	st	X, r24
    2d82:	1f c0       	rjmp	.+62     	; 0x2dc2 <Timer_Init+0x2cc>
				break;

			case COMPARE_MODE :
				CLEAR_BIT(TCCR1A,WGM10);
    2d84:	af e4       	ldi	r26, 0x4F	; 79
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	ef e4       	ldi	r30, 0x4F	; 79
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	8e 7f       	andi	r24, 0xFE	; 254
    2d90:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,WGM11);
    2d92:	af e4       	ldi	r26, 0x4F	; 79
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	ef e4       	ldi	r30, 0x4F	; 79
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	8d 7f       	andi	r24, 0xFD	; 253
    2d9e:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    2da0:	ae e4       	ldi	r26, 0x4E	; 78
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	ee e4       	ldi	r30, 0x4E	; 78
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	88 60       	ori	r24, 0x08	; 8
    2dac:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM13);
    2dae:	ae e4       	ldi	r26, 0x4E	; 78
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	ee e4       	ldi	r30, 0x4E	; 78
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	80 81       	ld	r24, Z
    2db8:	8f 7e       	andi	r24, 0xEF	; 239
    2dba:	8c 93       	st	X, r24
    2dbc:	02 c0       	rjmp	.+4      	; 0x2dc2 <Timer_Init+0x2cc>
				break;

			default :
				return 0;
    2dbe:	1b 8a       	std	Y+19, r1	; 0x13
    2dc0:	a9 c1       	rjmp	.+850    	; 0x3114 <Timer_Init+0x61e>
		}

		/* Clock Select */
		TCCR1B = (TCCR1B & 0xF8) | (config->timer_clk & 0x07);
    2dc2:	ae e4       	ldi	r26, 0x4E	; 78
    2dc4:	b0 e0       	ldi	r27, 0x00	; 0
    2dc6:	ee e4       	ldi	r30, 0x4E	; 78
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	98 2f       	mov	r25, r24
    2dce:	98 7f       	andi	r25, 0xF8	; 248
    2dd0:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd2:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd4:	83 81       	ldd	r24, Z+3	; 0x03
    2dd6:	87 70       	andi	r24, 0x07	; 7
    2dd8:	89 2b       	or	r24, r25
    2dda:	8c 93       	st	X, r24

		/*	Set The initial value */
		TCNT1 = config->inital_value;
    2ddc:	ac e4       	ldi	r26, 0x4C	; 76
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	e9 81       	ldd	r30, Y+1	; 0x01
    2de2:	fa 81       	ldd	r31, Y+2	; 0x02
    2de4:	85 81       	ldd	r24, Z+5	; 0x05
    2de6:	96 81       	ldd	r25, Z+6	; 0x06
    2de8:	11 96       	adiw	r26, 0x01	; 1
    2dea:	9c 93       	st	X, r25
    2dec:	8e 93       	st	-X, r24

		/* Set the compare value */
		OCR1A = config->compare_value;
    2dee:	aa e4       	ldi	r26, 0x4A	; 74
    2df0:	b0 e0       	ldi	r27, 0x00	; 0
    2df2:	e9 81       	ldd	r30, Y+1	; 0x01
    2df4:	fa 81       	ldd	r31, Y+2	; 0x02
    2df6:	87 81       	ldd	r24, Z+7	; 0x07
    2df8:	90 85       	ldd	r25, Z+8	; 0x08
    2dfa:	11 96       	adiw	r26, 0x01	; 1
    2dfc:	9c 93       	st	X, r25
    2dfe:	8e 93       	st	-X, r24

		/*Set the interrupt Configuarion */
		if(config->interrupt)
    2e00:	e9 81       	ldd	r30, Y+1	; 0x01
    2e02:	fa 81       	ldd	r31, Y+2	; 0x02
    2e04:	84 81       	ldd	r24, Z+4	; 0x04
    2e06:	88 23       	and	r24, r24
    2e08:	01 f1       	breq	.+64     	; 0x2e4a <Timer_Init+0x354>
		{
			switch(config->timer_mode)
    2e0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e0e:	81 81       	ldd	r24, Z+1	; 0x01
    2e10:	28 2f       	mov	r18, r24
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	3c 87       	std	Y+12, r19	; 0x0c
    2e16:	2b 87       	std	Y+11, r18	; 0x0b
    2e18:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	31 f0       	breq	.+12     	; 0x2e2c <Timer_Init+0x336>
    2e20:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e22:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e24:	22 30       	cpi	r18, 0x02	; 2
    2e26:	31 05       	cpc	r19, r1
    2e28:	49 f0       	breq	.+18     	; 0x2e3c <Timer_Init+0x346>
    2e2a:	0f c0       	rjmp	.+30     	; 0x2e4a <Timer_Init+0x354>
			{
			case OVERFLOW_MODE :
				SET_BIT(TIMSK,TOIE1);
    2e2c:	a9 e5       	ldi	r26, 0x59	; 89
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	e9 e5       	ldi	r30, 0x59	; 89
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	80 81       	ld	r24, Z
    2e36:	84 60       	ori	r24, 0x04	; 4
    2e38:	8c 93       	st	X, r24
    2e3a:	07 c0       	rjmp	.+14     	; 0x2e4a <Timer_Init+0x354>
				break;
			case COMPARE_MODE :
				SET_BIT(TIMSK,OCIE1A);
    2e3c:	a9 e5       	ldi	r26, 0x59	; 89
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	e9 e5       	ldi	r30, 0x59	; 89
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	80 61       	ori	r24, 0x10	; 16
    2e48:	8c 93       	st	X, r24
				break;
			}
		}

		/* Configure OC PIN Mode */
		switch(config->oc_mode)
    2e4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e4e:	82 81       	ldd	r24, Z+2	; 0x02
    2e50:	28 2f       	mov	r18, r24
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	3a 87       	std	Y+10, r19	; 0x0a
    2e56:	29 87       	std	Y+9, r18	; 0x09
    2e58:	89 85       	ldd	r24, Y+9	; 0x09
    2e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5c:	81 30       	cpi	r24, 0x01	; 1
    2e5e:	91 05       	cpc	r25, r1
    2e60:	21 f1       	breq	.+72     	; 0x2eaa <Timer_Init+0x3b4>
    2e62:	29 85       	ldd	r18, Y+9	; 0x09
    2e64:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e66:	22 30       	cpi	r18, 0x02	; 2
    2e68:	31 05       	cpc	r19, r1
    2e6a:	2c f4       	brge	.+10     	; 0x2e76 <Timer_Init+0x380>
    2e6c:	89 85       	ldd	r24, Y+9	; 0x09
    2e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e70:	00 97       	sbiw	r24, 0x00	; 0
    2e72:	61 f0       	breq	.+24     	; 0x2e8c <Timer_Init+0x396>
    2e74:	5c c0       	rjmp	.+184    	; 0x2f2e <Timer_Init+0x438>
    2e76:	29 85       	ldd	r18, Y+9	; 0x09
    2e78:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e7a:	22 30       	cpi	r18, 0x02	; 2
    2e7c:	31 05       	cpc	r19, r1
    2e7e:	59 f1       	breq	.+86     	; 0x2ed6 <Timer_Init+0x3e0>
    2e80:	89 85       	ldd	r24, Y+9	; 0x09
    2e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e84:	83 30       	cpi	r24, 0x03	; 3
    2e86:	91 05       	cpc	r25, r1
    2e88:	e1 f1       	breq	.+120    	; 0x2f02 <Timer_Init+0x40c>
    2e8a:	51 c0       	rjmp	.+162    	; 0x2f2e <Timer_Init+0x438>
		{
			case DISCONNECTED:
				CLEAR_BIT(TCCR1A,COM1A0);
    2e8c:	af e4       	ldi	r26, 0x4F	; 79
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	ef e4       	ldi	r30, 0x4F	; 79
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	8f 7b       	andi	r24, 0xBF	; 191
    2e98:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,COM1A1);
    2e9a:	af e4       	ldi	r26, 0x4F	; 79
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	ef e4       	ldi	r30, 0x4F	; 79
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	8f 77       	andi	r24, 0x7F	; 127
    2ea6:	8c 93       	st	X, r24
    2ea8:	33 c1       	rjmp	.+614    	; 0x3110 <Timer_Init+0x61a>
				break;
			case TOGGLE:
				SET_BIT(DDRD,PD5);
    2eaa:	a1 e3       	ldi	r26, 0x31	; 49
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	e1 e3       	ldi	r30, 0x31	; 49
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	80 62       	ori	r24, 0x20	; 32
    2eb6:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,COM1A0);
    2eb8:	af e4       	ldi	r26, 0x4F	; 79
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	ef e4       	ldi	r30, 0x4F	; 79
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	80 64       	ori	r24, 0x40	; 64
    2ec4:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,COM1A1);
    2ec6:	af e4       	ldi	r26, 0x4F	; 79
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	ef e4       	ldi	r30, 0x4F	; 79
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	8f 77       	andi	r24, 0x7F	; 127
    2ed2:	8c 93       	st	X, r24
    2ed4:	1d c1       	rjmp	.+570    	; 0x3110 <Timer_Init+0x61a>
				break;
			case CLEAR:
				SET_BIT(DDRD,PD5);
    2ed6:	a1 e3       	ldi	r26, 0x31	; 49
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	e1 e3       	ldi	r30, 0x31	; 49
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	80 62       	ori	r24, 0x20	; 32
    2ee2:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,COM1A0);
    2ee4:	af e4       	ldi	r26, 0x4F	; 79
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	ef e4       	ldi	r30, 0x4F	; 79
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	80 81       	ld	r24, Z
    2eee:	8f 7b       	andi	r24, 0xBF	; 191
    2ef0:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,COM1A1);
    2ef2:	af e4       	ldi	r26, 0x4F	; 79
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	ef e4       	ldi	r30, 0x4F	; 79
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	80 68       	ori	r24, 0x80	; 128
    2efe:	8c 93       	st	X, r24
    2f00:	07 c1       	rjmp	.+526    	; 0x3110 <Timer_Init+0x61a>
				break;
			case SET:
				SET_BIT(DDRD,PD5);
    2f02:	a1 e3       	ldi	r26, 0x31	; 49
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e1 e3       	ldi	r30, 0x31	; 49
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	80 62       	ori	r24, 0x20	; 32
    2f0e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,COM1A0);
    2f10:	af e4       	ldi	r26, 0x4F	; 79
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	ef e4       	ldi	r30, 0x4F	; 79
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	80 64       	ori	r24, 0x40	; 64
    2f1c:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,COM1A1);
    2f1e:	af e4       	ldi	r26, 0x4F	; 79
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	ef e4       	ldi	r30, 0x4F	; 79
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	80 68       	ori	r24, 0x80	; 128
    2f2a:	8c 93       	st	X, r24
    2f2c:	f1 c0       	rjmp	.+482    	; 0x3110 <Timer_Init+0x61a>
				break;
			default :
				return 0;
    2f2e:	1b 8a       	std	Y+19, r1	; 0x13
    2f30:	f1 c0       	rjmp	.+482    	; 0x3114 <Timer_Init+0x61e>
		break;

	/*********************TIMER 2******************/
	case TIMER2_ID:
			/* Set FOC PIN as NON PWM MODE */
			SET_BIT(TCCR2,FOC2);
    2f32:	a5 e4       	ldi	r26, 0x45	; 69
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	e5 e4       	ldi	r30, 0x45	; 69
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	80 81       	ld	r24, Z
    2f3c:	80 68       	ori	r24, 0x80	; 128
    2f3e:	8c 93       	st	X, r24

			/*Configure timer mode*/
			switch(config->timer_mode)
    2f40:	e9 81       	ldd	r30, Y+1	; 0x01
    2f42:	fa 81       	ldd	r31, Y+2	; 0x02
    2f44:	81 81       	ldd	r24, Z+1	; 0x01
    2f46:	28 2f       	mov	r18, r24
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	38 87       	std	Y+8, r19	; 0x08
    2f4c:	2f 83       	std	Y+7, r18	; 0x07
    2f4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f50:	98 85       	ldd	r25, Y+8	; 0x08
    2f52:	00 97       	sbiw	r24, 0x00	; 0
    2f54:	31 f0       	breq	.+12     	; 0x2f62 <Timer_Init+0x46c>
    2f56:	2f 81       	ldd	r18, Y+7	; 0x07
    2f58:	38 85       	ldd	r19, Y+8	; 0x08
    2f5a:	22 30       	cpi	r18, 0x02	; 2
    2f5c:	31 05       	cpc	r19, r1
    2f5e:	81 f0       	breq	.+32     	; 0x2f80 <Timer_Init+0x48a>
    2f60:	1e c0       	rjmp	.+60     	; 0x2f9e <Timer_Init+0x4a8>
			{
				case OVERFLOW_MODE :
					CLEAR_BIT(TCCR2,WGM20);
    2f62:	a5 e4       	ldi	r26, 0x45	; 69
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	e5 e4       	ldi	r30, 0x45	; 69
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	80 81       	ld	r24, Z
    2f6c:	8f 7b       	andi	r24, 0xBF	; 191
    2f6e:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR2,WGM21);
    2f70:	a5 e4       	ldi	r26, 0x45	; 69
    2f72:	b0 e0       	ldi	r27, 0x00	; 0
    2f74:	e5 e4       	ldi	r30, 0x45	; 69
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	80 81       	ld	r24, Z
    2f7a:	87 7f       	andi	r24, 0xF7	; 247
    2f7c:	8c 93       	st	X, r24
    2f7e:	11 c0       	rjmp	.+34     	; 0x2fa2 <Timer_Init+0x4ac>
					break;

				case COMPARE_MODE :
					CLEAR_BIT(TCCR2,WGM20);
    2f80:	a5 e4       	ldi	r26, 0x45	; 69
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	e5 e4       	ldi	r30, 0x45	; 69
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	8f 7b       	andi	r24, 0xBF	; 191
    2f8c:	8c 93       	st	X, r24
					SET_BIT(TCCR2,WGM21);
    2f8e:	a5 e4       	ldi	r26, 0x45	; 69
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	e5 e4       	ldi	r30, 0x45	; 69
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	88 60       	ori	r24, 0x08	; 8
    2f9a:	8c 93       	st	X, r24
    2f9c:	02 c0       	rjmp	.+4      	; 0x2fa2 <Timer_Init+0x4ac>
					break;
				default :
					return 0;
    2f9e:	1b 8a       	std	Y+19, r1	; 0x13
    2fa0:	b9 c0       	rjmp	.+370    	; 0x3114 <Timer_Init+0x61e>
			}

			/* Configure OC PIN Mode */
			switch(config->oc_mode)
    2fa2:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa4:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa6:	82 81       	ldd	r24, Z+2	; 0x02
    2fa8:	28 2f       	mov	r18, r24
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	3e 83       	std	Y+6, r19	; 0x06
    2fae:	2d 83       	std	Y+5, r18	; 0x05
    2fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb4:	81 30       	cpi	r24, 0x01	; 1
    2fb6:	91 05       	cpc	r25, r1
    2fb8:	21 f1       	breq	.+72     	; 0x3002 <Timer_Init+0x50c>
    2fba:	2d 81       	ldd	r18, Y+5	; 0x05
    2fbc:	3e 81       	ldd	r19, Y+6	; 0x06
    2fbe:	22 30       	cpi	r18, 0x02	; 2
    2fc0:	31 05       	cpc	r19, r1
    2fc2:	2c f4       	brge	.+10     	; 0x2fce <Timer_Init+0x4d8>
    2fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc8:	00 97       	sbiw	r24, 0x00	; 0
    2fca:	61 f0       	breq	.+24     	; 0x2fe4 <Timer_Init+0x4ee>
    2fcc:	5c c0       	rjmp	.+184    	; 0x3086 <Timer_Init+0x590>
    2fce:	2d 81       	ldd	r18, Y+5	; 0x05
    2fd0:	3e 81       	ldd	r19, Y+6	; 0x06
    2fd2:	22 30       	cpi	r18, 0x02	; 2
    2fd4:	31 05       	cpc	r19, r1
    2fd6:	59 f1       	breq	.+86     	; 0x302e <Timer_Init+0x538>
    2fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fda:	9e 81       	ldd	r25, Y+6	; 0x06
    2fdc:	83 30       	cpi	r24, 0x03	; 3
    2fde:	91 05       	cpc	r25, r1
    2fe0:	e1 f1       	breq	.+120    	; 0x305a <Timer_Init+0x564>
    2fe2:	51 c0       	rjmp	.+162    	; 0x3086 <Timer_Init+0x590>
			{
				case DISCONNECTED:
					CLEAR_BIT(TCCR2,COM20);
    2fe4:	a5 e4       	ldi	r26, 0x45	; 69
    2fe6:	b0 e0       	ldi	r27, 0x00	; 0
    2fe8:	e5 e4       	ldi	r30, 0x45	; 69
    2fea:	f0 e0       	ldi	r31, 0x00	; 0
    2fec:	80 81       	ld	r24, Z
    2fee:	8f 7e       	andi	r24, 0xEF	; 239
    2ff0:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR2,COM21);
    2ff2:	a5 e4       	ldi	r26, 0x45	; 69
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	e5 e4       	ldi	r30, 0x45	; 69
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	80 81       	ld	r24, Z
    2ffc:	8f 7d       	andi	r24, 0xDF	; 223
    2ffe:	8c 93       	st	X, r24
    3000:	44 c0       	rjmp	.+136    	; 0x308a <Timer_Init+0x594>
					break;
				case TOGGLE:
					SET_BIT(DDRD,PD7);
    3002:	a1 e3       	ldi	r26, 0x31	; 49
    3004:	b0 e0       	ldi	r27, 0x00	; 0
    3006:	e1 e3       	ldi	r30, 0x31	; 49
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	80 81       	ld	r24, Z
    300c:	80 68       	ori	r24, 0x80	; 128
    300e:	8c 93       	st	X, r24
					SET_BIT(TCCR2,COM20);
    3010:	a5 e4       	ldi	r26, 0x45	; 69
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	e5 e4       	ldi	r30, 0x45	; 69
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	80 61       	ori	r24, 0x10	; 16
    301c:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR2,COM21);
    301e:	a5 e4       	ldi	r26, 0x45	; 69
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	e5 e4       	ldi	r30, 0x45	; 69
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	8f 7d       	andi	r24, 0xDF	; 223
    302a:	8c 93       	st	X, r24
    302c:	2e c0       	rjmp	.+92     	; 0x308a <Timer_Init+0x594>
					break;
				case CLEAR:
					SET_BIT(DDRD,PD7);
    302e:	a1 e3       	ldi	r26, 0x31	; 49
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	e1 e3       	ldi	r30, 0x31	; 49
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	80 68       	ori	r24, 0x80	; 128
    303a:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR2,COM20);
    303c:	a5 e4       	ldi	r26, 0x45	; 69
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	e5 e4       	ldi	r30, 0x45	; 69
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
    3046:	8f 7e       	andi	r24, 0xEF	; 239
    3048:	8c 93       	st	X, r24
					SET_BIT(TCCR2,COM21);
    304a:	a5 e4       	ldi	r26, 0x45	; 69
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	e5 e4       	ldi	r30, 0x45	; 69
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	80 62       	ori	r24, 0x20	; 32
    3056:	8c 93       	st	X, r24
    3058:	18 c0       	rjmp	.+48     	; 0x308a <Timer_Init+0x594>
					break;
				case SET:
					SET_BIT(DDRD,PD7);
    305a:	a1 e3       	ldi	r26, 0x31	; 49
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	e1 e3       	ldi	r30, 0x31	; 49
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	80 81       	ld	r24, Z
    3064:	80 68       	ori	r24, 0x80	; 128
    3066:	8c 93       	st	X, r24
					SET_BIT(TCCR2,COM20);
    3068:	a5 e4       	ldi	r26, 0x45	; 69
    306a:	b0 e0       	ldi	r27, 0x00	; 0
    306c:	e5 e4       	ldi	r30, 0x45	; 69
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	80 61       	ori	r24, 0x10	; 16
    3074:	8c 93       	st	X, r24
					SET_BIT(TCCR2,COM21);
    3076:	a5 e4       	ldi	r26, 0x45	; 69
    3078:	b0 e0       	ldi	r27, 0x00	; 0
    307a:	e5 e4       	ldi	r30, 0x45	; 69
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	80 81       	ld	r24, Z
    3080:	80 62       	ori	r24, 0x20	; 32
    3082:	8c 93       	st	X, r24
    3084:	02 c0       	rjmp	.+4      	; 0x308a <Timer_Init+0x594>
					break;
				default :
					return 0;
    3086:	1b 8a       	std	Y+19, r1	; 0x13
    3088:	45 c0       	rjmp	.+138    	; 0x3114 <Timer_Init+0x61e>
			}

			/* Clock Select */
			TCCR2 = (TCCR2 & 0xF8) | (config->timer_clk & 0x07);
    308a:	a5 e4       	ldi	r26, 0x45	; 69
    308c:	b0 e0       	ldi	r27, 0x00	; 0
    308e:	e5 e4       	ldi	r30, 0x45	; 69
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	80 81       	ld	r24, Z
    3094:	98 2f       	mov	r25, r24
    3096:	98 7f       	andi	r25, 0xF8	; 248
    3098:	e9 81       	ldd	r30, Y+1	; 0x01
    309a:	fa 81       	ldd	r31, Y+2	; 0x02
    309c:	83 81       	ldd	r24, Z+3	; 0x03
    309e:	87 70       	andi	r24, 0x07	; 7
    30a0:	89 2b       	or	r24, r25
    30a2:	8c 93       	st	X, r24

			/*	Set The initial value */
			TCNT2 = config->inital_value;
    30a4:	a4 e4       	ldi	r26, 0x44	; 68
    30a6:	b0 e0       	ldi	r27, 0x00	; 0
    30a8:	e9 81       	ldd	r30, Y+1	; 0x01
    30aa:	fa 81       	ldd	r31, Y+2	; 0x02
    30ac:	85 81       	ldd	r24, Z+5	; 0x05
    30ae:	96 81       	ldd	r25, Z+6	; 0x06
    30b0:	8c 93       	st	X, r24

			/* Set the compare value */
			OCR2 = config->compare_value;
    30b2:	a3 e4       	ldi	r26, 0x43	; 67
    30b4:	b0 e0       	ldi	r27, 0x00	; 0
    30b6:	e9 81       	ldd	r30, Y+1	; 0x01
    30b8:	fa 81       	ldd	r31, Y+2	; 0x02
    30ba:	87 81       	ldd	r24, Z+7	; 0x07
    30bc:	90 85       	ldd	r25, Z+8	; 0x08
    30be:	8c 93       	st	X, r24


			/*Set the interrupt Configuarion */
			if(config->interrupt)
    30c0:	e9 81       	ldd	r30, Y+1	; 0x01
    30c2:	fa 81       	ldd	r31, Y+2	; 0x02
    30c4:	84 81       	ldd	r24, Z+4	; 0x04
    30c6:	88 23       	and	r24, r24
    30c8:	19 f1       	breq	.+70     	; 0x3110 <Timer_Init+0x61a>
			{
				switch(config->timer_mode)
    30ca:	e9 81       	ldd	r30, Y+1	; 0x01
    30cc:	fa 81       	ldd	r31, Y+2	; 0x02
    30ce:	81 81       	ldd	r24, Z+1	; 0x01
    30d0:	28 2f       	mov	r18, r24
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	3c 83       	std	Y+4, r19	; 0x04
    30d6:	2b 83       	std	Y+3, r18	; 0x03
    30d8:	8b 81       	ldd	r24, Y+3	; 0x03
    30da:	9c 81       	ldd	r25, Y+4	; 0x04
    30dc:	00 97       	sbiw	r24, 0x00	; 0
    30de:	31 f0       	breq	.+12     	; 0x30ec <Timer_Init+0x5f6>
    30e0:	2b 81       	ldd	r18, Y+3	; 0x03
    30e2:	3c 81       	ldd	r19, Y+4	; 0x04
    30e4:	22 30       	cpi	r18, 0x02	; 2
    30e6:	31 05       	cpc	r19, r1
    30e8:	49 f0       	breq	.+18     	; 0x30fc <Timer_Init+0x606>
    30ea:	12 c0       	rjmp	.+36     	; 0x3110 <Timer_Init+0x61a>
				{
				case OVERFLOW_MODE :
					SET_BIT(TIMSK,TOIE2);
    30ec:	a9 e5       	ldi	r26, 0x59	; 89
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	e9 e5       	ldi	r30, 0x59	; 89
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	80 64       	ori	r24, 0x40	; 64
    30f8:	8c 93       	st	X, r24
    30fa:	0a c0       	rjmp	.+20     	; 0x3110 <Timer_Init+0x61a>

					break;
				case COMPARE_MODE :
					SET_BIT(TIMSK,OCIE2);
    30fc:	a9 e5       	ldi	r26, 0x59	; 89
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	e9 e5       	ldi	r30, 0x59	; 89
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	80 68       	ori	r24, 0x80	; 128
    3108:	8c 93       	st	X, r24
    310a:	02 c0       	rjmp	.+4      	; 0x3110 <Timer_Init+0x61a>
					break;
				}
			}
			break;
	default:
		return 0;
    310c:	1b 8a       	std	Y+19, r1	; 0x13
    310e:	02 c0       	rjmp	.+4      	; 0x3114 <Timer_Init+0x61e>
	}

	return 1;
    3110:	31 e0       	ldi	r19, 0x01	; 1
    3112:	3b 8b       	std	Y+19, r19	; 0x13
    3114:	8b 89       	ldd	r24, Y+19	; 0x13
}
    3116:	67 96       	adiw	r28, 0x17	; 23
    3118:	0f b6       	in	r0, 0x3f	; 63
    311a:	f8 94       	cli
    311c:	de bf       	out	0x3e, r29	; 62
    311e:	0f be       	out	0x3f, r0	; 63
    3120:	cd bf       	out	0x3d, r28	; 61
    3122:	cf 91       	pop	r28
    3124:	df 91       	pop	r29
    3126:	08 95       	ret

00003128 <Timer_Deinit>:
/* Function to deinit the timer it clears all the registers */
void Timer_Deinit(uint8 timer_id)
{
    3128:	df 93       	push	r29
    312a:	cf 93       	push	r28
    312c:	00 d0       	rcall	.+0      	; 0x312e <Timer_Deinit+0x6>
    312e:	0f 92       	push	r0
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
    3134:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_id)
    3136:	89 81       	ldd	r24, Y+1	; 0x01
    3138:	28 2f       	mov	r18, r24
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	3b 83       	std	Y+3, r19	; 0x03
    313e:	2a 83       	std	Y+2, r18	; 0x02
    3140:	8a 81       	ldd	r24, Y+2	; 0x02
    3142:	9b 81       	ldd	r25, Y+3	; 0x03
    3144:	81 30       	cpi	r24, 0x01	; 1
    3146:	91 05       	cpc	r25, r1
    3148:	11 f1       	breq	.+68     	; 0x318e <Timer_Deinit+0x66>
    314a:	2a 81       	ldd	r18, Y+2	; 0x02
    314c:	3b 81       	ldd	r19, Y+3	; 0x03
    314e:	22 30       	cpi	r18, 0x02	; 2
    3150:	31 05       	cpc	r19, r1
    3152:	d1 f1       	breq	.+116    	; 0x31c8 <Timer_Deinit+0xa0>
    3154:	8a 81       	ldd	r24, Y+2	; 0x02
    3156:	9b 81       	ldd	r25, Y+3	; 0x03
    3158:	00 97       	sbiw	r24, 0x00	; 0
    315a:	09 f0       	breq	.+2      	; 0x315e <Timer_Deinit+0x36>
    315c:	4c c0       	rjmp	.+152    	; 0x31f6 <Timer_Deinit+0xce>
	{
	case TIMER0_ID:
		TCCR0=0;
    315e:	e3 e5       	ldi	r30, 0x53	; 83
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	10 82       	st	Z, r1
		TCNT0=0;
    3164:	e2 e5       	ldi	r30, 0x52	; 82
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	10 82       	st	Z, r1
		OCR0 =0;
    316a:	ec e5       	ldi	r30, 0x5C	; 92
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE0);
    3170:	a9 e5       	ldi	r26, 0x59	; 89
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	e9 e5       	ldi	r30, 0x59	; 89
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	80 81       	ld	r24, Z
    317a:	8e 7f       	andi	r24, 0xFE	; 254
    317c:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE0);
    317e:	a9 e5       	ldi	r26, 0x59	; 89
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	e9 e5       	ldi	r30, 0x59	; 89
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	8d 7f       	andi	r24, 0xFD	; 253
    318a:	8c 93       	st	X, r24
    318c:	34 c0       	rjmp	.+104    	; 0x31f6 <Timer_Deinit+0xce>
		break;

	case TIMER1_ID:
		TCCR1B=0;
    318e:	ee e4       	ldi	r30, 0x4E	; 78
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	10 82       	st	Z, r1
		TCCR1A=0;
    3194:	ef e4       	ldi	r30, 0x4F	; 79
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	10 82       	st	Z, r1
		TCNT1 =0;
    319a:	ec e4       	ldi	r30, 0x4C	; 76
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	11 82       	std	Z+1, r1	; 0x01
    31a0:	10 82       	st	Z, r1
		OCR1A =0;
    31a2:	ea e4       	ldi	r30, 0x4A	; 74
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	11 82       	std	Z+1, r1	; 0x01
    31a8:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE1);
    31aa:	a9 e5       	ldi	r26, 0x59	; 89
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	e9 e5       	ldi	r30, 0x59	; 89
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	8b 7f       	andi	r24, 0xFB	; 251
    31b6:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1A);
    31b8:	a9 e5       	ldi	r26, 0x59	; 89
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	e9 e5       	ldi	r30, 0x59	; 89
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	8f 7e       	andi	r24, 0xEF	; 239
    31c4:	8c 93       	st	X, r24
    31c6:	17 c0       	rjmp	.+46     	; 0x31f6 <Timer_Deinit+0xce>
		break;

	case TIMER2_ID:
		TCCR2=0;
    31c8:	e5 e4       	ldi	r30, 0x45	; 69
    31ca:	f0 e0       	ldi	r31, 0x00	; 0
    31cc:	10 82       	st	Z, r1
		TCNT2=0;
    31ce:	e4 e4       	ldi	r30, 0x44	; 68
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	10 82       	st	Z, r1
		OCR2 =0;
    31d4:	e3 e4       	ldi	r30, 0x43	; 67
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE2);
    31da:	a9 e5       	ldi	r26, 0x59	; 89
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e9 e5       	ldi	r30, 0x59	; 89
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	8f 7b       	andi	r24, 0xBF	; 191
    31e6:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE2);
    31e8:	a9 e5       	ldi	r26, 0x59	; 89
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	e9 e5       	ldi	r30, 0x59	; 89
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	8f 77       	andi	r24, 0x7F	; 127
    31f4:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	0f 90       	pop	r0
    31fc:	cf 91       	pop	r28
    31fe:	df 91       	pop	r29
    3200:	08 95       	ret

00003202 <Timer_Stop>:

/* Function to be called for stop the timer */
void Timer_Stop(uint8 timer_id)
{
    3202:	df 93       	push	r29
    3204:	cf 93       	push	r28
    3206:	00 d0       	rcall	.+0      	; 0x3208 <Timer_Stop+0x6>
    3208:	0f 92       	push	r0
    320a:	cd b7       	in	r28, 0x3d	; 61
    320c:	de b7       	in	r29, 0x3e	; 62
    320e:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_id)
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	28 2f       	mov	r18, r24
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	3b 83       	std	Y+3, r19	; 0x03
    3218:	2a 83       	std	Y+2, r18	; 0x02
    321a:	8a 81       	ldd	r24, Y+2	; 0x02
    321c:	9b 81       	ldd	r25, Y+3	; 0x03
    321e:	81 30       	cpi	r24, 0x01	; 1
    3220:	91 05       	cpc	r25, r1
    3222:	69 f0       	breq	.+26     	; 0x323e <Timer_Stop+0x3c>
    3224:	2a 81       	ldd	r18, Y+2	; 0x02
    3226:	3b 81       	ldd	r19, Y+3	; 0x03
    3228:	22 30       	cpi	r18, 0x02	; 2
    322a:	31 05       	cpc	r19, r1
    322c:	79 f0       	breq	.+30     	; 0x324c <Timer_Stop+0x4a>
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	9b 81       	ldd	r25, Y+3	; 0x03
    3232:	00 97       	sbiw	r24, 0x00	; 0
    3234:	71 f4       	brne	.+28     	; 0x3252 <Timer_Stop+0x50>
		{
		case TIMER0_ID:
			TCCR0=0;
    3236:	e3 e5       	ldi	r30, 0x53	; 83
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	10 82       	st	Z, r1
    323c:	0a c0       	rjmp	.+20     	; 0x3252 <Timer_Stop+0x50>
			break;

		case TIMER1_ID:
			TCCR1B=0;
    323e:	ee e4       	ldi	r30, 0x4E	; 78
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	10 82       	st	Z, r1
			TCCR1A=0;
    3244:	ef e4       	ldi	r30, 0x4F	; 79
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	10 82       	st	Z, r1
    324a:	03 c0       	rjmp	.+6      	; 0x3252 <Timer_Stop+0x50>
			break;

		case TIMER2_ID:
			TCCR2=0;
    324c:	e5 e4       	ldi	r30, 0x45	; 69
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	10 82       	st	Z, r1
			break;
		default:
			break;
		}
}
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	cf 91       	pop	r28
    325a:	df 91       	pop	r29
    325c:	08 95       	ret

0000325e <Timer_SetCallBack>:

void Timer_SetCallBack(uint8 timer_id,volatile void(*a_ptr)(void), TIMER_Mode mode)
{
    325e:	df 93       	push	r29
    3260:	cf 93       	push	r28
    3262:	cd b7       	in	r28, 0x3d	; 61
    3264:	de b7       	in	r29, 0x3e	; 62
    3266:	2c 97       	sbiw	r28, 0x0c	; 12
    3268:	0f b6       	in	r0, 0x3f	; 63
    326a:	f8 94       	cli
    326c:	de bf       	out	0x3e, r29	; 62
    326e:	0f be       	out	0x3f, r0	; 63
    3270:	cd bf       	out	0x3d, r28	; 61
    3272:	89 83       	std	Y+1, r24	; 0x01
    3274:	7b 83       	std	Y+3, r23	; 0x03
    3276:	6a 83       	std	Y+2, r22	; 0x02
    3278:	4c 83       	std	Y+4, r20	; 0x04
	switch (timer_id)
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	28 2f       	mov	r18, r24
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	3c 87       	std	Y+12, r19	; 0x0c
    3282:	2b 87       	std	Y+11, r18	; 0x0b
    3284:	8b 85       	ldd	r24, Y+11	; 0x0b
    3286:	9c 85       	ldd	r25, Y+12	; 0x0c
    3288:	81 30       	cpi	r24, 0x01	; 1
    328a:	91 05       	cpc	r25, r1
    328c:	41 f1       	breq	.+80     	; 0x32de <Timer_SetCallBack+0x80>
    328e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3290:	3c 85       	ldd	r19, Y+12	; 0x0c
    3292:	22 30       	cpi	r18, 0x02	; 2
    3294:	31 05       	cpc	r19, r1
    3296:	09 f4       	brne	.+2      	; 0x329a <Timer_SetCallBack+0x3c>
    3298:	3f c0       	rjmp	.+126    	; 0x3318 <Timer_SetCallBack+0xba>
    329a:	8b 85       	ldd	r24, Y+11	; 0x0b
    329c:	9c 85       	ldd	r25, Y+12	; 0x0c
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	09 f0       	breq	.+2      	; 0x32a4 <Timer_SetCallBack+0x46>
    32a2:	56 c0       	rjmp	.+172    	; 0x3350 <Timer_SetCallBack+0xf2>
		{
		case TIMER0_ID:
			switch(mode)
    32a4:	8c 81       	ldd	r24, Y+4	; 0x04
    32a6:	28 2f       	mov	r18, r24
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	3a 87       	std	Y+10, r19	; 0x0a
    32ac:	29 87       	std	Y+9, r18	; 0x09
    32ae:	89 85       	ldd	r24, Y+9	; 0x09
    32b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b2:	00 97       	sbiw	r24, 0x00	; 0
    32b4:	31 f0       	breq	.+12     	; 0x32c2 <Timer_SetCallBack+0x64>
    32b6:	29 85       	ldd	r18, Y+9	; 0x09
    32b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    32ba:	22 30       	cpi	r18, 0x02	; 2
    32bc:	31 05       	cpc	r19, r1
    32be:	41 f0       	breq	.+16     	; 0x32d0 <Timer_SetCallBack+0x72>
    32c0:	47 c0       	rjmp	.+142    	; 0x3350 <Timer_SetCallBack+0xf2>
			{
				case OVERFLOW_MODE :
					g_callBackPtr_timer0_OVF = a_ptr;
    32c2:	8a 81       	ldd	r24, Y+2	; 0x02
    32c4:	9b 81       	ldd	r25, Y+3	; 0x03
    32c6:	90 93 46 01 	sts	0x0146, r25
    32ca:	80 93 45 01 	sts	0x0145, r24
    32ce:	40 c0       	rjmp	.+128    	; 0x3350 <Timer_SetCallBack+0xf2>
					break;

				case COMPARE_MODE :
					g_callBackPtr_timer0_COMP = a_ptr;
    32d0:	8a 81       	ldd	r24, Y+2	; 0x02
    32d2:	9b 81       	ldd	r25, Y+3	; 0x03
    32d4:	90 93 4c 01 	sts	0x014C, r25
    32d8:	80 93 4b 01 	sts	0x014B, r24
    32dc:	39 c0       	rjmp	.+114    	; 0x3350 <Timer_SetCallBack+0xf2>
					break;
			}
			break;

		case TIMER1_ID:
			switch(mode)
    32de:	8c 81       	ldd	r24, Y+4	; 0x04
    32e0:	28 2f       	mov	r18, r24
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	38 87       	std	Y+8, r19	; 0x08
    32e6:	2f 83       	std	Y+7, r18	; 0x07
    32e8:	8f 81       	ldd	r24, Y+7	; 0x07
    32ea:	98 85       	ldd	r25, Y+8	; 0x08
    32ec:	00 97       	sbiw	r24, 0x00	; 0
    32ee:	31 f0       	breq	.+12     	; 0x32fc <Timer_SetCallBack+0x9e>
    32f0:	2f 81       	ldd	r18, Y+7	; 0x07
    32f2:	38 85       	ldd	r19, Y+8	; 0x08
    32f4:	22 30       	cpi	r18, 0x02	; 2
    32f6:	31 05       	cpc	r19, r1
    32f8:	41 f0       	breq	.+16     	; 0x330a <Timer_SetCallBack+0xac>
    32fa:	2a c0       	rjmp	.+84     	; 0x3350 <Timer_SetCallBack+0xf2>
			{
				case OVERFLOW_MODE :
					g_callBackPtr_timer1_OVF = a_ptr;
    32fc:	8a 81       	ldd	r24, Y+2	; 0x02
    32fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3300:	90 93 48 01 	sts	0x0148, r25
    3304:	80 93 47 01 	sts	0x0147, r24
    3308:	23 c0       	rjmp	.+70     	; 0x3350 <Timer_SetCallBack+0xf2>
					break;

				case COMPARE_MODE :
					g_callBackPtr_timer1_COMP = a_ptr;
    330a:	8a 81       	ldd	r24, Y+2	; 0x02
    330c:	9b 81       	ldd	r25, Y+3	; 0x03
    330e:	90 93 4e 01 	sts	0x014E, r25
    3312:	80 93 4d 01 	sts	0x014D, r24
    3316:	1c c0       	rjmp	.+56     	; 0x3350 <Timer_SetCallBack+0xf2>
					break;
			}
			break;

		case TIMER2_ID:
			switch(mode)
    3318:	8c 81       	ldd	r24, Y+4	; 0x04
    331a:	28 2f       	mov	r18, r24
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	3e 83       	std	Y+6, r19	; 0x06
    3320:	2d 83       	std	Y+5, r18	; 0x05
    3322:	8d 81       	ldd	r24, Y+5	; 0x05
    3324:	9e 81       	ldd	r25, Y+6	; 0x06
    3326:	00 97       	sbiw	r24, 0x00	; 0
    3328:	31 f0       	breq	.+12     	; 0x3336 <Timer_SetCallBack+0xd8>
    332a:	2d 81       	ldd	r18, Y+5	; 0x05
    332c:	3e 81       	ldd	r19, Y+6	; 0x06
    332e:	22 30       	cpi	r18, 0x02	; 2
    3330:	31 05       	cpc	r19, r1
    3332:	41 f0       	breq	.+16     	; 0x3344 <Timer_SetCallBack+0xe6>
    3334:	0d c0       	rjmp	.+26     	; 0x3350 <Timer_SetCallBack+0xf2>
			{
				case OVERFLOW_MODE :
					g_callBackPtr_timer2_OVF = a_ptr;
    3336:	8a 81       	ldd	r24, Y+2	; 0x02
    3338:	9b 81       	ldd	r25, Y+3	; 0x03
    333a:	90 93 4a 01 	sts	0x014A, r25
    333e:	80 93 49 01 	sts	0x0149, r24
    3342:	06 c0       	rjmp	.+12     	; 0x3350 <Timer_SetCallBack+0xf2>
					break;

				case COMPARE_MODE :
					g_callBackPtr_timer2_COMP = a_ptr;
    3344:	8a 81       	ldd	r24, Y+2	; 0x02
    3346:	9b 81       	ldd	r25, Y+3	; 0x03
    3348:	90 93 50 01 	sts	0x0150, r25
    334c:	80 93 4f 01 	sts	0x014F, r24
			}
			break;
		default:
			break;
		}
}
    3350:	2c 96       	adiw	r28, 0x0c	; 12
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	f8 94       	cli
    3356:	de bf       	out	0x3e, r29	; 62
    3358:	0f be       	out	0x3f, r0	; 63
    335a:	cd bf       	out	0x3d, r28	; 61
    335c:	cf 91       	pop	r28
    335e:	df 91       	pop	r29
    3360:	08 95       	ret

00003362 <Timer_SetCompareValue>:

void Timer_SetCompareValue(uint8 timer_id ,uint16 value)
{
    3362:	df 93       	push	r29
    3364:	cf 93       	push	r28
    3366:	00 d0       	rcall	.+0      	; 0x3368 <Timer_SetCompareValue+0x6>
    3368:	00 d0       	rcall	.+0      	; 0x336a <Timer_SetCompareValue+0x8>
    336a:	0f 92       	push	r0
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
    3370:	89 83       	std	Y+1, r24	; 0x01
    3372:	7b 83       	std	Y+3, r23	; 0x03
    3374:	6a 83       	std	Y+2, r22	; 0x02
	switch (timer_id)
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	28 2f       	mov	r18, r24
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	3d 83       	std	Y+5, r19	; 0x05
    337e:	2c 83       	std	Y+4, r18	; 0x04
    3380:	8c 81       	ldd	r24, Y+4	; 0x04
    3382:	9d 81       	ldd	r25, Y+5	; 0x05
    3384:	81 30       	cpi	r24, 0x01	; 1
    3386:	91 05       	cpc	r25, r1
    3388:	71 f0       	breq	.+28     	; 0x33a6 <Timer_SetCompareValue+0x44>
    338a:	2c 81       	ldd	r18, Y+4	; 0x04
    338c:	3d 81       	ldd	r19, Y+5	; 0x05
    338e:	22 30       	cpi	r18, 0x02	; 2
    3390:	31 05       	cpc	r19, r1
    3392:	81 f0       	breq	.+32     	; 0x33b4 <Timer_SetCompareValue+0x52>
    3394:	8c 81       	ldd	r24, Y+4	; 0x04
    3396:	9d 81       	ldd	r25, Y+5	; 0x05
    3398:	00 97       	sbiw	r24, 0x00	; 0
    339a:	81 f4       	brne	.+32     	; 0x33bc <Timer_SetCompareValue+0x5a>
		{
		case TIMER0_ID:
			OCR0 = value;
    339c:	ec e5       	ldi	r30, 0x5C	; 92
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	8a 81       	ldd	r24, Y+2	; 0x02
    33a2:	80 83       	st	Z, r24
    33a4:	0b c0       	rjmp	.+22     	; 0x33bc <Timer_SetCompareValue+0x5a>
			break;
		case TIMER1_ID:
			OCR1A = value;
    33a6:	ea e4       	ldi	r30, 0x4A	; 74
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	8a 81       	ldd	r24, Y+2	; 0x02
    33ac:	9b 81       	ldd	r25, Y+3	; 0x03
    33ae:	91 83       	std	Z+1, r25	; 0x01
    33b0:	80 83       	st	Z, r24
    33b2:	04 c0       	rjmp	.+8      	; 0x33bc <Timer_SetCompareValue+0x5a>
			break;
		case TIMER2_ID:
			OCR2 = value;
    33b4:	e3 e4       	ldi	r30, 0x43	; 67
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ba:	80 83       	st	Z, r24
			break;
		default:
			break;
		}
}
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	cf 91       	pop	r28
    33c8:	df 91       	pop	r29
    33ca:	08 95       	ret

000033cc <__vector_11>:
static volatile void (*g_callBackPtr_UART_TXC)(void) = NULL_PTR;
static volatile void (*g_callBackPtr_UART_UDRE)(void) = NULL_PTR;

/* Interrupt service routine when the UART recieves data */
ISR(USART_RXC_vect)
{
    33cc:	1f 92       	push	r1
    33ce:	0f 92       	push	r0
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	0f 92       	push	r0
    33d4:	11 24       	eor	r1, r1
    33d6:	2f 93       	push	r18
    33d8:	3f 93       	push	r19
    33da:	4f 93       	push	r20
    33dc:	5f 93       	push	r21
    33de:	6f 93       	push	r22
    33e0:	7f 93       	push	r23
    33e2:	8f 93       	push	r24
    33e4:	9f 93       	push	r25
    33e6:	af 93       	push	r26
    33e8:	bf 93       	push	r27
    33ea:	ef 93       	push	r30
    33ec:	ff 93       	push	r31
    33ee:	df 93       	push	r29
    33f0:	cf 93       	push	r28
    33f2:	cd b7       	in	r28, 0x3d	; 61
    33f4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_UART_RXC != NULL_PTR)
    33f6:	80 91 51 01 	lds	r24, 0x0151
    33fa:	90 91 52 01 	lds	r25, 0x0152
    33fe:	00 97       	sbiw	r24, 0x00	; 0
    3400:	29 f0       	breq	.+10     	; 0x340c <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_UART_RXC)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3402:	e0 91 51 01 	lds	r30, 0x0151
    3406:	f0 91 52 01 	lds	r31, 0x0152
    340a:	09 95       	icall
	}
}
    340c:	cf 91       	pop	r28
    340e:	df 91       	pop	r29
    3410:	ff 91       	pop	r31
    3412:	ef 91       	pop	r30
    3414:	bf 91       	pop	r27
    3416:	af 91       	pop	r26
    3418:	9f 91       	pop	r25
    341a:	8f 91       	pop	r24
    341c:	7f 91       	pop	r23
    341e:	6f 91       	pop	r22
    3420:	5f 91       	pop	r21
    3422:	4f 91       	pop	r20
    3424:	3f 91       	pop	r19
    3426:	2f 91       	pop	r18
    3428:	0f 90       	pop	r0
    342a:	0f be       	out	0x3f, r0	; 63
    342c:	0f 90       	pop	r0
    342e:	1f 90       	pop	r1
    3430:	18 95       	reti

00003432 <__vector_13>:

/* Interrupt service routine when the UART send data */
ISR(USART_TXC_vect)
{
    3432:	1f 92       	push	r1
    3434:	0f 92       	push	r0
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	0f 92       	push	r0
    343a:	11 24       	eor	r1, r1
    343c:	2f 93       	push	r18
    343e:	3f 93       	push	r19
    3440:	4f 93       	push	r20
    3442:	5f 93       	push	r21
    3444:	6f 93       	push	r22
    3446:	7f 93       	push	r23
    3448:	8f 93       	push	r24
    344a:	9f 93       	push	r25
    344c:	af 93       	push	r26
    344e:	bf 93       	push	r27
    3450:	ef 93       	push	r30
    3452:	ff 93       	push	r31
    3454:	df 93       	push	r29
    3456:	cf 93       	push	r28
    3458:	cd b7       	in	r28, 0x3d	; 61
    345a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_UART_TXC != NULL_PTR)
    345c:	80 91 53 01 	lds	r24, 0x0153
    3460:	90 91 54 01 	lds	r25, 0x0154
    3464:	00 97       	sbiw	r24, 0x00	; 0
    3466:	29 f0       	breq	.+10     	; 0x3472 <__vector_13+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_UART_TXC)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3468:	e0 91 53 01 	lds	r30, 0x0153
    346c:	f0 91 54 01 	lds	r31, 0x0154
    3470:	09 95       	icall
	}
}
    3472:	cf 91       	pop	r28
    3474:	df 91       	pop	r29
    3476:	ff 91       	pop	r31
    3478:	ef 91       	pop	r30
    347a:	bf 91       	pop	r27
    347c:	af 91       	pop	r26
    347e:	9f 91       	pop	r25
    3480:	8f 91       	pop	r24
    3482:	7f 91       	pop	r23
    3484:	6f 91       	pop	r22
    3486:	5f 91       	pop	r21
    3488:	4f 91       	pop	r20
    348a:	3f 91       	pop	r19
    348c:	2f 91       	pop	r18
    348e:	0f 90       	pop	r0
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	0f 90       	pop	r0
    3494:	1f 90       	pop	r1
    3496:	18 95       	reti

00003498 <__vector_12>:

/* Interrupt service routine when the UART send data */
ISR(USART_UDRE_vect)
{
    3498:	1f 92       	push	r1
    349a:	0f 92       	push	r0
    349c:	0f b6       	in	r0, 0x3f	; 63
    349e:	0f 92       	push	r0
    34a0:	11 24       	eor	r1, r1
    34a2:	2f 93       	push	r18
    34a4:	3f 93       	push	r19
    34a6:	4f 93       	push	r20
    34a8:	5f 93       	push	r21
    34aa:	6f 93       	push	r22
    34ac:	7f 93       	push	r23
    34ae:	8f 93       	push	r24
    34b0:	9f 93       	push	r25
    34b2:	af 93       	push	r26
    34b4:	bf 93       	push	r27
    34b6:	ef 93       	push	r30
    34b8:	ff 93       	push	r31
    34ba:	df 93       	push	r29
    34bc:	cf 93       	push	r28
    34be:	cd b7       	in	r28, 0x3d	; 61
    34c0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_UART_UDRE != NULL_PTR)
    34c2:	80 91 55 01 	lds	r24, 0x0155
    34c6:	90 91 56 01 	lds	r25, 0x0156
    34ca:	00 97       	sbiw	r24, 0x00	; 0
    34cc:	29 f0       	breq	.+10     	; 0x34d8 <__vector_12+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_UART_UDRE)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    34ce:	e0 91 55 01 	lds	r30, 0x0155
    34d2:	f0 91 56 01 	lds	r31, 0x0156
    34d6:	09 95       	icall
	}
}
    34d8:	cf 91       	pop	r28
    34da:	df 91       	pop	r29
    34dc:	ff 91       	pop	r31
    34de:	ef 91       	pop	r30
    34e0:	bf 91       	pop	r27
    34e2:	af 91       	pop	r26
    34e4:	9f 91       	pop	r25
    34e6:	8f 91       	pop	r24
    34e8:	7f 91       	pop	r23
    34ea:	6f 91       	pop	r22
    34ec:	5f 91       	pop	r21
    34ee:	4f 91       	pop	r20
    34f0:	3f 91       	pop	r19
    34f2:	2f 91       	pop	r18
    34f4:	0f 90       	pop	r0
    34f6:	0f be       	out	0x3f, r0	; 63
    34f8:	0f 90       	pop	r0
    34fa:	1f 90       	pop	r1
    34fc:	18 95       	reti

000034fe <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(UART_Config* config)
{
    34fe:	df 93       	push	r29
    3500:	cf 93       	push	r28
    3502:	00 d0       	rcall	.+0      	; 0x3504 <UART_init+0x6>
    3504:	00 d0       	rcall	.+0      	; 0x3506 <UART_init+0x8>
    3506:	00 d0       	rcall	.+0      	; 0x3508 <UART_init+0xa>
    3508:	cd b7       	in	r28, 0x3d	; 61
    350a:	de b7       	in	r29, 0x3e	; 62
    350c:	9c 83       	std	Y+4, r25	; 0x04
    350e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3510:	1a 82       	std	Y+2, r1	; 0x02
    3512:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed*/
	if(config->doublespeed)
    3514:	eb 81       	ldd	r30, Y+3	; 0x03
    3516:	fc 81       	ldd	r31, Y+4	; 0x04
    3518:	82 81       	ldd	r24, Z+2	; 0x02
    351a:	88 23       	and	r24, r24
    351c:	39 f0       	breq	.+14     	; 0x352c <UART_init+0x2e>
	{
	SET_BIT(UCSRA,U2X);
    351e:	ab e2       	ldi	r26, 0x2B	; 43
    3520:	b0 e0       	ldi	r27, 0x00	; 0
    3522:	eb e2       	ldi	r30, 0x2B	; 43
    3524:	f0 e0       	ldi	r31, 0x00	; 0
    3526:	80 81       	ld	r24, Z
    3528:	82 60       	ori	r24, 0x02	; 2
    352a:	8c 93       	st	X, r24
	}

	/* For Rx Enable */
	if(config->RxEn)
    352c:	eb 81       	ldd	r30, Y+3	; 0x03
    352e:	fc 81       	ldd	r31, Y+4	; 0x04
    3530:	80 81       	ld	r24, Z
    3532:	88 23       	and	r24, r24
    3534:	39 f0       	breq	.+14     	; 0x3544 <UART_init+0x46>
	{
		SET_BIT(UCSRB,RXEN);
    3536:	aa e2       	ldi	r26, 0x2A	; 42
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	ea e2       	ldi	r30, 0x2A	; 42
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	80 81       	ld	r24, Z
    3540:	80 61       	ori	r24, 0x10	; 16
    3542:	8c 93       	st	X, r24
	}

	/* For Tx Enable */
	if(config->TxEn)
    3544:	eb 81       	ldd	r30, Y+3	; 0x03
    3546:	fc 81       	ldd	r31, Y+4	; 0x04
    3548:	81 81       	ldd	r24, Z+1	; 0x01
    354a:	88 23       	and	r24, r24
    354c:	39 f0       	breq	.+14     	; 0x355c <UART_init+0x5e>
	{
		SET_BIT(UCSRB,TXEN);
    354e:	aa e2       	ldi	r26, 0x2A	; 42
    3550:	b0 e0       	ldi	r27, 0x00	; 0
    3552:	ea e2       	ldi	r30, 0x2A	; 42
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	80 81       	ld	r24, Z
    3558:	88 60       	ori	r24, 0x08	; 8
    355a:	8c 93       	st	X, r24
	}

	/* For Rx Interrupt Enable */
	if(config->RxInt)
    355c:	eb 81       	ldd	r30, Y+3	; 0x03
    355e:	fc 81       	ldd	r31, Y+4	; 0x04
    3560:	83 81       	ldd	r24, Z+3	; 0x03
    3562:	88 23       	and	r24, r24
    3564:	39 f0       	breq	.+14     	; 0x3574 <UART_init+0x76>
	{
		SET_BIT(UCSRB,RXCIE);
    3566:	aa e2       	ldi	r26, 0x2A	; 42
    3568:	b0 e0       	ldi	r27, 0x00	; 0
    356a:	ea e2       	ldi	r30, 0x2A	; 42
    356c:	f0 e0       	ldi	r31, 0x00	; 0
    356e:	80 81       	ld	r24, Z
    3570:	80 68       	ori	r24, 0x80	; 128
    3572:	8c 93       	st	X, r24
	}

	/* For Tx Interrupt Enable */
	if (config->TxInt)
    3574:	eb 81       	ldd	r30, Y+3	; 0x03
    3576:	fc 81       	ldd	r31, Y+4	; 0x04
    3578:	84 81       	ldd	r24, Z+4	; 0x04
    357a:	88 23       	and	r24, r24
    357c:	39 f0       	breq	.+14     	; 0x358c <UART_init+0x8e>
	{
		SET_BIT(UCSRB,TXCIE);
    357e:	aa e2       	ldi	r26, 0x2A	; 42
    3580:	b0 e0       	ldi	r27, 0x00	; 0
    3582:	ea e2       	ldi	r30, 0x2A	; 42
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	80 81       	ld	r24, Z
    3588:	80 64       	ori	r24, 0x40	; 64
    358a:	8c 93       	st	X, r24
	}

	/* For Data register Empty Interrupt Enable*/
	if (config->EMPInt)
    358c:	eb 81       	ldd	r30, Y+3	; 0x03
    358e:	fc 81       	ldd	r31, Y+4	; 0x04
    3590:	85 81       	ldd	r24, Z+5	; 0x05
    3592:	88 23       	and	r24, r24
    3594:	39 f0       	breq	.+14     	; 0x35a4 <UART_init+0xa6>
	{
		SET_BIT(UCSRB,UDRIE);
    3596:	aa e2       	ldi	r26, 0x2A	; 42
    3598:	b0 e0       	ldi	r27, 0x00	; 0
    359a:	ea e2       	ldi	r30, 0x2A	; 42
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	80 81       	ld	r24, Z
    35a0:	80 62       	ori	r24, 0x20	; 32
    35a2:	8c 93       	st	X, r24
	}
	
	/* URSEL must be one when writing the UCSRC	*/
	SET_BIT(UCSRC,URSEL);
    35a4:	a0 e4       	ldi	r26, 0x40	; 64
    35a6:	b0 e0       	ldi	r27, 0x00	; 0
    35a8:	e0 e4       	ldi	r30, 0x40	; 64
    35aa:	f0 e0       	ldi	r31, 0x00	; 0
    35ac:	80 81       	ld	r24, Z
    35ae:	80 68       	ori	r24, 0x80	; 128
    35b0:	8c 93       	st	X, r24

	/* Parity settings */
	/* 1100 1111 */			   			/* 0011 0000 */
	UCSRC = (UCSRC & 0xCF ) | (config->parity & 0x30);
    35b2:	a0 e4       	ldi	r26, 0x40	; 64
    35b4:	b0 e0       	ldi	r27, 0x00	; 0
    35b6:	e0 e4       	ldi	r30, 0x40	; 64
    35b8:	f0 e0       	ldi	r31, 0x00	; 0
    35ba:	80 81       	ld	r24, Z
    35bc:	98 2f       	mov	r25, r24
    35be:	9f 7c       	andi	r25, 0xCF	; 207
    35c0:	eb 81       	ldd	r30, Y+3	; 0x03
    35c2:	fc 81       	ldd	r31, Y+4	; 0x04
    35c4:	86 81       	ldd	r24, Z+6	; 0x06
    35c6:	80 73       	andi	r24, 0x30	; 48
    35c8:	89 2b       	or	r24, r25
    35ca:	8c 93       	st	X, r24

	/* Stop bit select */
	UCSRC |= (config->stopbits<<USBS);
    35cc:	a0 e4       	ldi	r26, 0x40	; 64
    35ce:	b0 e0       	ldi	r27, 0x00	; 0
    35d0:	e0 e4       	ldi	r30, 0x40	; 64
    35d2:	f0 e0       	ldi	r31, 0x00	; 0
    35d4:	80 81       	ld	r24, Z
    35d6:	28 2f       	mov	r18, r24
    35d8:	eb 81       	ldd	r30, Y+3	; 0x03
    35da:	fc 81       	ldd	r31, Y+4	; 0x04
    35dc:	87 81       	ldd	r24, Z+7	; 0x07
    35de:	88 2f       	mov	r24, r24
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	88 0f       	add	r24, r24
    35e4:	99 1f       	adc	r25, r25
    35e6:	88 0f       	add	r24, r24
    35e8:	99 1f       	adc	r25, r25
    35ea:	88 0f       	add	r24, r24
    35ec:	99 1f       	adc	r25, r25
    35ee:	82 2b       	or	r24, r18
    35f0:	8c 93       	st	X, r24

	/* Data bits */
	switch(config->databits)
    35f2:	eb 81       	ldd	r30, Y+3	; 0x03
    35f4:	fc 81       	ldd	r31, Y+4	; 0x04
    35f6:	80 85       	ldd	r24, Z+8	; 0x08
    35f8:	28 2f       	mov	r18, r24
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	3e 83       	std	Y+6, r19	; 0x06
    35fe:	2d 83       	std	Y+5, r18	; 0x05
    3600:	8d 81       	ldd	r24, Y+5	; 0x05
    3602:	9e 81       	ldd	r25, Y+6	; 0x06
    3604:	99 23       	and	r25, r25
    3606:	6c f1       	brlt	.+90     	; 0x3662 <UART_init+0x164>
    3608:	2d 81       	ldd	r18, Y+5	; 0x05
    360a:	3e 81       	ldd	r19, Y+6	; 0x06
    360c:	24 30       	cpi	r18, 0x04	; 4
    360e:	31 05       	cpc	r19, r1
    3610:	34 f0       	brlt	.+12     	; 0x361e <UART_init+0x120>
    3612:	8d 81       	ldd	r24, Y+5	; 0x05
    3614:	9e 81       	ldd	r25, Y+6	; 0x06
    3616:	87 30       	cpi	r24, 0x07	; 7
    3618:	91 05       	cpc	r25, r1
    361a:	79 f0       	breq	.+30     	; 0x363a <UART_init+0x13c>
    361c:	22 c0       	rjmp	.+68     	; 0x3662 <UART_init+0x164>
	case FIVE :
	case SIX  :
	case SEVEN:
	case EIGHT:
		/* 1111 1001 */					/* 0000 0110 */
		UCSRC = (UCSRC & 0xF9 ) | (config->parity & 0x06);
    361e:	a0 e4       	ldi	r26, 0x40	; 64
    3620:	b0 e0       	ldi	r27, 0x00	; 0
    3622:	e0 e4       	ldi	r30, 0x40	; 64
    3624:	f0 e0       	ldi	r31, 0x00	; 0
    3626:	80 81       	ld	r24, Z
    3628:	98 2f       	mov	r25, r24
    362a:	99 7f       	andi	r25, 0xF9	; 249
    362c:	eb 81       	ldd	r30, Y+3	; 0x03
    362e:	fc 81       	ldd	r31, Y+4	; 0x04
    3630:	86 81       	ldd	r24, Z+6	; 0x06
    3632:	86 70       	andi	r24, 0x06	; 6
    3634:	89 2b       	or	r24, r25
    3636:	8c 93       	st	X, r24
    3638:	14 c0       	rjmp	.+40     	; 0x3662 <UART_init+0x164>
		break;
	case NINE:
		UCSRC = (UCSRC & 0xF9 ) | (config->parity & 0x06);
    363a:	a0 e4       	ldi	r26, 0x40	; 64
    363c:	b0 e0       	ldi	r27, 0x00	; 0
    363e:	e0 e4       	ldi	r30, 0x40	; 64
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	80 81       	ld	r24, Z
    3644:	98 2f       	mov	r25, r24
    3646:	99 7f       	andi	r25, 0xF9	; 249
    3648:	eb 81       	ldd	r30, Y+3	; 0x03
    364a:	fc 81       	ldd	r31, Y+4	; 0x04
    364c:	86 81       	ldd	r24, Z+6	; 0x06
    364e:	86 70       	andi	r24, 0x06	; 6
    3650:	89 2b       	or	r24, r25
    3652:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ2);
    3654:	aa e2       	ldi	r26, 0x2A	; 42
    3656:	b0 e0       	ldi	r27, 0x00	; 0
    3658:	ea e2       	ldi	r30, 0x2A	; 42
    365a:	f0 e0       	ldi	r31, 0x00	; 0
    365c:	80 81       	ld	r24, Z
    365e:	84 60       	ori	r24, 0x04	; 4
    3660:	8c 93       	st	X, r24
		break;
	}
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config->baudrate * 8UL))) - 1);
    3662:	eb 81       	ldd	r30, Y+3	; 0x03
    3664:	fc 81       	ldd	r31, Y+4	; 0x04
    3666:	81 85       	ldd	r24, Z+9	; 0x09
    3668:	92 85       	ldd	r25, Z+10	; 0x0a
    366a:	cc 01       	movw	r24, r24
    366c:	a0 e0       	ldi	r26, 0x00	; 0
    366e:	b0 e0       	ldi	r27, 0x00	; 0
    3670:	88 0f       	add	r24, r24
    3672:	99 1f       	adc	r25, r25
    3674:	aa 1f       	adc	r26, r26
    3676:	bb 1f       	adc	r27, r27
    3678:	88 0f       	add	r24, r24
    367a:	99 1f       	adc	r25, r25
    367c:	aa 1f       	adc	r26, r26
    367e:	bb 1f       	adc	r27, r27
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	aa 1f       	adc	r26, r26
    3686:	bb 1f       	adc	r27, r27
    3688:	9c 01       	movw	r18, r24
    368a:	ad 01       	movw	r20, r26
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	92 e1       	ldi	r25, 0x12	; 18
    3690:	aa e7       	ldi	r26, 0x7A	; 122
    3692:	b0 e0       	ldi	r27, 0x00	; 0
    3694:	bc 01       	movw	r22, r24
    3696:	cd 01       	movw	r24, r26
    3698:	0e 94 32 1c 	call	0x3864	; 0x3864 <__udivmodsi4>
    369c:	da 01       	movw	r26, r20
    369e:	c9 01       	movw	r24, r18
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	9a 83       	std	Y+2, r25	; 0x02
    36a4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    36a6:	e0 e4       	ldi	r30, 0x40	; 64
    36a8:	f0 e0       	ldi	r31, 0x00	; 0
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
    36ac:	9a 81       	ldd	r25, Y+2	; 0x02
    36ae:	89 2f       	mov	r24, r25
    36b0:	99 27       	eor	r25, r25
    36b2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    36b4:	e9 e2       	ldi	r30, 0x29	; 41
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
    36ba:	80 83       	st	Z, r24
}
    36bc:	26 96       	adiw	r28, 0x06	; 6
    36be:	0f b6       	in	r0, 0x3f	; 63
    36c0:	f8 94       	cli
    36c2:	de bf       	out	0x3e, r29	; 62
    36c4:	0f be       	out	0x3f, r0	; 63
    36c6:	cd bf       	out	0x3d, r28	; 61
    36c8:	cf 91       	pop	r28
    36ca:	df 91       	pop	r29
    36cc:	08 95       	ret

000036ce <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    36ce:	df 93       	push	r29
    36d0:	cf 93       	push	r28
    36d2:	0f 92       	push	r0
    36d4:	cd b7       	in	r28, 0x3d	; 61
    36d6:	de b7       	in	r29, 0x3e	; 62
    36d8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    36da:	eb e2       	ldi	r30, 0x2B	; 43
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	80 81       	ld	r24, Z
    36e0:	88 2f       	mov	r24, r24
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	80 72       	andi	r24, 0x20	; 32
    36e6:	90 70       	andi	r25, 0x00	; 0
    36e8:	00 97       	sbiw	r24, 0x00	; 0
    36ea:	b9 f3       	breq	.-18     	; 0x36da <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    36ec:	ec e2       	ldi	r30, 0x2C	; 44
    36ee:	f0 e0       	ldi	r31, 0x00	; 0
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    36f4:	0f 90       	pop	r0
    36f6:	cf 91       	pop	r28
    36f8:	df 91       	pop	r29
    36fa:	08 95       	ret

000036fc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    36fc:	df 93       	push	r29
    36fe:	cf 93       	push	r28
    3700:	cd b7       	in	r28, 0x3d	; 61
    3702:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3704:	eb e2       	ldi	r30, 0x2B	; 43
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	80 81       	ld	r24, Z
    370a:	88 23       	and	r24, r24
    370c:	dc f7       	brge	.-10     	; 0x3704 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    370e:	ec e2       	ldi	r30, 0x2C	; 44
    3710:	f0 e0       	ldi	r31, 0x00	; 0
    3712:	80 81       	ld	r24, Z
}
    3714:	cf 91       	pop	r28
    3716:	df 91       	pop	r29
    3718:	08 95       	ret

0000371a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    371a:	df 93       	push	r29
    371c:	cf 93       	push	r28
    371e:	00 d0       	rcall	.+0      	; 0x3720 <UART_sendString+0x6>
    3720:	0f 92       	push	r0
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
    3726:	9b 83       	std	Y+3, r25	; 0x03
    3728:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    372a:	19 82       	std	Y+1, r1	; 0x01
    372c:	0e c0       	rjmp	.+28     	; 0x374a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    372e:	89 81       	ldd	r24, Y+1	; 0x01
    3730:	28 2f       	mov	r18, r24
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	8a 81       	ldd	r24, Y+2	; 0x02
    3736:	9b 81       	ldd	r25, Y+3	; 0x03
    3738:	fc 01       	movw	r30, r24
    373a:	e2 0f       	add	r30, r18
    373c:	f3 1f       	adc	r31, r19
    373e:	80 81       	ld	r24, Z
    3740:	0e 94 67 1b 	call	0x36ce	; 0x36ce <UART_sendByte>
		i++;
    3744:	89 81       	ldd	r24, Y+1	; 0x01
    3746:	8f 5f       	subi	r24, 0xFF	; 255
    3748:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    374a:	89 81       	ldd	r24, Y+1	; 0x01
    374c:	28 2f       	mov	r18, r24
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	8a 81       	ldd	r24, Y+2	; 0x02
    3752:	9b 81       	ldd	r25, Y+3	; 0x03
    3754:	fc 01       	movw	r30, r24
    3756:	e2 0f       	add	r30, r18
    3758:	f3 1f       	adc	r31, r19
    375a:	80 81       	ld	r24, Z
    375c:	88 23       	and	r24, r24
    375e:	39 f7       	brne	.-50     	; 0x372e <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
	UART_sendByte('#');
    3760:	83 e2       	ldi	r24, 0x23	; 35
    3762:	0e 94 67 1b 	call	0x36ce	; 0x36ce <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	cf 91       	pop	r28
    376e:	df 91       	pop	r29
    3770:	08 95       	ret

00003772 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3772:	0f 93       	push	r16
    3774:	1f 93       	push	r17
    3776:	df 93       	push	r29
    3778:	cf 93       	push	r28
    377a:	00 d0       	rcall	.+0      	; 0x377c <UART_receiveString+0xa>
    377c:	0f 92       	push	r0
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62
    3782:	9b 83       	std	Y+3, r25	; 0x03
    3784:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3786:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	28 2f       	mov	r18, r24
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	8a 81       	ldd	r24, Y+2	; 0x02
    3790:	9b 81       	ldd	r25, Y+3	; 0x03
    3792:	8c 01       	movw	r16, r24
    3794:	02 0f       	add	r16, r18
    3796:	13 1f       	adc	r17, r19
    3798:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <UART_recieveByte>
    379c:	f8 01       	movw	r30, r16
    379e:	80 83       	st	Z, r24
    37a0:	0f c0       	rjmp	.+30     	; 0x37c0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	8f 5f       	subi	r24, 0xFF	; 255
    37a6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	28 2f       	mov	r18, r24
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	8a 81       	ldd	r24, Y+2	; 0x02
    37b0:	9b 81       	ldd	r25, Y+3	; 0x03
    37b2:	8c 01       	movw	r16, r24
    37b4:	02 0f       	add	r16, r18
    37b6:	13 1f       	adc	r17, r19
    37b8:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <UART_recieveByte>
    37bc:	f8 01       	movw	r30, r16
    37be:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
    37c2:	28 2f       	mov	r18, r24
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	8a 81       	ldd	r24, Y+2	; 0x02
    37c8:	9b 81       	ldd	r25, Y+3	; 0x03
    37ca:	fc 01       	movw	r30, r24
    37cc:	e2 0f       	add	r30, r18
    37ce:	f3 1f       	adc	r31, r19
    37d0:	80 81       	ld	r24, Z
    37d2:	83 32       	cpi	r24, 0x23	; 35
    37d4:	31 f7       	brne	.-52     	; 0x37a2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    37d6:	89 81       	ldd	r24, Y+1	; 0x01
    37d8:	28 2f       	mov	r18, r24
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	8a 81       	ldd	r24, Y+2	; 0x02
    37de:	9b 81       	ldd	r25, Y+3	; 0x03
    37e0:	fc 01       	movw	r30, r24
    37e2:	e2 0f       	add	r30, r18
    37e4:	f3 1f       	adc	r31, r19
    37e6:	10 82       	st	Z, r1
}
    37e8:	0f 90       	pop	r0
    37ea:	0f 90       	pop	r0
    37ec:	0f 90       	pop	r0
    37ee:	cf 91       	pop	r28
    37f0:	df 91       	pop	r29
    37f2:	1f 91       	pop	r17
    37f4:	0f 91       	pop	r16
    37f6:	08 95       	ret

000037f8 <UART_RX_SetCallBack>:
/***************************
 * Set Call Back Functions *
 ***************************/

void UART_RX_SetCallBack(volatile void(*a_ptr)(void))
{
    37f8:	df 93       	push	r29
    37fa:	cf 93       	push	r28
    37fc:	00 d0       	rcall	.+0      	; 0x37fe <UART_RX_SetCallBack+0x6>
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62
    3802:	9a 83       	std	Y+2, r25	; 0x02
    3804:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr_UART_RXC = a_ptr;
    3806:	89 81       	ldd	r24, Y+1	; 0x01
    3808:	9a 81       	ldd	r25, Y+2	; 0x02
    380a:	90 93 52 01 	sts	0x0152, r25
    380e:	80 93 51 01 	sts	0x0151, r24
}
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	08 95       	ret

0000381c <UART_TX_SetCallBack>:

void UART_TX_SetCallBack(volatile void(*a_ptr)(void))
{
    381c:	df 93       	push	r29
    381e:	cf 93       	push	r28
    3820:	00 d0       	rcall	.+0      	; 0x3822 <UART_TX_SetCallBack+0x6>
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
    3826:	9a 83       	std	Y+2, r25	; 0x02
    3828:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr_UART_TXC = a_ptr;
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	9a 81       	ldd	r25, Y+2	; 0x02
    382e:	90 93 54 01 	sts	0x0154, r25
    3832:	80 93 53 01 	sts	0x0153, r24
}
    3836:	0f 90       	pop	r0
    3838:	0f 90       	pop	r0
    383a:	cf 91       	pop	r28
    383c:	df 91       	pop	r29
    383e:	08 95       	ret

00003840 <UART_UDRE_SetCallBack>:

void UART_UDRE_SetCallBack(volatile void(*a_ptr)(void))
{
    3840:	df 93       	push	r29
    3842:	cf 93       	push	r28
    3844:	00 d0       	rcall	.+0      	; 0x3846 <UART_UDRE_SetCallBack+0x6>
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	9a 83       	std	Y+2, r25	; 0x02
    384c:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr_UART_UDRE = a_ptr;
    384e:	89 81       	ldd	r24, Y+1	; 0x01
    3850:	9a 81       	ldd	r25, Y+2	; 0x02
    3852:	90 93 56 01 	sts	0x0156, r25
    3856:	80 93 55 01 	sts	0x0155, r24
}
    385a:	0f 90       	pop	r0
    385c:	0f 90       	pop	r0
    385e:	cf 91       	pop	r28
    3860:	df 91       	pop	r29
    3862:	08 95       	ret

00003864 <__udivmodsi4>:
    3864:	a1 e2       	ldi	r26, 0x21	; 33
    3866:	1a 2e       	mov	r1, r26
    3868:	aa 1b       	sub	r26, r26
    386a:	bb 1b       	sub	r27, r27
    386c:	fd 01       	movw	r30, r26
    386e:	0d c0       	rjmp	.+26     	; 0x388a <__udivmodsi4_ep>

00003870 <__udivmodsi4_loop>:
    3870:	aa 1f       	adc	r26, r26
    3872:	bb 1f       	adc	r27, r27
    3874:	ee 1f       	adc	r30, r30
    3876:	ff 1f       	adc	r31, r31
    3878:	a2 17       	cp	r26, r18
    387a:	b3 07       	cpc	r27, r19
    387c:	e4 07       	cpc	r30, r20
    387e:	f5 07       	cpc	r31, r21
    3880:	20 f0       	brcs	.+8      	; 0x388a <__udivmodsi4_ep>
    3882:	a2 1b       	sub	r26, r18
    3884:	b3 0b       	sbc	r27, r19
    3886:	e4 0b       	sbc	r30, r20
    3888:	f5 0b       	sbc	r31, r21

0000388a <__udivmodsi4_ep>:
    388a:	66 1f       	adc	r22, r22
    388c:	77 1f       	adc	r23, r23
    388e:	88 1f       	adc	r24, r24
    3890:	99 1f       	adc	r25, r25
    3892:	1a 94       	dec	r1
    3894:	69 f7       	brne	.-38     	; 0x3870 <__udivmodsi4_loop>
    3896:	60 95       	com	r22
    3898:	70 95       	com	r23
    389a:	80 95       	com	r24
    389c:	90 95       	com	r25
    389e:	9b 01       	movw	r18, r22
    38a0:	ac 01       	movw	r20, r24
    38a2:	bd 01       	movw	r22, r26
    38a4:	cf 01       	movw	r24, r30
    38a6:	08 95       	ret

000038a8 <__prologue_saves__>:
    38a8:	2f 92       	push	r2
    38aa:	3f 92       	push	r3
    38ac:	4f 92       	push	r4
    38ae:	5f 92       	push	r5
    38b0:	6f 92       	push	r6
    38b2:	7f 92       	push	r7
    38b4:	8f 92       	push	r8
    38b6:	9f 92       	push	r9
    38b8:	af 92       	push	r10
    38ba:	bf 92       	push	r11
    38bc:	cf 92       	push	r12
    38be:	df 92       	push	r13
    38c0:	ef 92       	push	r14
    38c2:	ff 92       	push	r15
    38c4:	0f 93       	push	r16
    38c6:	1f 93       	push	r17
    38c8:	cf 93       	push	r28
    38ca:	df 93       	push	r29
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
    38d0:	ca 1b       	sub	r28, r26
    38d2:	db 0b       	sbc	r29, r27
    38d4:	0f b6       	in	r0, 0x3f	; 63
    38d6:	f8 94       	cli
    38d8:	de bf       	out	0x3e, r29	; 62
    38da:	0f be       	out	0x3f, r0	; 63
    38dc:	cd bf       	out	0x3d, r28	; 61
    38de:	09 94       	ijmp

000038e0 <__epilogue_restores__>:
    38e0:	2a 88       	ldd	r2, Y+18	; 0x12
    38e2:	39 88       	ldd	r3, Y+17	; 0x11
    38e4:	48 88       	ldd	r4, Y+16	; 0x10
    38e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    38e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    38ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    38ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    38ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    38f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    38f2:	b9 84       	ldd	r11, Y+9	; 0x09
    38f4:	c8 84       	ldd	r12, Y+8	; 0x08
    38f6:	df 80       	ldd	r13, Y+7	; 0x07
    38f8:	ee 80       	ldd	r14, Y+6	; 0x06
    38fa:	fd 80       	ldd	r15, Y+5	; 0x05
    38fc:	0c 81       	ldd	r16, Y+4	; 0x04
    38fe:	1b 81       	ldd	r17, Y+3	; 0x03
    3900:	aa 81       	ldd	r26, Y+2	; 0x02
    3902:	b9 81       	ldd	r27, Y+1	; 0x01
    3904:	ce 0f       	add	r28, r30
    3906:	d1 1d       	adc	r29, r1
    3908:	0f b6       	in	r0, 0x3f	; 63
    390a:	f8 94       	cli
    390c:	de bf       	out	0x3e, r29	; 62
    390e:	0f be       	out	0x3f, r0	; 63
    3910:	cd bf       	out	0x3d, r28	; 61
    3912:	ed 01       	movw	r28, r26
    3914:	08 95       	ret

00003916 <itoa>:
    3916:	fb 01       	movw	r30, r22
    3918:	9f 01       	movw	r18, r30
    391a:	e8 94       	clt
    391c:	42 30       	cpi	r20, 0x02	; 2
    391e:	c4 f0       	brlt	.+48     	; 0x3950 <itoa+0x3a>
    3920:	45 32       	cpi	r20, 0x25	; 37
    3922:	b4 f4       	brge	.+44     	; 0x3950 <itoa+0x3a>
    3924:	4a 30       	cpi	r20, 0x0A	; 10
    3926:	29 f4       	brne	.+10     	; 0x3932 <itoa+0x1c>
    3928:	97 fb       	bst	r25, 7
    392a:	1e f4       	brtc	.+6      	; 0x3932 <itoa+0x1c>
    392c:	90 95       	com	r25
    392e:	81 95       	neg	r24
    3930:	9f 4f       	sbci	r25, 0xFF	; 255
    3932:	64 2f       	mov	r22, r20
    3934:	77 27       	eor	r23, r23
    3936:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__udivmodhi4>
    393a:	80 5d       	subi	r24, 0xD0	; 208
    393c:	8a 33       	cpi	r24, 0x3A	; 58
    393e:	0c f0       	brlt	.+2      	; 0x3942 <itoa+0x2c>
    3940:	89 5d       	subi	r24, 0xD9	; 217
    3942:	81 93       	st	Z+, r24
    3944:	cb 01       	movw	r24, r22
    3946:	00 97       	sbiw	r24, 0x00	; 0
    3948:	a1 f7       	brne	.-24     	; 0x3932 <itoa+0x1c>
    394a:	16 f4       	brtc	.+4      	; 0x3950 <itoa+0x3a>
    394c:	5d e2       	ldi	r21, 0x2D	; 45
    394e:	51 93       	st	Z+, r21
    3950:	10 82       	st	Z, r1
    3952:	c9 01       	movw	r24, r18
    3954:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <strrev>

00003958 <strrev>:
    3958:	dc 01       	movw	r26, r24
    395a:	fc 01       	movw	r30, r24
    395c:	67 2f       	mov	r22, r23
    395e:	71 91       	ld	r23, Z+
    3960:	77 23       	and	r23, r23
    3962:	e1 f7       	brne	.-8      	; 0x395c <strrev+0x4>
    3964:	32 97       	sbiw	r30, 0x02	; 2
    3966:	04 c0       	rjmp	.+8      	; 0x3970 <strrev+0x18>
    3968:	7c 91       	ld	r23, X
    396a:	6d 93       	st	X+, r22
    396c:	70 83       	st	Z, r23
    396e:	62 91       	ld	r22, -Z
    3970:	ae 17       	cp	r26, r30
    3972:	bf 07       	cpc	r27, r31
    3974:	c8 f3       	brcs	.-14     	; 0x3968 <strrev+0x10>
    3976:	08 95       	ret

00003978 <__udivmodhi4>:
    3978:	aa 1b       	sub	r26, r26
    397a:	bb 1b       	sub	r27, r27
    397c:	51 e1       	ldi	r21, 0x11	; 17
    397e:	07 c0       	rjmp	.+14     	; 0x398e <__udivmodhi4_ep>

00003980 <__udivmodhi4_loop>:
    3980:	aa 1f       	adc	r26, r26
    3982:	bb 1f       	adc	r27, r27
    3984:	a6 17       	cp	r26, r22
    3986:	b7 07       	cpc	r27, r23
    3988:	10 f0       	brcs	.+4      	; 0x398e <__udivmodhi4_ep>
    398a:	a6 1b       	sub	r26, r22
    398c:	b7 0b       	sbc	r27, r23

0000398e <__udivmodhi4_ep>:
    398e:	88 1f       	adc	r24, r24
    3990:	99 1f       	adc	r25, r25
    3992:	5a 95       	dec	r21
    3994:	a9 f7       	brne	.-22     	; 0x3980 <__udivmodhi4_loop>
    3996:	80 95       	com	r24
    3998:	90 95       	com	r25
    399a:	bc 01       	movw	r22, r24
    399c:	cd 01       	movw	r24, r26
    399e:	08 95       	ret

000039a0 <_exit>:
    39a0:	f8 94       	cli

000039a2 <__stop_program>:
    39a2:	ff cf       	rjmp	.-2      	; 0x39a2 <__stop_program>
