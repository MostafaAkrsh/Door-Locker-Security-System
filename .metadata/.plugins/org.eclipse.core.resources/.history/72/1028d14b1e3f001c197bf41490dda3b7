#include "helpers.h"

uint8 g_pass[PASS_SIZE];

uint8 EEPROM_pass[PASS_SIZE];
uint8 EE[PASS_SIZE];

uint8 key;

uint8 g_tick = 0;

/* Call Back Functions */
void volatile clock() {
	g_tick++;

	/* USED FOR DEBUGGING
	 *  display the g_tick value
	LCD_intgerToString(g_tick);
	*/
}

int main() {

	/* Configure Timer1 to make interrupt every 1 SEC
	 * timer_frequency = ECU_Frequency / Prescaler
	 * 				   = 8M/256 = 31250
	 * clock time = 	1/timer_frequency
	 * 			  = 	1/31250
	 * compare value =  ( timer_required ) / ( clock_time )
	 * 				 = 1/(1/31250) = 31250*/

	TIMER_Config config;

	config.timer_id = TIMER1_ID;
	config.timer_mode = COMPARE_MODE;
	config.timer_clk = PRESCALER256;
	config.oc_mode = DISABLED;
	config.interrupt = ON;
	config.inital_value = 0;
	config.compare_value = 31250;

	Timer_Init(&config);

	/* Set the callback function */
	Timer_SetCallBack(TIMER1_ID, clock, COMPARE_MODE);

	/* Used for debugging
	LCD_init();
	LCD_displayString("me1");
	 */

	/* Buzzer Initialization */
	Buzzer_init(PORTB_ID, PIN0_ID);

	/* Motor Initialization */
	DcMotor_Init(PORTB_ID, PIN5_ID, PIN4_ID);

	/* EEPROM Init */
	EEPROM_init();

	/* Uart Initialization */
	UART_Config uconfig;

	uconfig.RxEn = ON;
	uconfig.TxEn = ON;
	uconfig.EMPInt = OFF;
	uconfig.RxInt = OFF;
	uconfig.TxInt = OFF;
	uconfig.doublespeed = ON;
	uconfig.parity = EVEN;
	uconfig.stopbits = ONE;
	uconfig.databits = EIGHT;
	uconfig.baudrate = 9600;

	UART_init(&uconfig);

	/* Used for debugging
	LCD_displayString("me2");
	*/

	/* Enable the global interrupt */
	SREG |= (1 << 7);

	/* the first state is Idle */
	State state = IDLE;

	/* Finite State Machine */
	while (1) {
		switch (state) {
		/************************* IDLE STATE **************************/
		case IDLE:
			key = UART_recieveByte();
			LCD_displayString("ok");
			if (key == '!') {
				state = SAVE_PASSWORD;
				LCD_displayString("go to save");
			}
			break;
		/************************* SAVE_PASSWORD STATE **************************/
		case SAVE_PASSWORD:
			UART_sendByte('!');
			UART_receiveString(g_pass);
			LCD_displayString(g_pass);
			EEPROM_writeString(g_pass, PASS_SIZE);
			LCD_displayString("written");
			state = OPTIONS;
			break;
			/************************* OPTIONS STATE **************************/
		case OPTIONS:
			key = UART_recieveByte();

			switch (key) {
			case '+':
				state = CHECK_PASSWORD;
				break;
			case '-':
				key = UART_recieveByte();
				LCD_displayString("ok");
				if (key == '!') {
					state = SAVE_PASSWORD;
					LCD_displayString("go to save");
				}
				state = SAVE_PASSWORD;

				break;
			case '0':
				state = THIEF;
				break;
			}
			break;
			/************************* CHECK_PASSWORD **************************/
		case CHECK_PASSWORD:
			LCD_displayCharacter(key);

			UART_sendByte('!');
			UART_receiveString(g_pass);
			EEPROM_readString(EEPROM_pass, PASS_SIZE);
			LCD_moveCursor(1, 0);

			if (check_identical(EE, g_pass)) {
				LCD_displayString("identical");

				state = OPEN_DOOR;
			} else {
				key = UART_recieveByte();
				if (key == '+') {
					UART_sendByte('X');
				}
				LCD_displayString("not");
				state = OPTIONS;
			}
			break;

			/************************* OPEN_DOOR **************************/

		case OPEN_DOOR:
			key = UART_recieveByte();
			if (key == '+')
				UART_sendByte('+');
			DcMotor_Rotate(CW, 100);
			g_tick = 0;
			while (g_tick <= 15)
				;
			DcMotor_Rotate(CW, 0);
			UART_sendByte('/');
			state = CLOSE_DOOR;
			break;
		case CLOSE_DOOR:
			key = UART_recieveByte();
			if (key == '+')
				DcMotor_Rotate(A_CW, 100);
			g_tick = 0;
			while (g_tick <= 15)
				;
			DcMotor_Rotate(A_CW, 0);
			UART_sendByte('/');
			state = OPTIONS;
			break;
		case THIEF:
			Buzzer_ON();

			key = UART_recieveByte();
			if (key == '1') {
				Buzzer_OFF();
				state = OPTIONS;
			}
			break;

		}

	}
}
