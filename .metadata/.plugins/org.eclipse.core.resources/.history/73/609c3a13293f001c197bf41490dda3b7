#include "helpers.h"

uint8 password1[PASS_SIZE];
uint8 password2[PASS_SIZE];
uint8 passwordCheck[PASS_SIZE];

uint8 g_tick = 0;

/* Call back functions to count seconds */
volatile void clock() {
	g_tick++;
}

int main() {
	/* Configure Timer1 to make interrupt every 1 SEC
	 * timer_frequency = ECU_Frequency / Prescaler
	 * 				   = 8M/256 = 31250
	 * clock time = 	1/timer_frequency
	 * 			  = 	1/31250
	 * compare value =  ( timer_required ) / ( clock_time )
	 * 				 = 1/(1/31250) = 31250*/
	TIMER_Config config;

	config.timer_id = TIMER1_ID;
	config.timer_mode = COMPARE_MODE;
	config.timer_clk = PRESCALER256;
	config.oc_mode = TOGGLE;
	config.interrupt = ON;
	config.inital_value = 0;
	config.compare_value = 31250;

	Timer_Init(&config);

	/* set the callback function */
	Timer_SetCallBack(TIMER1_ID, clock, COMPARE_MODE);

	/********************** Modules Initialization ************************/

	/* Uart Initialization */
	UART_Config uconfig;

	uconfig.RxEn = ON;
	uconfig.TxEn = ON;
	uconfig.EMPInt = OFF;
	uconfig.RxInt = OFF;
	uconfig.TxInt = OFF;
	uconfig.doublespeed = ON;
	uconfig.parity = EVEN;
	uconfig.stopbits = ONE;
	uconfig.databits = EIGHT;
	uconfig.baudrate = 9600;

	UART_init(&uconfig);

	/* LCD Initialization */
	LCD_init();

	/* Enable The global Interrupt */
	SREG |= (1 << 7);
	uint8 key;

	/* State Machine */
	State state = CHANGE_PW_STATE;

	uint8 no_of_trials = 0;
	while (1) {
		switch (state) {
		/*********************** CHANGE_PW_STATE ************************/
		case CHANGE_PW_STATE:
			enter_password();
			uint8 iscorrect = reenter_password();
			if (iscorrect == YES) {
				/* if two inputs are identical goto options menu */
				state = OPTIONS_STATE;
			} else {
				/* not identical return to the same state */
				password_not_identical();
			}
			break;

			/*********************** OPTIONS_STATE ************************/
		case OPTIONS_STATE:
			key++; /* any trivial instruction due I can't initialize any thing in the fist line of case block */

			/* Display Meun */
			Option option = main_options();

			if (option == CHANGEPW) {
				state = CHANGE_PW_STATE;
			} else if (option == OPENDOOR) {
				state = ENTER_PW_STATE;
			}
			break;

			/*********************** ENTER_PW_STATE ************************/
		case ENTER_PW_STATE:
			if (enter_saved_password()) {
				state = OPEN_DOOR_STATE;
				no_of_trials = 0;
			} else if (no_of_trials >= 2) { /* If number of trials > 3 goto theif state*/
				state = THIEF_STATE;
			} else {
				no_of_trials++;
			}
			break;

			/*********************** OPEN_DOOR_STATE ************************/
		case OPEN_DOOR_STATE:
			open_door();
			state = CLOSE_DOOR_STATE;
			break;

			/*********************** CLOSE_DOOR_STATE ************************/
		case CLOSE_DOOR_STATE:
			key++;
			uint8 close = ask_to_close();
			if (close == YES) {
				close_door();
				state = OPTIONS_STATE;
			}
			break;

			/*********************** THIEF_STATE ************************/
		case THIEF_STATE:
			LCD_displayString("THEIF");
			UART_sendByte('0');
			g_tick = 0;
			/* wait for 1 minute */
			while (g_tick < 60)
				;
			UART_sendByte('1'); /* send to controller ecu that the 1 minute is end */
			state = OPTIONS_STATE;
			break;
		}
	}
}
